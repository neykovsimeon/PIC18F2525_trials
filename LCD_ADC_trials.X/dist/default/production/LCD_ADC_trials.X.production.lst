

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Sep 15 10:15:12 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2525
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58  0000                     
    59                           ; Version 1.42
    60                           ; Generated 13/04/2017 GMT
    61                           ; 
    62                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F2525 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  003760                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _vRef
    99  003760  00                 	db	0
   100  003761  20                 	db	32
   101  003762  40                 	db	64
   102                           
   103                           	psect	smallconst
   104  001000                     __psmallconst:
   105                           	opt stack 0
   106  001000  00                 	db	0
   107  001001                     _dpowers:
   108                           	opt stack 0
   109  001001  0001               	dw	1
   110  001003  0000               	dw	0
   111  001005  000A               	dw	10
   112  001007  0000               	dw	0
   113  001009  0064               	dw	100
   114  00100B  0000               	dw	0
   115  00100D  03E8               	dw	1000
   116  00100F  0000               	dw	0
   117  001011  2710               	dw	10000
   118  001013  0000               	dw	0
   119  001015  86A0               	dw	34464
   120  001017  0001               	dw	1
   121  001019  4240               	dw	16960
   122  00101B  000F               	dw	15
   123  00101D  9680               	dw	38528
   124  00101F  0098               	dw	152
   125  001021  E100               	dw	57600
   126  001023  05F5               	dw	1525
   127  001025  CA00               	dw	51712
   128  001027  3B9A               	dw	15258
   129  001029                     __end_of_dpowers:
   130                           	opt stack 0
   131  001029                     __powers_:
   132                           	opt stack 0
   133  001029  00                 	db	0
   134  00102A  80                 	db	128
   135  00102B  3F                 	db	63
   136  00102C  00                 	db	0
   137  00102D  20                 	db	32
   138  00102E  41                 	db	65
   139  00102F  00                 	db	0
   140  001030  C8                 	db	200
   141  001031  42                 	db	66
   142  001032  00                 	db	0
   143  001033  7A                 	db	122
   144  001034  44                 	db	68
   145  001035  40                 	db	64
   146  001036  1C                 	db	28
   147  001037  46                 	db	70
   148  001038  50                 	db	80
   149  001039  C3                 	db	195
   150  00103A  47                 	db	71
   151  00103B  24                 	db	36
   152  00103C  74                 	db	116
   153  00103D  49                 	db	73
   154  00103E  97                 	db	151
   155  00103F  18                 	db	24
   156  001040  4B                 	db	75
   157  001041  BC                 	db	188
   158  001042  BE                 	db	190
   159  001043  4C                 	db	76
   160  001044  6B                 	db	107
   161  001045  6E                 	db	110
   162  001046  4E                 	db	78
   163  001047  03                 	db	3
   164  001048  15                 	db	21
   165  001049  50                 	db	80
   166  00104A  79                 	db	121
   167  00104B  AD                 	db	173
   168  00104C  60                 	db	96
   169  00104D  F3                 	db	243
   170  00104E  49                 	db	73
   171  00104F  71                 	db	113
   172  001050                     __end_of__powers_:
   173                           	opt stack 0
   174  001050                     __npowers_:
   175                           	opt stack 0
   176  001050  00                 	db	0
   177  001051  80                 	db	128
   178  001052  3F                 	db	63
   179  001053  CD                 	db	205
   180  001054  CC                 	db	204
   181  001055  3D                 	db	61
   182  001056  D7                 	db	215
   183  001057  23                 	db	35
   184  001058  3C                 	db	60
   185  001059  12                 	db	18
   186  00105A  83                 	db	131
   187  00105B  3A                 	db	58
   188  00105C  B7                 	db	183
   189  00105D  D1                 	db	209
   190  00105E  38                 	db	56
   191  00105F  C6                 	db	198
   192  001060  27                 	db	39
   193  001061  37                 	db	55
   194  001062  38                 	db	56
   195  001063  86                 	db	134
   196  001064  35                 	db	53
   197  001065  C0                 	db	192
   198  001066  D6                 	db	214
   199  001067  33                 	db	51
   200  001068  CC                 	db	204
   201  001069  2B                 	db	43
   202  00106A  32                 	db	50
   203  00106B  70                 	db	112
   204  00106C  89                 	db	137
   205  00106D  30                 	db	48
   206  00106E  E7                 	db	231
   207  00106F  DB                 	db	219
   208  001070  2E                 	db	46
   209  001071  E5                 	db	229
   210  001072  3C                 	db	60
   211  001073  1E                 	db	30
   212  001074  42                 	db	66
   213  001075  A2                 	db	162
   214  001076  0D                 	db	13
   215  001077                     __end_of__npowers_:
   216                           	opt stack 0
   217  0000                     _ADRESL	set	4035
   218  0000                     _ADRESH	set	4036
   219  0000                     _INTCONbits	set	4082
   220  0000                     _PIR1bits	set	3998
   221  0000                     _ADCON1	set	4033
   222  0000                     _ADCON2	set	4032
   223  0000                     _ADCON0	set	4034
   224  0000                     _PIE1bits	set	3997
   225  0000                     _ADCON0bits	set	4034
   226  0000                     _TRISCbits	set	3988
   227  0000                     _TRISB	set	3987
   228  0000                     _PORTB	set	3969
   229  0000                     _LATCbits	set	3979
   230  0000                     _LATAbits	set	3977
   231  0000                     _OSCCON	set	4051
   232  0000                     _TRISAbits	set	3986
   233  001077                     STR_4:
   234  001077  49                 	db	73	;'I'
   235  001078  28                 	db	40
   236  001079  6F                 	db	111	;'o'
   237  00107A  75                 	db	117	;'u'
   238  00107B  74                 	db	116	;'t'
   239  00107C  29                 	db	41
   240  00107D  5B                 	db	91	;'['
   241  00107E  41                 	db	65	;'A'
   242  00107F  5D                 	db	93	;']'
   243  001080  3D                 	db	61	;'='
   244  001081  20                 	db	32
   245  001082  20                 	db	32
   246  001083  20                 	db	32
   247  001084  20                 	db	32
   248  001085  20                 	db	32
   249  001086  20                 	db	32
   250  001087  00                 	db	0
   251  001088                     STR_3:
   252  001088  55                 	db	85	;'U'
   253  001089  28                 	db	40
   254  00108A  6F                 	db	111	;'o'
   255  00108B  75                 	db	117	;'u'
   256  00108C  74                 	db	116	;'t'
   257  00108D  29                 	db	41
   258  00108E  5B                 	db	91	;'['
   259  00108F  56                 	db	86	;'V'
   260  001090  5D                 	db	93	;']'
   261  001091  3D                 	db	61	;'='
   262  001092  20                 	db	32
   263  001093  20                 	db	32
   264  001094  20                 	db	32
   265  001095  20                 	db	32
   266  001096  20                 	db	32
   267  001097  20                 	db	32
   268  001098  00                 	db	0
   269  001099                     STR_1:
   270  001099  20                 	db	32
   271  00109A  20                 	db	32
   272  00109B  50                 	db	80	;'P'
   273  00109C  6F                 	db	111	;'o'
   274  00109D  77                 	db	119	;'w'
   275  00109E  65                 	db	101	;'e'
   276  00109F  72                 	db	114	;'r'
   277  0010A0  20                 	db	32
   278  0010A1  53                 	db	83	;'S'
   279  0010A2  75                 	db	117	;'u'
   280  0010A3  70                 	db	112	;'p'
   281  0010A4  70                 	db	112	;'p'
   282  0010A5  6C                 	db	108	;'l'
   283  0010A6  79                 	db	121	;'y'
   284  0010A7  20                 	db	32
   285  0010A8  20                 	db	32
   286  0010A9  00                 	db	0
   287  0010AA                     STR_2:
   288  0010AA  76                 	db	118	;'v'
   289  0010AB  31                 	db	49	;'1'
   290  0010AC  2E                 	db	46
   291  0010AD  30                 	db	48	;'0'
   292  0010AE  00                 	db	0
   293  0010AF                     STR_5:
   294  0010AF  25                 	db	37
   295  0010B0  2E                 	db	46
   296  0010B1  33                 	db	51	;'3'
   297  0010B2  67                 	db	103	;'g'
   298  0010B3  00                 	db	0
   299  0000                     
   300                           ; #config settings
   301  0010B4  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  0033EE                     __pcinit:
   305                           	opt stack 0
   306  0033EE                     start_initialization:
   307                           	opt stack 0
   308  0033EE                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Initialize objects allocated to COMRAM (3 bytes)
   312                           ; load TBLPTR registers with __pidataCOMRAM
   313  0033EE  0E60               	movlw	low __pidataCOMRAM
   314  0033F0  6EF6               	movwf	tblptrl,c
   315  0033F2  0E37               	movlw	high __pidataCOMRAM
   316  0033F4  6EF7               	movwf	tblptrh,c
   317  0033F6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   318  0033F8  6EF8               	movwf	tblptru,c
   319  0033FA  0009               	tblrd		*+	;fetch initializer
   320  0033FC  CFF5 F07B          	movff	tablat,__pdataCOMRAM
   321  003400  0009               	tblrd		*+	;fetch initializer
   322  003402  CFF5 F07C          	movff	tablat,__pdataCOMRAM+1
   323  003406  0009               	tblrd		*+	;fetch initializer
   324  003408  CFF5 F07D          	movff	tablat,__pdataCOMRAM+2
   325                           
   326                           ; Clear objects allocated to BANK0 (10 bytes)
   327  00340C  EE00  F09A         	lfsr	0,__pbssBANK0
   328  003410  0E0A               	movlw	10
   329  003412                     clear_0:
   330  003412  6AEE               	clrf	postinc0,c
   331  003414  06E8               	decf	wreg,f,c
   332  003416  E1FD               	bnz	clear_0
   333                           
   334                           ; Clear objects allocated to COMRAM (8 bytes)
   335  003418  EE00  F073         	lfsr	0,__pbssCOMRAM
   336  00341C  0E08               	movlw	8
   337  00341E                     clear_1:
   338  00341E  6AEE               	clrf	postinc0,c
   339  003420  06E8               	decf	wreg,f,c
   340  003422  E1FD               	bnz	clear_1
   341  003424                     end_of_initialization:
   342                           	opt stack 0
   343  003424                     __end_of__initialization:
   344                           	opt stack 0
   345  003424  0E00               	movlw	low (__Lmediumconst shr (0+16))
   346  003426  6EF8               	movwf	tblptru,c
   347  003428  0100               	movlb	0
   348  00342A  EFBB  F011         	goto	_main	;jump to C main() function
   349                           tblptru	equ	0xFF8
   350                           tblptrh	equ	0xFF7
   351                           tblptrl	equ	0xFF6
   352                           tablat	equ	0xFF5
   353                           postinc0	equ	0xFEE
   354                           wreg	equ	0xFE8
   355                           
   356                           	psect	bssCOMRAM
   357  000073                     __pbssCOMRAM:
   358                           	opt stack 0
   359  000073                     _voltage:
   360                           	opt stack 0
   361  000073                     	ds	3
   362  000076                     _u_AN0:
   363                           	opt stack 0
   364  000076                     	ds	3
   365  000079                     _ADCResult:
   366                           	opt stack 0
   367  000079                     	ds	2
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           
   375                           	psect	dataCOMRAM
   376  00007B                     __pdataCOMRAM:
   377                           	opt stack 0
   378  00007B                     _vRef:
   379                           	opt stack 0
   380  00007B                     	ds	3
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	bssBANK0
   389  00009A                     __pbssBANK0:
   390                           	opt stack 0
   391  00009A                     _ResultString:
   392                           	opt stack 0
   393  00009A                     	ds	10
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           
   401                           	psect	cstackBANK0
   402  000080                     __pcstackBANK0:
   403                           	opt stack 0
   404  000080                     _sprintf$1615:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x0
   408  000080                     	ds	3
   409  000083                     sprintf@ap:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x3
   413  000083                     	ds	2
   414  000085                     sprintf@temp:
   415                           	opt stack 0
   416                           
   417                           ; 3 bytes @ 0x5
   418  000085                     	ds	3
   419  000088                     sprintf@flag:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x8
   423  000088                     	ds	2
   424  00008A                     sprintf@tmpval:
   425                           	opt stack 0
   426                           
   427                           ; 4 bytes @ 0xA
   428  00008A                     	ds	4
   429  00008E                     sprintf@val:
   430                           	opt stack 0
   431                           
   432                           ; 4 bytes @ 0xE
   433  00008E                     	ds	4
   434  000092                     sprintf@exp:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x12
   438  000092                     	ds	2
   439  000094                     sprintf@prec:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x14
   443  000094                     	ds	2
   444  000096                     sprintf@fval:
   445                           	opt stack 0
   446                           
   447                           ; 3 bytes @ 0x16
   448  000096                     	ds	3
   449  000099                     sprintf@c:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x19
   453  000099                     	ds	1
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           
   461                           	psect	cstackCOMRAM
   462  000001                     __pcstackCOMRAM:
   463                           	opt stack 0
   464  000001                     ??_SetDDRamAddr:
   465  000001                     ??_SetChanADC:
   466  000001                     ??_Delay10KTCYx:
   467  000001                     ??_isdigit:
   468  000001                     ??_Delay1Sec:
   469  000001                     ??_DelayHalfSec:
   470  000001                     ?_ReadADC:
   471                           	opt stack 0
   472  000001                     ?___awmod:
   473                           	opt stack 0
   474  000001                     ?___ftpack:
   475                           	opt stack 0
   476  000001                     ?__tdiv_to_l_:
   477                           	opt stack 0
   478  000001                     ?__div_to_l_:
   479                           	opt stack 0
   480  000001                     ?___lldiv:
   481                           	opt stack 0
   482  000001                     ?___llmod:
   483                           	opt stack 0
   484  000001                     WriteCmdXLCD@cmd:
   485                           	opt stack 0
   486  000001                     WriteDataXLCD@data:
   487                           	opt stack 0
   488  000001                     OpenADC@config2:
   489                           	opt stack 0
   490  000001                     Delay1KTCYx@unit:
   491                           	opt stack 0
   492  000001                     ___awmod@dividend:
   493                           	opt stack 0
   494  000001                     __div_to_l_@f1:
   495                           	opt stack 0
   496  000001                     ___ftpack@arg:
   497                           	opt stack 0
   498  000001                     __tdiv_to_l_@f1:
   499                           	opt stack 0
   500  000001                     ___lldiv@dividend:
   501                           	opt stack 0
   502  000001                     ___llmod@dividend:
   503                           	opt stack 0
   504                           
   505                           ; 4 bytes @ 0x0
   506  000001                     	ds	1
   507  000002                     OpenADC@portconfig:
   508                           	opt stack 0
   509  000002                     SetChanADC@channel:
   510                           	opt stack 0
   511  000002                     Delay10KTCYx@unit:
   512                           	opt stack 0
   513  000002                     _isdigit$1257:
   514                           	opt stack 0
   515  000002                     Delay1Sec@cntDelay:
   516                           	opt stack 0
   517  000002                     DelayHalfSec@cntDelay:
   518                           	opt stack 0
   519  000002                     putrsXLCD@buffer:
   520                           	opt stack 0
   521  000002                     putsXLCD@buffer:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x1
   525  000002                     	ds	1
   526  000003                     ??_OpenADC:
   527  000003                     ??_ReadADC:
   528  000003                     isdigit@c:
   529                           	opt stack 0
   530  000003                     ___awmod@divisor:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x2
   534  000003                     	ds	1
   535  000004                     SetDDRamAddr@DDaddr:
   536                           	opt stack 0
   537  000004                     ___ftpack@exp:
   538                           	opt stack 0
   539  000004                     __div_to_l_@f2:
   540                           	opt stack 0
   541  000004                     __tdiv_to_l_@f2:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x3
   545  000004                     	ds	1
   546  000005                     OpenXLCD@lcdtype:
   547                           	opt stack 0
   548  000005                     OpenADC@config:
   549                           	opt stack 0
   550  000005                     ___awmod@counter:
   551                           	opt stack 0
   552  000005                     ___ftpack@sign:
   553                           	opt stack 0
   554  000005                     ___lldiv@divisor:
   555                           	opt stack 0
   556  000005                     ___llmod@divisor:
   557                           	opt stack 0
   558                           
   559                           ; 4 bytes @ 0x4
   560  000005                     	ds	1
   561  000006                     ??___ftpack:
   562  000006                     init_ADC@channel:
   563                           	opt stack 0
   564  000006                     ___awmod@sign:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x5
   568  000006                     	ds	1
   569  000007                     ??__tdiv_to_l_:
   570  000007                     ?___awdiv:
   571                           	opt stack 0
   572  000007                     init_ADC@config3:
   573                           	opt stack 0
   574  000007                     ___awdiv@dividend:
   575                           	opt stack 0
   576  000007                     __div_to_l_@quot:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x6
   580  000007                     	ds	1
   581  000008                     init_ADC@i:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x7
   585  000008                     	ds	1
   586  000009                     ?___lwtoft:
   587                           	opt stack 0
   588  000009                     init_ADC@config1:
   589                           	opt stack 0
   590  000009                     ___llmod@counter:
   591                           	opt stack 0
   592  000009                     ___awdiv@divisor:
   593                           	opt stack 0
   594  000009                     ___lwtoft@c:
   595                           	opt stack 0
   596  000009                     ___lldiv@quotient:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x8
   600  000009                     	ds	1
   601  00000A                     init_ADC@config2:
   602                           	opt stack 0
   603  00000A                     __tdiv_to_l_@quot:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x9
   607  00000A                     	ds	1
   608  00000B                     init_ADC@portconfig:
   609                           	opt stack 0
   610  00000B                     ___awdiv@counter:
   611                           	opt stack 0
   612  00000B                     __div_to_l_@cntr:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0xA
   616  00000B                     	ds	1
   617  00000C                     ___awdiv@sign:
   618                           	opt stack 0
   619  00000C                     __div_to_l_@exp1:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0xB
   623  00000C                     	ds	1
   624  00000D                     ___lldiv@counter:
   625                           	opt stack 0
   626  00000D                     ___awdiv@quotient:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0xC
   630  00000D                     	ds	1
   631  00000E                     __tdiv_to_l_@cntr:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0xD
   635  00000E                     	ds	1
   636  00000F                     ?___wmul:
   637                           	opt stack 0
   638  00000F                     __tdiv_to_l_@exp1:
   639                           	opt stack 0
   640  00000F                     ___wmul@multiplier:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0xE
   644  00000F                     	ds	2
   645  000011                     ___wmul@multiplicand:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x10
   649  000011                     	ds	2
   650  000013                     ___wmul@product:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x12
   654  000013                     	ds	2
   655  000015                     ?___fttol:
   656                           	opt stack 0
   657  000015                     ___fttol@f1:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x14
   661  000015                     	ds	4
   662  000019                     ??___fttol:
   663                           
   664                           ; 1 bytes @ 0x18
   665  000019                     	ds	5
   666  00001E                     ___fttol@sign1:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x1D
   670  00001E                     	ds	1
   671  00001F                     ___fttol@lval:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0x1E
   675  00001F                     	ds	4
   676  000023                     ___fttol@exp1:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x22
   680  000023                     	ds	1
   681  000024                     ?___lltoft:
   682                           	opt stack 0
   683  000024                     ___lltoft@c:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x23
   687  000024                     	ds	4
   688  000028                     ??___lltoft:
   689                           
   690                           ; 1 bytes @ 0x27
   691  000028                     	ds	4
   692  00002C                     ___lltoft@exp:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x2B
   696  00002C                     	ds	1
   697  00002D                     ?___ftneg:
   698                           	opt stack 0
   699  00002D                     ___ftneg@f1:
   700                           	opt stack 0
   701                           
   702                           ; 3 bytes @ 0x2C
   703  00002D                     	ds	3
   704  000030                     ?___ftmul:
   705                           	opt stack 0
   706  000030                     ___ftmul@f1:
   707                           	opt stack 0
   708                           
   709                           ; 3 bytes @ 0x2F
   710  000030                     	ds	3
   711  000033                     ___ftmul@f2:
   712                           	opt stack 0
   713                           
   714                           ; 3 bytes @ 0x32
   715  000033                     	ds	3
   716  000036                     ??___ftmul:
   717                           
   718                           ; 1 bytes @ 0x35
   719  000036                     	ds	3
   720  000039                     ___ftmul@exp:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x38
   724  000039                     	ds	1
   725  00003A                     ___ftmul@f3_as_product:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x39
   729  00003A                     	ds	3
   730  00003D                     ___ftmul@cntr:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x3C
   734  00003D                     	ds	1
   735  00003E                     ___ftmul@sign:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x3D
   739  00003E                     	ds	1
   740  00003F                     ?_fround:
   741                           	opt stack 0
   742  00003F                     ?_scale:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x3E
   746  00003F                     	ds	3
   747  000042                     _fround$1613:
   748                           	opt stack 0
   749  000042                     _scale$1614:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x41
   753  000042                     	ds	3
   754  000045                     scale@scl:
   755                           	opt stack 0
   756  000045                     _fround$1612:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x44
   760  000045                     	ds	1
   761  000046                     ?___ftdiv:
   762                           	opt stack 0
   763  000046                     ___ftdiv@f1:
   764                           	opt stack 0
   765                           
   766                           ; 3 bytes @ 0x45
   767  000046                     	ds	2
   768  000048                     fround@prec:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x47
   772  000048                     	ds	1
   773  000049                     ?___ftadd:
   774                           	opt stack 0
   775  000049                     ___ftadd@f1:
   776                           	opt stack 0
   777  000049                     ___ftdiv@f2:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x48
   781  000049                     	ds	3
   782  00004C                     ??___ftdiv:
   783  00004C                     ___ftadd@f2:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0x4B
   787  00004C                     	ds	3
   788  00004F                     ??___ftadd:
   789  00004F                     ___ftdiv@cntr:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x4E
   793  00004F                     	ds	1
   794  000050                     ___ftdiv@f3:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x4F
   798  000050                     	ds	2
   799  000052                     ___ftadd@sign:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x51
   803  000052                     	ds	1
   804  000053                     ___ftadd@exp2:
   805                           	opt stack 0
   806  000053                     ___ftdiv@exp:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x52
   810  000053                     	ds	1
   811  000054                     ___ftadd@exp1:
   812                           	opt stack 0
   813  000054                     ___ftdiv@sign:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x53
   817  000054                     	ds	1
   818  000055                     ?___ftsub:
   819                           	opt stack 0
   820  000055                     ___ftge@ff1:
   821                           	opt stack 0
   822  000055                     ___ftsub@f1:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x54
   826  000055                     	ds	3
   827  000058                     ___ftge@ff2:
   828                           	opt stack 0
   829  000058                     ___ftsub@f2:
   830                           	opt stack 0
   831                           
   832                           ; 3 bytes @ 0x57
   833  000058                     	ds	3
   834  00005B                     ??___ftge:
   835                           
   836                           ; 1 bytes @ 0x5A
   837  00005B                     	ds	3
   838  00005E                     ?_sprintf:
   839                           	opt stack 0
   840  00005E                     sprintf@sp:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x5D
   844  00005E                     	ds	2
   845  000060                     sprintf@f:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x5F
   849  000060                     	ds	5
   850  000065                     ??_sprintf:
   851                           
   852                           ; 1 bytes @ 0x64
   853  000065                     	ds	6
   854  00006B                     ??_main:
   855                           
   856                           ; 1 bytes @ 0x6A
   857  00006B                     	ds	1
   858  00006C                     _main$1611:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x6B
   862  00006C                     	ds	3
   863  00006F                     main@i:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x6E
   867  00006F                     	ds	2
   868  000071                     main@i_233:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x70
   872  000071                     	ds	2
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           
   880 ;;
   881 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   882 ;;
   883 ;; *************** function _main *****************
   884 ;; Defined at:
   885 ;;		line 45 in file "lcd_trials_4bits.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  i               2  112[COMRAM] int 
   890 ;;  i               2  110[COMRAM] int 
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   901 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   903 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   904 ;;Total ram usage:        8 bytes
   905 ;; Hardware stack levels required when called:    4
   906 ;; This function calls:
   907 ;;		_BusyADC
   908 ;;		_ConvertADC
   909 ;;		_Delay1Sec
   910 ;;		_DelayHalfSec
   911 ;;		_ReadADC
   912 ;;		_SetChanADC
   913 ;;		_SetDDRamAddr
   914 ;;		___ftdiv
   915 ;;		___ftmul
   916 ;;		___lwtoft
   917 ;;		_init_ADC
   918 ;;		_init_XLCD
   919 ;;		_putrsXLCD
   920 ;;		_putsXLCD
   921 ;;		_sprintf
   922 ;; This function is called by:
   923 ;;		Startup code after reset
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           	psect	text0
   928  002376                     __ptext0:
   929                           	opt stack 0
   930  002376                     _main:
   931                           	opt stack 27
   932                           
   933                           ;lcd_trials_4bits.c: 47: TRISAbits.RA4 = 0;
   934                           
   935                           ;incstack = 0
   936  002376  9892               	bcf	3986,4,c	;volatile
   937                           
   938                           ;lcd_trials_4bits.c: 48: OSCCON = 0x76;
   939  002378  0E76               	movlw	118
   940  00237A  6ED3               	movwf	4051,c	;volatile
   941                           
   942                           ;lcd_trials_4bits.c: 49: LATAbits.LATA4 = 1;
   943  00237C  8889               	bsf	3977,4,c	;volatile
   944                           
   945                           ;lcd_trials_4bits.c: 52: init_ADC ();
   946  00237E  ECC8  F01A         	call	_init_ADC	;wreg free
   947                           
   948                           ;lcd_trials_4bits.c: 55: init_XLCD();
   949  002382  EC92  F01A         	call	_init_XLCD	;wreg free
   950                           
   951                           ;lcd_trials_4bits.c: 58: putrsXLCD("  Power Supply  ");
   952  002386  0E99               	movlw	low STR_1
   953  002388  6E02               	movwf	putrsXLCD@buffer,c
   954  00238A  0E10               	movlw	high STR_1
   955  00238C  6E03               	movwf	putrsXLCD@buffer+1,c
   956  00238E  ECAE  F01A         	call	_putrsXLCD	;wreg free
   957                           
   958                           ;lcd_trials_4bits.c: 59: SetDDRamAddr (0x40);
   959  002392  0E40               	movlw	64
   960  002394  ECCE  F019         	call	_SetDDRamAddr
   961                           
   962                           ;lcd_trials_4bits.c: 60: putrsXLCD("v1.0");
   963  002398  0EAA               	movlw	low STR_2
   964  00239A  6E02               	movwf	putrsXLCD@buffer,c
   965  00239C  0E10               	movlw	high STR_2
   966  00239E  6E03               	movwf	putrsXLCD@buffer+1,c
   967  0023A0  ECAE  F01A         	call	_putrsXLCD	;wreg free
   968                           
   969                           ;lcd_trials_4bits.c: 61: Delay1Sec();
   970  0023A4  EC10  F01B         	call	_Delay1Sec	;wreg free
   971                           
   972                           ;lcd_trials_4bits.c: 62: Delay1Sec();
   973  0023A8  EC10  F01B         	call	_Delay1Sec	;wreg free
   974                           
   975                           ;lcd_trials_4bits.c: 63: SetDDRamAddr (0x00);
   976  0023AC  0E00               	movlw	0
   977  0023AE  ECCE  F019         	call	_SetDDRamAddr
   978                           
   979                           ;lcd_trials_4bits.c: 64: putrsXLCD("U(out)[V]=      ");
   980  0023B2  0E88               	movlw	low STR_3
   981  0023B4  6E02               	movwf	putrsXLCD@buffer,c
   982  0023B6  0E10               	movlw	high STR_3
   983  0023B8  6E03               	movwf	putrsXLCD@buffer+1,c
   984  0023BA  ECAE  F01A         	call	_putrsXLCD	;wreg free
   985                           
   986                           ;lcd_trials_4bits.c: 65: SetDDRamAddr (0x40);
   987  0023BE  0E40               	movlw	64
   988  0023C0  ECCE  F019         	call	_SetDDRamAddr
   989                           
   990                           ;lcd_trials_4bits.c: 66: putrsXLCD("I(out)[A]=      ");
   991  0023C4  0E77               	movlw	low STR_4
   992  0023C6  6E02               	movwf	putrsXLCD@buffer,c
   993  0023C8  0E10               	movlw	high STR_4
   994  0023CA  6E03               	movwf	putrsXLCD@buffer+1,c
   995  0023CC  ECAE  F01A         	call	_putrsXLCD	;wreg free
   996                           
   997                           ;lcd_trials_4bits.c: 67: SetDDRamAddr (0x0A);
   998  0023D0  0E0A               	movlw	10
   999  0023D2  ECCE  F019         	call	_SetDDRamAddr
  1000  0023D6                     l3765:
  1001                           
  1002                           ;lcd_trials_4bits.c: 72: LATAbits.LATA4 = ~LATAbits.LATA4;
  1003  0023D6  A889               	btfss	3977,4,c	;volatile
  1004  0023D8  D002               	goto	u3670
  1005  0023DA  0E01               	movlw	1
  1006  0023DC  D001               	goto	u3676
  1007  0023DE                     u3670:
  1008  0023DE  0E00               	movlw	0
  1009  0023E0                     u3676:
  1010  0023E0  0AFF               	xorlw	255
  1011  0023E2  6E6B               	movwf	??_main& (0+255),c
  1012  0023E4  3A6B               	swapf	??_main,f,c
  1013  0023E6  5089               	movf	3977,w,c	;volatile
  1014  0023E8  186B               	xorwf	??_main,w,c
  1015  0023EA  0BEF               	andlw	-17
  1016  0023EC  186B               	xorwf	??_main,w,c
  1017  0023EE  6E89               	movwf	3977,c	;volatile
  1018                           
  1019                           ;lcd_trials_4bits.c: 74: ADCResult = 0;
  1020  0023F0  0E00               	movlw	0
  1021  0023F2  6E7A               	movwf	_ADCResult+1,c
  1022  0023F4  0E00               	movlw	0
  1023  0023F6  6E79               	movwf	_ADCResult,c
  1024                           
  1025                           ;lcd_trials_4bits.c: 77: SetChanADC(0b10000111);
  1026  0023F8  0E87               	movlw	135
  1027  0023FA  EC87  F01B         	call	_SetChanADC
  1028                           
  1029                           ;lcd_trials_4bits.c: 78: for(int i=0;i<16;i++)
  1030  0023FE  0E00               	movlw	0
  1031  002400  6E70               	movwf	main@i+1,c
  1032  002402  0E00               	movlw	0
  1033  002404  6E6F               	movwf	main@i,c
  1034  002406                     l3773:
  1035  002406  BE70               	btfsc	main@i+1,7,c
  1036  002408  D006               	goto	l3777
  1037  00240A  5070               	movf	main@i+1,w,c
  1038  00240C  E114               	bnz	l3787
  1039  00240E  0E10               	movlw	16
  1040  002410  5C6F               	subwf	main@i,w,c
  1041  002412  B0D8               	btfsc	status,0,c
  1042  002414  D010               	goto	l3787
  1043  002416                     l3777:
  1044                           
  1045                           ;lcd_trials_4bits.c: 79: {
  1046                           ;lcd_trials_4bits.c: 80: ConvertADC();
  1047  002416  ECAE  F01B         	call	_ConvertADC	;wreg free
  1048  00241A                     l3779:
  1049  00241A  ECA1  F01B         	call	_BusyADC	;wreg free
  1050  00241E  0900               	iorlw	0
  1051  002420  A4D8               	btfss	status,2,c
  1052  002422  D7FB               	goto	l3779
  1053                           
  1054                           ;lcd_trials_4bits.c: 82: ADCResult += (unsigned int) ReadADC();
  1055  002424  EC9A  F01B         	call	_ReadADC	;wreg free
  1056  002428  5001               	movf	?_ReadADC,w,c
  1057  00242A  2679               	addwf	_ADCResult,f,c
  1058  00242C  5002               	movf	?_ReadADC+1,w,c
  1059  00242E  227A               	addwfc	_ADCResult+1,f,c
  1060  002430  4A6F               	infsnz	main@i,f,c
  1061  002432  2A70               	incf	main@i+1,f,c
  1062  002434  D7E8               	goto	l3773
  1063  002436                     l3787:
  1064                           
  1065                           ;lcd_trials_4bits.c: 83: }
  1066                           ;lcd_trials_4bits.c: 84: ADCResult /= 16;
  1067  002436  3A79               	swapf	_ADCResult,f,c
  1068  002438  3A7A               	swapf	_ADCResult+1,f,c
  1069  00243A  0E0F               	movlw	15
  1070  00243C  1679               	andwf	_ADCResult,f,c
  1071  00243E  507A               	movf	_ADCResult+1,w,c
  1072  002440  0BF0               	andlw	240
  1073  002442  1279               	iorwf	_ADCResult,f,c
  1074  002444  0E0F               	movlw	15
  1075  002446  167A               	andwf	_ADCResult+1,f,c
  1076                           
  1077                           ;lcd_trials_4bits.c: 85: voltage = ((ADCResult*vRef)/1024)*6;
  1078  002448  0E00               	movlw	0
  1079  00244A  6E49               	movwf	___ftdiv@f2,c
  1080  00244C  0E80               	movlw	128
  1081  00244E  6E4A               	movwf	___ftdiv@f2+1,c
  1082  002450  0E44               	movlw	68
  1083  002452  6E4B               	movwf	___ftdiv@f2+2,c
  1084  002454  C07B  F033         	movff	_vRef,___ftmul@f2
  1085  002458  C07C  F034         	movff	_vRef+1,___ftmul@f2+1
  1086  00245C  C07D  F035         	movff	_vRef+2,___ftmul@f2+2
  1087  002460  C079  F009         	movff	_ADCResult,___lwtoft@c
  1088  002464  C07A  F00A         	movff	_ADCResult+1,___lwtoft@c+1
  1089  002468  EC4C  F01B         	call	___lwtoft	;wreg free
  1090  00246C  C009  F030         	movff	?___lwtoft,___ftmul@f1
  1091  002470  C00A  F031         	movff	?___lwtoft+1,___ftmul@f1+1
  1092  002474  C00B  F032         	movff	?___lwtoft+2,___ftmul@f1+2
  1093  002478  EC2B  F016         	call	___ftmul	;wreg free
  1094  00247C  C030  F046         	movff	?___ftmul,___ftdiv@f1
  1095  002480  C031  F047         	movff	?___ftmul+1,___ftdiv@f1+1
  1096  002484  C032  F048         	movff	?___ftmul+2,___ftdiv@f1+2
  1097  002488  EC1F  F017         	call	___ftdiv	;wreg free
  1098  00248C  C046  F06C         	movff	?___ftdiv,_main$1611
  1099  002490  C047  F06D         	movff	?___ftdiv+1,_main$1611+1
  1100  002494  C048  F06E         	movff	?___ftdiv+2,_main$1611+2
  1101                           
  1102                           ;lcd_trials_4bits.c: 85: voltage = ((ADCResult*vRef)/1024)*6;
  1103  002498  C06C  F030         	movff	_main$1611,___ftmul@f1
  1104  00249C  C06D  F031         	movff	_main$1611+1,___ftmul@f1+1
  1105  0024A0  C06E  F032         	movff	_main$1611+2,___ftmul@f1+2
  1106  0024A4  0E00               	movlw	0
  1107  0024A6  6E33               	movwf	___ftmul@f2,c
  1108  0024A8  0EC0               	movlw	192
  1109  0024AA  6E34               	movwf	___ftmul@f2+1,c
  1110  0024AC  0E40               	movlw	64
  1111  0024AE  6E35               	movwf	___ftmul@f2+2,c
  1112  0024B0  EC2B  F016         	call	___ftmul	;wreg free
  1113  0024B4  C030  F073         	movff	?___ftmul,_voltage
  1114  0024B8  C031  F074         	movff	?___ftmul+1,_voltage+1
  1115  0024BC  C032  F075         	movff	?___ftmul+2,_voltage+2
  1116                           
  1117                           ;lcd_trials_4bits.c: 86: sprintf(ResultString, "%.3g", voltage);
  1118  0024C0  0E9A               	movlw	low _ResultString
  1119  0024C2  6E5E               	movwf	sprintf@sp,c
  1120  0024C4  0E00               	movlw	high _ResultString
  1121  0024C6  6E5F               	movwf	sprintf@sp+1,c
  1122  0024C8  0EAF               	movlw	low STR_5
  1123  0024CA  6E60               	movwf	sprintf@f,c
  1124  0024CC  0E10               	movlw	high STR_5
  1125  0024CE  6E61               	movwf	sprintf@f+1,c
  1126  0024D0  C073  F062         	movff	_voltage,?_sprintf+4
  1127  0024D4  C074  F063         	movff	_voltage+1,?_sprintf+5
  1128  0024D8  C075  F064         	movff	_voltage+2,?_sprintf+6
  1129  0024DC  EC5B  F008         	call	_sprintf	;wreg free
  1130                           
  1131                           ;lcd_trials_4bits.c: 87: putsXLCD(ResultString);
  1132  0024E0  0E9A               	movlw	low _ResultString
  1133  0024E2  6E02               	movwf	putsXLCD@buffer,c
  1134  0024E4  0E00               	movlw	high _ResultString
  1135  0024E6  6E03               	movwf	putsXLCD@buffer+1,c
  1136  0024E8  ECE2  F01A         	call	_putsXLCD	;wreg free
  1137                           
  1138                           ;lcd_trials_4bits.c: 89: putrsXLCD("     ");
  1139  0024EC  0E82               	movlw	low (STR_4+11)
  1140  0024EE  6E02               	movwf	putrsXLCD@buffer,c
  1141  0024F0  0E10               	movlw	high (STR_4+11)
  1142  0024F2  6E03               	movwf	putrsXLCD@buffer+1,c
  1143  0024F4  ECAE  F01A         	call	_putrsXLCD	;wreg free
  1144                           
  1145                           ;lcd_trials_4bits.c: 90: SetDDRamAddr (0x4A);
  1146  0024F8  0E4A               	movlw	74
  1147  0024FA  ECCE  F019         	call	_SetDDRamAddr
  1148                           
  1149                           ;lcd_trials_4bits.c: 91: voltage = 0;
  1150  0024FE  0E00               	movlw	0
  1151  002500  6E73               	movwf	_voltage,c
  1152  002502  0E00               	movlw	0
  1153  002504  6E74               	movwf	_voltage+1,c
  1154  002506  0E00               	movlw	0
  1155  002508  6E75               	movwf	_voltage+2,c
  1156                           
  1157                           ;lcd_trials_4bits.c: 92: ADCResult = 0;
  1158  00250A  0E00               	movlw	0
  1159  00250C  6E7A               	movwf	_ADCResult+1,c
  1160  00250E  0E00               	movlw	0
  1161  002510  6E79               	movwf	_ADCResult,c
  1162                           
  1163                           ;lcd_trials_4bits.c: 95: SetChanADC(0b10001111);
  1164  002512  0E8F               	movlw	143
  1165  002514  EC87  F01B         	call	_SetChanADC
  1166                           
  1167                           ;lcd_trials_4bits.c: 96: for(int i=0;i<16;i++)
  1168  002518  0E00               	movlw	0
  1169  00251A  6E72               	movwf	main@i_233+1,c
  1170  00251C  0E00               	movlw	0
  1171  00251E  6E71               	movwf	main@i_233,c
  1172  002520                     l3809:
  1173  002520  BE72               	btfsc	main@i_233+1,7,c
  1174  002522  D006               	goto	l3813
  1175  002524  5072               	movf	main@i_233+1,w,c
  1176  002526  E114               	bnz	l3823
  1177  002528  0E10               	movlw	16
  1178  00252A  5C71               	subwf	main@i_233,w,c
  1179  00252C  B0D8               	btfsc	status,0,c
  1180  00252E  D010               	goto	l3823
  1181  002530                     l3813:
  1182                           
  1183                           ;lcd_trials_4bits.c: 97: {
  1184                           ;lcd_trials_4bits.c: 98: ConvertADC();
  1185  002530  ECAE  F01B         	call	_ConvertADC	;wreg free
  1186  002534                     l3815:
  1187  002534  ECA1  F01B         	call	_BusyADC	;wreg free
  1188  002538  0900               	iorlw	0
  1189  00253A  A4D8               	btfss	status,2,c
  1190  00253C  D7FB               	goto	l3815
  1191                           
  1192                           ;lcd_trials_4bits.c: 100: ADCResult += (unsigned int) ReadADC();
  1193  00253E  EC9A  F01B         	call	_ReadADC	;wreg free
  1194  002542  5001               	movf	?_ReadADC,w,c
  1195  002544  2679               	addwf	_ADCResult,f,c
  1196  002546  5002               	movf	?_ReadADC+1,w,c
  1197  002548  227A               	addwfc	_ADCResult+1,f,c
  1198  00254A  4A71               	infsnz	main@i_233,f,c
  1199  00254C  2A72               	incf	main@i_233+1,f,c
  1200  00254E  D7E8               	goto	l3809
  1201  002550                     l3823:
  1202                           
  1203                           ;lcd_trials_4bits.c: 101: }
  1204                           ;lcd_trials_4bits.c: 102: ADCResult /= 16;
  1205  002550  3A79               	swapf	_ADCResult,f,c
  1206  002552  3A7A               	swapf	_ADCResult+1,f,c
  1207  002554  0E0F               	movlw	15
  1208  002556  1679               	andwf	_ADCResult,f,c
  1209  002558  507A               	movf	_ADCResult+1,w,c
  1210  00255A  0BF0               	andlw	240
  1211  00255C  1279               	iorwf	_ADCResult,f,c
  1212  00255E  0E0F               	movlw	15
  1213  002560  167A               	andwf	_ADCResult+1,f,c
  1214                           
  1215                           ;lcd_trials_4bits.c: 103: voltage = (ADCResult*vRef)/1024;
  1216  002562  C07B  F033         	movff	_vRef,___ftmul@f2
  1217  002566  C07C  F034         	movff	_vRef+1,___ftmul@f2+1
  1218  00256A  C07D  F035         	movff	_vRef+2,___ftmul@f2+2
  1219  00256E  C079  F009         	movff	_ADCResult,___lwtoft@c
  1220  002572  C07A  F00A         	movff	_ADCResult+1,___lwtoft@c+1
  1221  002576  EC4C  F01B         	call	___lwtoft	;wreg free
  1222  00257A  C009  F030         	movff	?___lwtoft,___ftmul@f1
  1223  00257E  C00A  F031         	movff	?___lwtoft+1,___ftmul@f1+1
  1224  002582  C00B  F032         	movff	?___lwtoft+2,___ftmul@f1+2
  1225  002586  EC2B  F016         	call	___ftmul	;wreg free
  1226  00258A  C030  F046         	movff	?___ftmul,___ftdiv@f1
  1227  00258E  C031  F047         	movff	?___ftmul+1,___ftdiv@f1+1
  1228  002592  C032  F048         	movff	?___ftmul+2,___ftdiv@f1+2
  1229  002596  0E00               	movlw	0
  1230  002598  6E49               	movwf	___ftdiv@f2,c
  1231  00259A  0E80               	movlw	128
  1232  00259C  6E4A               	movwf	___ftdiv@f2+1,c
  1233  00259E  0E44               	movlw	68
  1234  0025A0  6E4B               	movwf	___ftdiv@f2+2,c
  1235  0025A2  EC1F  F017         	call	___ftdiv	;wreg free
  1236  0025A6  C046  F073         	movff	?___ftdiv,_voltage
  1237  0025AA  C047  F074         	movff	?___ftdiv+1,_voltage+1
  1238  0025AE  C048  F075         	movff	?___ftdiv+2,_voltage+2
  1239                           
  1240                           ;lcd_trials_4bits.c: 104: sprintf(ResultString, "%.3g", voltage);
  1241  0025B2  0E9A               	movlw	low _ResultString
  1242  0025B4  6E5E               	movwf	sprintf@sp,c
  1243  0025B6  0E00               	movlw	high _ResultString
  1244  0025B8  6E5F               	movwf	sprintf@sp+1,c
  1245  0025BA  0EAF               	movlw	low STR_5
  1246  0025BC  6E60               	movwf	sprintf@f,c
  1247  0025BE  0E10               	movlw	high STR_5
  1248  0025C0  6E61               	movwf	sprintf@f+1,c
  1249  0025C2  C073  F062         	movff	_voltage,?_sprintf+4
  1250  0025C6  C074  F063         	movff	_voltage+1,?_sprintf+5
  1251  0025CA  C075  F064         	movff	_voltage+2,?_sprintf+6
  1252  0025CE  EC5B  F008         	call	_sprintf	;wreg free
  1253                           
  1254                           ;lcd_trials_4bits.c: 105: putsXLCD(ResultString);
  1255  0025D2  0E9A               	movlw	low _ResultString
  1256  0025D4  6E02               	movwf	putsXLCD@buffer,c
  1257  0025D6  0E00               	movlw	high _ResultString
  1258  0025D8  6E03               	movwf	putsXLCD@buffer+1,c
  1259  0025DA  ECE2  F01A         	call	_putsXLCD	;wreg free
  1260                           
  1261                           ;lcd_trials_4bits.c: 107: putrsXLCD("     ");
  1262  0025DE  0E82               	movlw	low (STR_4+11)
  1263  0025E0  6E02               	movwf	putrsXLCD@buffer,c
  1264  0025E2  0E10               	movlw	high (STR_4+11)
  1265  0025E4  6E03               	movwf	putrsXLCD@buffer+1,c
  1266  0025E6  ECAE  F01A         	call	_putrsXLCD	;wreg free
  1267                           
  1268                           ;lcd_trials_4bits.c: 108: SetDDRamAddr (0x0A);
  1269  0025EA  0E0A               	movlw	10
  1270  0025EC  ECCE  F019         	call	_SetDDRamAddr
  1271                           
  1272                           ;lcd_trials_4bits.c: 109: voltage = 0;
  1273  0025F0  0E00               	movlw	0
  1274  0025F2  6E73               	movwf	_voltage,c
  1275  0025F4  0E00               	movlw	0
  1276  0025F6  6E74               	movwf	_voltage+1,c
  1277  0025F8  0E00               	movlw	0
  1278  0025FA  6E75               	movwf	_voltage+2,c
  1279                           
  1280                           ;lcd_trials_4bits.c: 110: ADCResult = 0;
  1281  0025FC  0E00               	movlw	0
  1282  0025FE  6E7A               	movwf	_ADCResult+1,c
  1283  002600  0E00               	movlw	0
  1284  002602  6E79               	movwf	_ADCResult,c
  1285                           
  1286                           ;lcd_trials_4bits.c: 115: DelayHalfSec();
  1287  002604  ECF9  F01A         	call	_DelayHalfSec	;wreg free
  1288  002608  D6E6               	goto	l3765
  1289  00260A                     __end_of_main:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           status	equ	0xFD8
  1298                           
  1299 ;; *************** function _sprintf *****************
  1300 ;; Defined at:
  1301 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  sp              2   93[COMRAM] PTR unsigned char 
  1304 ;;		 -> ResultString(10), 
  1305 ;;  f               2   95[COMRAM] PTR const unsigned char 
  1306 ;;		 -> STR_7(5), STR_5(5), 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;  temp            3    5[BANK0 ] PTR const unsigned char 
  1309 ;;  val             4   14[BANK0 ] unsigned long 
  1310 ;;  tmpval          4   10[BANK0 ] struct .
  1311 ;;  fval            3   22[BANK0 ] struct .
  1312 ;;  cp              3    0        PTR const unsigned char 
  1313 ;;  prec            2   20[BANK0 ] int 
  1314 ;;  exp             2   18[BANK0 ] int 
  1315 ;;  flag            2    8[BANK0 ] unsigned short 
  1316 ;;  ap              2    3[BANK0 ] PTR void [1]
  1317 ;;		 -> ?_sprintf(2), 
  1318 ;;  len             2    0        unsigned int 
  1319 ;;  width           2    0        int 
  1320 ;;  c               1   25[BANK0 ] char 
  1321 ;;  d               1    0        unsigned char 
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  2   93[COMRAM] int 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1331 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1334 ;;      Totals:        13      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;Total ram usage:       39 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    3
  1338 ;; This function calls:
  1339 ;;		___awdiv
  1340 ;;		___awmod
  1341 ;;		___ftadd
  1342 ;;		___ftdiv
  1343 ;;		___ftge
  1344 ;;		___ftmul
  1345 ;;		___ftneg
  1346 ;;		___ftsub
  1347 ;;		___fttol
  1348 ;;		___lldiv
  1349 ;;		___llmod
  1350 ;;		___lltoft
  1351 ;;		___wmul
  1352 ;;		__div_to_l_
  1353 ;;		__tdiv_to_l_
  1354 ;;		_fround
  1355 ;;		_isdigit
  1356 ;;		_scale
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text1
  1363  0010B6                     __ptext1:
  1364                           	opt stack 0
  1365  0010B6                     _sprintf:
  1366                           	opt stack 27
  1367                           
  1368                           ;doprnt.c: 494: va_list ap;
  1369                           ;doprnt.c: 499: signed char c;
  1370                           ;doprnt.c: 501: int width;
  1371                           ;doprnt.c: 504: int prec;
  1372                           ;doprnt.c: 508: unsigned short flag;
  1373                           ;doprnt.c: 515: char d;
  1374                           ;doprnt.c: 516: double fval;
  1375                           ;doprnt.c: 517: int exp;
  1376                           ;doprnt.c: 523: union {
  1377                           ;doprnt.c: 524: unsigned long vd;
  1378                           ;doprnt.c: 525: double integ;
  1379                           ;doprnt.c: 526: } tmpval;
  1380                           ;doprnt.c: 528: unsigned long val;
  1381                           ;doprnt.c: 529: unsigned len;
  1382                           ;doprnt.c: 530: const char * cp;
  1383                           ;doprnt.c: 533: *ap = __va_start();
  1384                           
  1385                           ;incstack = 0
  1386  0010B6  0E62               	movlw	low (?_sprintf+4)
  1387  0010B8  0100               	movlb	0	; () banked
  1388  0010BA  6F83               	movwf	sprintf@ap& (0+255),b
  1389  0010BC  0E00               	movlw	high (?_sprintf+4)
  1390  0010BE  0100               	movlb	0	; () banked
  1391  0010C0  6F84               	movwf	(sprintf@ap+1)& (0+255),b
  1392                           
  1393                           ;doprnt.c: 536: while(c = *f++) {
  1394  0010C2  EFAE  F00F         	goto	l3713
  1395  0010C6                     l3375:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;doprnt.c: 538: if(c != '%')
  1399  0010C6  0E25               	movlw	37
  1400  0010C8  0100               	movlb	0	; () banked
  1401  0010CA  1999               	xorwf	sprintf@c& (0+255),w,b
  1402  0010CC  B4D8               	btfsc	status,2,c
  1403  0010CE  D007               	goto	l3381
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;doprnt.c: 540: {
  1407                           ;doprnt.c: 541: ((*sp++ = (c)));
  1408  0010D0  C05E  FFD9         	movff	sprintf@sp,fsr2l
  1409  0010D4  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  1410  0010D8  C099  FFDF         	movff	sprintf@c,indf2
  1411  0010DC  D3A8               	goto	l3551
  1412  0010DE                     l3381:
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;doprnt.c: 543: }
  1416                           ;doprnt.c: 548: flag = 0;
  1417  0010DE  0E00               	movlw	0
  1418  0010E0  0100               	movlb	0	; () banked
  1419  0010E2  6F89               	movwf	(sprintf@flag+1)& (0+255),b
  1420  0010E4  0E00               	movlw	0
  1421  0010E6  6F88               	movwf	sprintf@flag& (0+255),b
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;doprnt.c: 611: if(*f == '.') {
  1425  0010E8  C060  FFF6         	movff	sprintf@f,tblptrl
  1426  0010EC  C061  FFF7         	movff	sprintf@f+1,tblptrh
  1427  0010F0                     	if	0	;tblptru may be non-zero
  1428  0010F0                     	endif
  1429  0010F0                     	if	0	;tblptru may be non-zero
  1430  0010F0                     	endif
  1431  0010F0  0008               	tblrd		*
  1432  0010F2  50F5               	movf	tablat,w,c
  1433  0010F4  0A2E               	xorlw	46
  1434  0010F6  A4D8               	btfss	status,2,c
  1435  0010F8  D032               	goto	l3395
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;doprnt.c: 612: flag |= 0x4000;
  1439  0010FA  0100               	movlb	0	; () banked
  1440  0010FC  8D89               	bsf	(sprintf@flag+1)& (0+255),6,b
  1441                           
  1442                           ;doprnt.c: 613: f++;
  1443  0010FE  4A60               	infsnz	sprintf@f,f,c
  1444  001100  2A61               	incf	sprintf@f+1,f,c
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;doprnt.c: 620: {
  1448                           ;doprnt.c: 621: prec = 0;
  1449  001102  0E00               	movlw	0
  1450  001104  0100               	movlb	0	; () banked
  1451  001106  6F95               	movwf	(sprintf@prec+1)& (0+255),b
  1452  001108  0E00               	movlw	0
  1453  00110A  6F94               	movwf	sprintf@prec& (0+255),b
  1454                           
  1455                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1456  00110C  D01D               	goto	l3393
  1457  00110E                     l3389:
  1458                           
  1459                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1460  00110E  C094  F00F         	movff	sprintf@prec,___wmul@multiplier
  1461  001112  C095  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1462  001116  0E00               	movlw	0
  1463  001118  6E12               	movwf	___wmul@multiplicand+1,c
  1464  00111A  0E0A               	movlw	10
  1465  00111C  6E11               	movwf	___wmul@multiplicand,c
  1466  00111E  EC27  F01B         	call	___wmul	;wreg free
  1467  001122  C060  FFF6         	movff	sprintf@f,tblptrl
  1468  001126  C061  FFF7         	movff	sprintf@f+1,tblptrh
  1469  00112A                     	if	0	;tblptru may be non-zero
  1470  00112A                     	endif
  1471  00112A                     	if	0	;tblptru may be non-zero
  1472  00112A                     	endif
  1473  00112A  0008               	tblrd		*
  1474  00112C  50F5               	movf	tablat,w,c
  1475  00112E  260F               	addwf	?___wmul,f,c
  1476  001130  0E00               	movlw	0
  1477  001132  2210               	addwfc	?___wmul+1,f,c
  1478  001134  0ED0               	movlw	208
  1479  001136  240F               	addwf	?___wmul,w,c
  1480  001138  0100               	movlb	0	; () banked
  1481  00113A  6F94               	movwf	sprintf@prec& (0+255),b
  1482  00113C  0EFF               	movlw	255
  1483  00113E  2010               	addwfc	?___wmul+1,w,c
  1484  001140  0100               	movlb	0	; () banked
  1485  001142  6F95               	movwf	(sprintf@prec+1)& (0+255),b
  1486                           
  1487                           ; BSR set to: 0
  1488  001144  4A60               	infsnz	sprintf@f,f,c
  1489  001146  2A61               	incf	sprintf@f+1,f,c
  1490  001148                     l3393:
  1491                           
  1492                           ; BSR set to: 0
  1493  001148  C060  FFF6         	movff	sprintf@f,tblptrl
  1494  00114C  C061  FFF7         	movff	sprintf@f+1,tblptrh
  1495  001150                     	if	0	;tblptru may be non-zero
  1496  001150                     	endif
  1497  001150                     	if	0	;tblptru may be non-zero
  1498  001150                     	endif
  1499  001150  0008               	tblrd		*
  1500  001152  50F5               	movf	tablat,w,c
  1501  001154  EC5E  F01B         	call	_isdigit
  1502  001158  A0D8               	btfss	status,0,c
  1503  00115A  D00C               	goto	l3403
  1504  00115C  D7D8               	goto	l3389
  1505  00115E                     l3395:
  1506                           
  1507                           ;doprnt.c: 626: prec = 0;
  1508  00115E  0E00               	movlw	0
  1509  001160  0100               	movlb	0	; () banked
  1510  001162  6F95               	movwf	(sprintf@prec+1)& (0+255),b
  1511  001164  0E00               	movlw	0
  1512  001166  6F94               	movwf	sprintf@prec& (0+255),b
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;doprnt.c: 628: flag |= 0x1000;
  1516  001168  0100               	movlb	0	; () banked
  1517  00116A  8989               	bsf	(sprintf@flag+1)& (0+255),4,b
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;doprnt.c: 630: }
  1521                           ;doprnt.c: 635: switch(c = *f++) {
  1522  00116C  D003               	goto	l3403
  1523  00116E                     l3399:
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;doprnt.c: 683: flag |= 0x200;
  1527  00116E  0100               	movlb	0	; () banked
  1528  001170  8389               	bsf	(sprintf@flag+1)& (0+255),1,b
  1529                           
  1530                           ;doprnt.c: 684: break;
  1531  001172  D014               	goto	l3405
  1532  001174                     l3403:
  1533  001174  C060  FFF6         	movff	sprintf@f,tblptrl
  1534  001178  C061  FFF7         	movff	sprintf@f+1,tblptrh
  1535  00117C  4A60               	infsnz	sprintf@f,f,c
  1536  00117E  2A61               	incf	sprintf@f+1,f,c
  1537  001180                     	if	0	;tblptru may be non-zero
  1538  001180                     	endif
  1539  001180                     	if	0	;tblptru may be non-zero
  1540  001180                     	endif
  1541  001180  0008               	tblrd		*
  1542  001182  CFF5 F099          	movff	tablat,sprintf@c
  1543  001186  0100               	movlb	0	; () banked
  1544  001188  5199               	movf	sprintf@c& (0+255),w,b
  1545                           
  1546                           ; Switch size 1, requested type "space"
  1547                           ; Number of cases is 2, Range of values is 0 to 103
  1548                           ; switch strategies available:
  1549                           ; Name         Instructions Cycles
  1550                           ; simple_byte            7     4 (average)
  1551                           ;	Chosen strategy is simple_byte
  1552  00118A  0A00               	xorlw	0	; case 0
  1553  00118C  B4D8               	btfsc	status,2,c
  1554  00118E  EFBC  F00F         	goto	l3715
  1555  001192  0A67               	xorlw	103	; case 103
  1556  001194  B4D8               	btfsc	status,2,c
  1557  001196  D7EB               	goto	l3399
  1558  001198  EFAE  F00F         	goto	l3713
  1559  00119C                     l3405:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;doprnt.c: 825: if(flag & (0x700)) {
  1563  00119C  0E07               	movlw	7
  1564  00119E  0100               	movlb	0	; () banked
  1565  0011A0  1589               	andwf	(sprintf@flag+1)& (0+255),w,b
  1566  0011A2  B4D8               	btfsc	status,2,c
  1567  0011A4  EF60  F00F         	goto	l3693
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;doprnt.c: 827: if(flag & 0x1000)
  1571  0011A8  0100               	movlb	0	; () banked
  1572  0011AA  A989               	btfss	(sprintf@flag+1)& (0+255),4,b
  1573  0011AC  D005               	goto	l3411
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;doprnt.c: 829: prec = 6;
  1577  0011AE  0E00               	movlw	0
  1578  0011B0  0100               	movlb	0	; () banked
  1579  0011B2  6F95               	movwf	(sprintf@prec+1)& (0+255),b
  1580  0011B4  0E06               	movlw	6
  1581  0011B6  6F94               	movwf	sprintf@prec& (0+255),b
  1582  0011B8                     l3411:
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1586  0011B8  C083  FFD9         	movff	sprintf@ap,fsr2l
  1587  0011BC  C084  FFDA         	movff	sprintf@ap+1,fsr2h
  1588  0011C0  CFDE F096          	movff	postinc2,sprintf@fval
  1589  0011C4  CFDE F097          	movff	postinc2,sprintf@fval+1
  1590  0011C8  CFDD F098          	movff	postdec2,sprintf@fval+2
  1591                           
  1592                           ; BSR set to: 0
  1593  0011CC  0E03               	movlw	3
  1594  0011CE  0100               	movlb	0	; () banked
  1595  0011D0  2783               	addwf	sprintf@ap& (0+255),f,b
  1596  0011D2  0E00               	movlw	0
  1597  0011D4  2384               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;doprnt.c: 831: if(fval < 0.0) {
  1601  0011D6  0100               	movlb	0	; () banked
  1602  0011D8  AF98               	btfss	(sprintf@fval+2)& (0+255),7,b
  1603  0011DA  D011               	goto	l3421
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;doprnt.c: 832: fval = -fval;
  1607  0011DC  C096  F02D         	movff	sprintf@fval,___ftneg@f1
  1608  0011E0  C097  F02E         	movff	sprintf@fval+1,___ftneg@f1+1
  1609  0011E4  C098  F02F         	movff	sprintf@fval+2,___ftneg@f1+2
  1610  0011E8  EC3A  F01B         	call	___ftneg	;wreg free
  1611  0011EC  C02D  F096         	movff	?___ftneg,sprintf@fval
  1612  0011F0  C02E  F097         	movff	?___ftneg+1,sprintf@fval+1
  1613  0011F4  C02F  F098         	movff	?___ftneg+2,sprintf@fval+2
  1614                           
  1615                           ;doprnt.c: 833: flag |= 0x03;
  1616  0011F8  0E03               	movlw	3
  1617  0011FA  0100               	movlb	0	; () banked
  1618  0011FC  1388               	iorwf	sprintf@flag& (0+255),f,b
  1619  0011FE                     l3421:
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;doprnt.c: 834: }
  1623                           ;doprnt.c: 835: exp = 0;
  1624  0011FE  0E00               	movlw	0
  1625  001200  0100               	movlb	0	; () banked
  1626  001202  6F93               	movwf	(sprintf@exp+1)& (0+255),b
  1627  001204  0E00               	movlw	0
  1628  001206  6F92               	movwf	sprintf@exp& (0+255),b
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;doprnt.c: 836: if( fval!=0) {
  1632  001208  0100               	movlb	0	; () banked
  1633  00120A  5196               	movf	sprintf@fval& (0+255),w,b
  1634  00120C  0100               	movlb	0	; () banked
  1635  00120E  1197               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1636  001210  0100               	movlb	0	; () banked
  1637  001212  1198               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1638  001214  B4D8               	btfsc	status,2,c
  1639  001216  D08B               	goto	l3449
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1643  001218  0E82               	movlw	130
  1644  00121A  6E65               	movwf	??_sprintf& (0+255),c
  1645  00121C  0EFF               	movlw	255
  1646  00121E  6E66               	movwf	(??_sprintf+1)& (0+255),c
  1647  001220  C096  F067         	movff	sprintf@fval,??_sprintf+2
  1648  001224  C097  F068         	movff	sprintf@fval+1,??_sprintf+3
  1649  001228  C098  F069         	movff	sprintf@fval+2,??_sprintf+4
  1650  00122C  C099  F06A         	movff	sprintf@fval+3,??_sprintf+5
  1651  001230  0E10               	movlw	16
  1652  001232  D005               	goto	u3130
  1653  001234                     u3135:
  1654  001234  90D8               	bcf	status,0,c
  1655  001236  326A               	rrcf	??_sprintf+5,f,c
  1656  001238  3269               	rrcf	??_sprintf+4,f,c
  1657  00123A  3268               	rrcf	??_sprintf+3,f,c
  1658  00123C  3267               	rrcf	??_sprintf+2,f,c
  1659  00123E                     u3130:
  1660  00123E  2EE8               	decfsz	wreg,f,c
  1661  001240  D7F9               	goto	u3135
  1662  001242  5067               	movf	??_sprintf+2,w,c
  1663  001244  2465               	addwf	??_sprintf,w,c
  1664  001246  0100               	movlb	0	; () banked
  1665  001248  6F92               	movwf	sprintf@exp& (0+255),b
  1666  00124A  0E00               	movlw	0
  1667  00124C  2066               	addwfc	??_sprintf+1,w,c
  1668  00124E  0100               	movlb	0	; () banked
  1669  001250  6F93               	movwf	(sprintf@exp+1)& (0+255),b
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;doprnt.c: 838: exp--;
  1673  001252  0100               	movlb	0	; () banked
  1674  001254  0792               	decf	sprintf@exp& (0+255),f,b
  1675  001256  A0D8               	btfss	status,0,c
  1676  001258  0793               	decf	(sprintf@exp+1)& (0+255),f,b
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;doprnt.c: 839: exp *= 3;
  1680  00125A  C092  F00F         	movff	sprintf@exp,___wmul@multiplier
  1681  00125E  C093  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1682  001262  0E00               	movlw	0
  1683  001264  6E12               	movwf	___wmul@multiplicand+1,c
  1684  001266  0E03               	movlw	3
  1685  001268  6E11               	movwf	___wmul@multiplicand,c
  1686  00126A  EC27  F01B         	call	___wmul	;wreg free
  1687  00126E  C00F  F092         	movff	?___wmul,sprintf@exp
  1688  001272  C010  F093         	movff	?___wmul+1,sprintf@exp+1
  1689                           
  1690                           ;doprnt.c: 840: exp /= 10;
  1691  001276  C092  F007         	movff	sprintf@exp,___awdiv@dividend
  1692  00127A  C093  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1693  00127E  0E00               	movlw	0
  1694  001280  6E0A               	movwf	___awdiv@divisor+1,c
  1695  001282  0E0A               	movlw	10
  1696  001284  6E09               	movwf	___awdiv@divisor,c
  1697  001286  EC83  F018         	call	___awdiv	;wreg free
  1698  00128A  C007  F092         	movff	?___awdiv,sprintf@exp
  1699  00128E  C008  F093         	movff	?___awdiv+1,sprintf@exp+1
  1700                           
  1701                           ;doprnt.c: 841: if(exp < 0)
  1702  001292  0100               	movlb	0	; () banked
  1703  001294  AF93               	btfss	(sprintf@exp+1)& (0+255),7,b
  1704  001296  D004               	goto	l3437
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;doprnt.c: 842: exp--;
  1708  001298  0100               	movlb	0	; () banked
  1709  00129A  0792               	decf	sprintf@exp& (0+255),f,b
  1710  00129C  A0D8               	btfss	status,0,c
  1711  00129E  0793               	decf	(sprintf@exp+1)& (0+255),f,b
  1712  0012A0                     l3437:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1716  0012A0  0100               	movlb	0	; () banked
  1717  0012A2  5192               	movf	sprintf@exp& (0+255),w,b
  1718  0012A4  0800               	sublw	0
  1719  0012A6  ECC3  F00F         	call	_scale
  1720  0012AA  C03F  F08A         	movff	?_scale,sprintf@tmpval
  1721  0012AE  C040  F08B         	movff	?_scale+1,sprintf@tmpval+1
  1722  0012B2  C041  F08C         	movff	?_scale+2,sprintf@tmpval+2
  1723                           
  1724                           ;doprnt.c: 847: tmpval.integ *= fval;
  1725  0012B6  C08A  F030         	movff	sprintf@tmpval,___ftmul@f1
  1726  0012BA  C08B  F031         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1727  0012BE  C08C  F032         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1728  0012C2  C096  F033         	movff	sprintf@fval,___ftmul@f2
  1729  0012C6  C097  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  1730  0012CA  C098  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  1731  0012CE  EC2B  F016         	call	___ftmul	;wreg free
  1732  0012D2  C030  F08A         	movff	?___ftmul,sprintf@tmpval
  1733  0012D6  C031  F08B         	movff	?___ftmul+1,sprintf@tmpval+1
  1734  0012DA  C032  F08C         	movff	?___ftmul+2,sprintf@tmpval+2
  1735                           
  1736                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1737  0012DE  C08A  F055         	movff	sprintf@tmpval,___ftge@ff1
  1738  0012E2  C08B  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1739  0012E6  C08C  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1740  0012EA  0E00               	movlw	0
  1741  0012EC  6E58               	movwf	___ftge@ff2,c
  1742  0012EE  0E80               	movlw	128
  1743  0012F0  6E59               	movwf	___ftge@ff2+1,c
  1744  0012F2  0E3F               	movlw	63
  1745  0012F4  6E5A               	movwf	___ftge@ff2+2,c
  1746  0012F6  EC3B  F018         	call	___ftge	;wreg free
  1747  0012FA  B0D8               	btfsc	status,0,c
  1748  0012FC  D005               	goto	l3445
  1749                           
  1750                           ;doprnt.c: 849: exp--;
  1751  0012FE  0100               	movlb	0	; () banked
  1752  001300  0792               	decf	sprintf@exp& (0+255),f,b
  1753  001302  A0D8               	btfss	status,0,c
  1754  001304  0793               	decf	(sprintf@exp+1)& (0+255),f,b
  1755  001306  D013               	goto	l3449
  1756  001308                     l3445:
  1757                           
  1758                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1759  001308  C08A  F055         	movff	sprintf@tmpval,___ftge@ff1
  1760  00130C  C08B  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1761  001310  C08C  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1762  001314  0E00               	movlw	0
  1763  001316  6E58               	movwf	___ftge@ff2,c
  1764  001318  0E20               	movlw	32
  1765  00131A  6E59               	movwf	___ftge@ff2+1,c
  1766  00131C  0E41               	movlw	65
  1767  00131E  6E5A               	movwf	___ftge@ff2+2,c
  1768  001320  EC3B  F018         	call	___ftge	;wreg free
  1769  001324  A0D8               	btfss	status,0,c
  1770  001326  D003               	goto	l3449
  1771                           
  1772                           ;doprnt.c: 851: exp++;
  1773  001328  0100               	movlb	0	; () banked
  1774  00132A  4B92               	infsnz	sprintf@exp& (0+255),f,b
  1775  00132C  2B93               	incf	(sprintf@exp+1)& (0+255),f,b
  1776  00132E                     l3449:
  1777                           
  1778                           ;doprnt.c: 852: }
  1779                           ;doprnt.c: 854: if(exp <= 0)
  1780  00132E  0100               	movlb	0	; () banked
  1781  001330  BF93               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1782  001332  D007               	goto	l3451
  1783  001334  0100               	movlb	0	; () banked
  1784  001336  5193               	movf	(sprintf@exp+1)& (0+255),w,b
  1785  001338  E108               	bnz	l303
  1786  00133A  0100               	movlb	0	; () banked
  1787  00133C  0592               	decf	sprintf@exp& (0+255),w,b
  1788  00133E  B0D8               	btfsc	status,0,c
  1789  001340  D004               	goto	l303
  1790  001342                     l3451:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;doprnt.c: 855: c = 1;
  1794  001342  0E01               	movlw	1
  1795  001344  0100               	movlb	0	; () banked
  1796  001346  6F99               	movwf	sprintf@c& (0+255),b
  1797  001348  D002               	goto	l304
  1798  00134A                     l303:
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;doprnt.c: 856: else
  1802                           ;doprnt.c: 857: c = exp;
  1803  00134A  C092  F099         	movff	sprintf@exp,sprintf@c
  1804  00134E                     l304:
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;doprnt.c: 858: if(
  1808                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  1809                           ;doprnt.c: 868: ) {
  1810  00134E  0100               	movlb	0	; () banked
  1811  001350  A389               	btfss	(sprintf@flag+1)& (0+255),1,b
  1812  001352  D270               	goto	l305
  1813                           
  1814                           ; BSR set to: 0
  1815  001354  0100               	movlb	0	; () banked
  1816  001356  AF93               	btfss	(sprintf@exp+1)& (0+255),7,b
  1817  001358  D008               	goto	l3455
  1818  00135A  0EFC               	movlw	252
  1819  00135C  0100               	movlb	0	; () banked
  1820  00135E  5D92               	subwf	sprintf@exp& (0+255),w,b
  1821  001360  0EFF               	movlw	255
  1822  001362  0100               	movlb	0	; () banked
  1823  001364  5993               	subwfb	(sprintf@exp+1)& (0+255),w,b
  1824  001366  A0D8               	btfss	status,0,c
  1825  001368  D00E               	goto	l3457
  1826  00136A                     l3455:
  1827                           
  1828                           ; BSR set to: 0
  1829  00136A  0100               	movlb	0	; () banked
  1830  00136C  5194               	movf	sprintf@prec& (0+255),w,b
  1831  00136E  0100               	movlb	0	; () banked
  1832  001370  5D92               	subwf	sprintf@exp& (0+255),w,b
  1833  001372  0100               	movlb	0	; () banked
  1834  001374  5193               	movf	(sprintf@exp+1)& (0+255),w,b
  1835  001376  0A80               	xorlw	128
  1836  001378  6E65               	movwf	??_sprintf& (0+255),c
  1837  00137A  0100               	movlb	0	; () banked
  1838  00137C  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  1839  00137E  0A80               	xorlw	128
  1840  001380  5865               	subwfb	??_sprintf& (0+255),w,c
  1841  001382  A0D8               	btfss	status,0,c
  1842  001384  D257               	goto	l305
  1843  001386                     l3457:
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;doprnt.c: 870: if(prec && flag & 0x200)
  1847  001386  0100               	movlb	0	; () banked
  1848  001388  5194               	movf	sprintf@prec& (0+255),w,b
  1849  00138A  0100               	movlb	0	; () banked
  1850  00138C  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1851  00138E  B4D8               	btfsc	status,2,c
  1852  001390  D007               	goto	l3463
  1853                           
  1854                           ; BSR set to: 0
  1855  001392  0100               	movlb	0	; () banked
  1856  001394  A389               	btfss	(sprintf@flag+1)& (0+255),1,b
  1857  001396  D004               	goto	l3463
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;doprnt.c: 871: prec--;
  1861  001398  0100               	movlb	0	; () banked
  1862  00139A  0794               	decf	sprintf@prec& (0+255),f,b
  1863  00139C  A0D8               	btfss	status,0,c
  1864  00139E  0795               	decf	(sprintf@prec+1)& (0+255),f,b
  1865  0013A0                     l3463:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  1869  0013A0  0100               	movlb	0	; () banked
  1870  0013A2  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  1871  0013A4  E105               	bnz	u3230
  1872  0013A6  0E09               	movlw	9
  1873  0013A8  0100               	movlb	0	; () banked
  1874  0013AA  5D94               	subwf	sprintf@prec& (0+255),w,b
  1875  0013AC  A0D8               	btfss	status,0,c
  1876  0013AE  D004               	goto	l309
  1877  0013B0                     u3230:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  1881  0013B0  0E08               	movlw	8
  1882  0013B2  0100               	movlb	0	; () banked
  1883  0013B4  6F99               	movwf	sprintf@c& (0+255),b
  1884  0013B6  D002               	goto	l3467
  1885  0013B8                     l309:
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;doprnt.c: 875: else
  1889                           ;doprnt.c: 876: c = prec;
  1890  0013B8  C094  F099         	movff	sprintf@prec,sprintf@c
  1891  0013BC                     l3467:
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;doprnt.c: 877: if( fval!=0) {
  1895  0013BC  0100               	movlb	0	; () banked
  1896  0013BE  5196               	movf	sprintf@fval& (0+255),w,b
  1897  0013C0  0100               	movlb	0	; () banked
  1898  0013C2  1197               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1899  0013C4  0100               	movlb	0	; () banked
  1900  0013C6  1198               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1901  0013C8  B4D8               	btfsc	status,2,c
  1902  0013CA  D0E1               	goto	l3487
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;doprnt.c: 878: fval /= scale(exp-c);
  1906  0013CC  C096  F046         	movff	sprintf@fval,___ftdiv@f1
  1907  0013D0  C097  F047         	movff	sprintf@fval+1,___ftdiv@f1+1
  1908  0013D4  C098  F048         	movff	sprintf@fval+2,___ftdiv@f1+2
  1909  0013D8  0100               	movlb	0	; () banked
  1910  0013DA  5199               	movf	sprintf@c& (0+255),w,b
  1911  0013DC  0800               	sublw	0
  1912  0013DE  0100               	movlb	0	; () banked
  1913  0013E0  2592               	addwf	sprintf@exp& (0+255),w,b
  1914  0013E2  ECC3  F00F         	call	_scale
  1915  0013E6  C03F  F049         	movff	?_scale,___ftdiv@f2
  1916  0013EA  C040  F04A         	movff	?_scale+1,___ftdiv@f2+1
  1917  0013EE  C041  F04B         	movff	?_scale+2,___ftdiv@f2+2
  1918  0013F2  EC1F  F017         	call	___ftdiv	;wreg free
  1919  0013F6  C046  F096         	movff	?___ftdiv,sprintf@fval
  1920  0013FA  C047  F097         	movff	?___ftdiv+1,sprintf@fval+1
  1921  0013FE  C048  F098         	movff	?___ftdiv+2,sprintf@fval+2
  1922                           
  1923                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  1924  001402  C096  F04C         	movff	sprintf@fval,___ftadd@f2
  1925  001406  C097  F04D         	movff	sprintf@fval+1,___ftadd@f2+1
  1926  00140A  C098  F04E         	movff	sprintf@fval+2,___ftadd@f2+2
  1927  00140E  C096  F015         	movff	sprintf@fval,___fttol@f1
  1928  001412  C097  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1929  001416  C098  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1930  00141A  ECA5  F016         	call	___fttol	;wreg free
  1931  00141E  C015  F024         	movff	?___fttol,___lltoft@c
  1932  001422  C016  F025         	movff	?___fttol+1,___lltoft@c+1
  1933  001426  C017  F026         	movff	?___fttol+2,___lltoft@c+2
  1934  00142A  C018  F027         	movff	?___fttol+3,___lltoft@c+3
  1935  00142E  ECA0  F019         	call	___lltoft	;wreg free
  1936  001432  C024  F02D         	movff	?___lltoft,___ftneg@f1
  1937  001436  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  1938  00143A  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  1939  00143E  EC3A  F01B         	call	___ftneg	;wreg free
  1940  001442  C02D  F049         	movff	?___ftneg,___ftadd@f1
  1941  001446  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  1942  00144A  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  1943  00144E  EC28  F014         	call	___ftadd	;wreg free
  1944  001452  C049  F055         	movff	?___ftadd,___ftge@ff1
  1945  001456  C04A  F056         	movff	?___ftadd+1,___ftge@ff1+1
  1946  00145A  C04B  F057         	movff	?___ftadd+2,___ftge@ff1+2
  1947  00145E  0E00               	movlw	0
  1948  001460  6E58               	movwf	___ftge@ff2,c
  1949  001462  0E00               	movlw	0
  1950  001464  6E59               	movwf	___ftge@ff2+1,c
  1951  001466  0E3F               	movlw	63
  1952  001468  6E5A               	movwf	___ftge@ff2+2,c
  1953  00146A  EC3B  F018         	call	___ftge	;wreg free
  1954  00146E  A0D8               	btfss	status,0,c
  1955  001470  D014               	goto	l3475
  1956                           
  1957                           ;doprnt.c: 894: fval += 0.5;
  1958  001472  C096  F049         	movff	sprintf@fval,___ftadd@f1
  1959  001476  C097  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  1960  00147A  C098  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  1961  00147E  0E00               	movlw	0
  1962  001480  6E4C               	movwf	___ftadd@f2,c
  1963  001482  0E00               	movlw	0
  1964  001484  6E4D               	movwf	___ftadd@f2+1,c
  1965  001486  0E3F               	movlw	63
  1966  001488  6E4E               	movwf	___ftadd@f2+2,c
  1967  00148A  EC28  F014         	call	___ftadd	;wreg free
  1968  00148E  C049  F096         	movff	?___ftadd,sprintf@fval
  1969  001492  C04A  F097         	movff	?___ftadd+1,sprintf@fval+1
  1970  001496  C04B  F098         	movff	?___ftadd+2,sprintf@fval+2
  1971  00149A                     l3475:
  1972                           
  1973                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  1974  00149A  C099  F065         	movff	sprintf@c,??_sprintf
  1975  00149E  6A66               	clrf	(??_sprintf+1)& (0+255),c
  1976  0014A0  BE65               	btfsc	??_sprintf& (0+255),7,c
  1977  0014A2  0666               	decf	(??_sprintf+1)& (0+255),f,c
  1978  0014A4  90D8               	bcf	status,0,c
  1979  0014A6  3665               	rlcf	??_sprintf,f,c
  1980  0014A8  3666               	rlcf	??_sprintf+1,f,c
  1981  0014AA  90D8               	bcf	status,0,c
  1982  0014AC  3665               	rlcf	??_sprintf,f,c
  1983  0014AE  3666               	rlcf	??_sprintf+1,f,c
  1984  0014B0  0E04               	movlw	4
  1985  0014B2  2665               	addwf	??_sprintf,f,c
  1986  0014B4  0E00               	movlw	0
  1987  0014B6  2266               	addwfc	??_sprintf+1,f,c
  1988  0014B8  0E01               	movlw	low _dpowers
  1989  0014BA  2465               	addwf	??_sprintf,w,c
  1990  0014BC  6EF6               	movwf	tblptrl,c
  1991  0014BE  0E10               	movlw	high _dpowers
  1992  0014C0  2066               	addwfc	??_sprintf+1,w,c
  1993  0014C2  6EF7               	movwf	tblptrh,c
  1994  0014C4                     	if	0	;There are less than 3 active tblptr bytes
  1995  0014C4                     	endif
  1996  0014C4  C096  F015         	movff	sprintf@fval,___fttol@f1
  1997  0014C8  C097  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1998  0014CC  C098  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1999  0014D0  ECA5  F016         	call	___fttol	;wreg free
  2000  0014D4  0009               	tblrd		*+
  2001  0014D6  50F5               	movf	tablat,w,c
  2002  0014D8  5C15               	subwf	?___fttol,w,c
  2003  0014DA  0009               	tblrd		*+
  2004  0014DC  50F5               	movf	tablat,w,c
  2005  0014DE  5816               	subwfb	?___fttol+1,w,c
  2006  0014E0  0009               	tblrd		*+
  2007  0014E2  50F5               	movf	tablat,w,c
  2008  0014E4  5817               	subwfb	?___fttol+2,w,c
  2009  0014E6  0009               	tblrd		*+
  2010  0014E8  50F5               	movf	tablat,w,c
  2011  0014EA  5818               	subwfb	?___fttol+3,w,c
  2012  0014EC  A0D8               	btfss	status,0,c
  2013  0014EE  D018               	goto	l3481
  2014                           
  2015                           ;doprnt.c: 896: fval *= 1e-1;
  2016  0014F0  C096  F030         	movff	sprintf@fval,___ftmul@f1
  2017  0014F4  C097  F031         	movff	sprintf@fval+1,___ftmul@f1+1
  2018  0014F8  C098  F032         	movff	sprintf@fval+2,___ftmul@f1+2
  2019  0014FC  0ECD               	movlw	205
  2020  0014FE  6E33               	movwf	___ftmul@f2,c
  2021  001500  0ECC               	movlw	204
  2022  001502  6E34               	movwf	___ftmul@f2+1,c
  2023  001504  0E3D               	movlw	61
  2024  001506  6E35               	movwf	___ftmul@f2+2,c
  2025  001508  EC2B  F016         	call	___ftmul	;wreg free
  2026  00150C  C030  F096         	movff	?___ftmul,sprintf@fval
  2027  001510  C031  F097         	movff	?___ftmul+1,sprintf@fval+1
  2028  001514  C032  F098         	movff	?___ftmul+2,sprintf@fval+2
  2029                           
  2030                           ;doprnt.c: 897: exp++;
  2031  001518  0100               	movlb	0	; () banked
  2032  00151A  4B92               	infsnz	sprintf@exp& (0+255),f,b
  2033  00151C  2B93               	incf	(sprintf@exp+1)& (0+255),f,b
  2034                           
  2035                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  2036  00151E  D037               	goto	l3487
  2037  001520                     l3481:
  2038  001520  0100               	movlb	0	; () banked
  2039  001522  5199               	movf	sprintf@c& (0+255),w,b
  2040  001524  0D04               	mullw	4
  2041  001526  0E01               	movlw	low _dpowers
  2042  001528  24F3               	addwf	prodl,w,c
  2043  00152A  6EF6               	movwf	tblptrl,c
  2044  00152C  0E10               	movlw	high _dpowers
  2045  00152E  20F4               	addwfc	prodh,w,c
  2046  001530  6EF7               	movwf	tblptrh,c
  2047  001532                     	if	0	;There are less than 3 active tblptr bytes
  2048  001532                     	endif
  2049  001532  C096  F015         	movff	sprintf@fval,___fttol@f1
  2050  001536  C097  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2051  00153A  C098  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2052  00153E  ECA5  F016         	call	___fttol	;wreg free
  2053  001542  0009               	tblrd		*+
  2054  001544  50F5               	movf	tablat,w,c
  2055  001546  5C15               	subwf	?___fttol,w,c
  2056  001548  0009               	tblrd		*+
  2057  00154A  50F5               	movf	tablat,w,c
  2058  00154C  5816               	subwfb	?___fttol+1,w,c
  2059  00154E  0009               	tblrd		*+
  2060  001550  50F5               	movf	tablat,w,c
  2061  001552  5817               	subwfb	?___fttol+2,w,c
  2062  001554  0009               	tblrd		*+
  2063  001556  50F5               	movf	tablat,w,c
  2064  001558  5818               	subwfb	?___fttol+3,w,c
  2065  00155A  B0D8               	btfsc	status,0,c
  2066  00155C  D018               	goto	l3487
  2067                           
  2068                           ;doprnt.c: 899: fval *= 10.0;
  2069  00155E  C096  F030         	movff	sprintf@fval,___ftmul@f1
  2070  001562  C097  F031         	movff	sprintf@fval+1,___ftmul@f1+1
  2071  001566  C098  F032         	movff	sprintf@fval+2,___ftmul@f1+2
  2072  00156A  0E00               	movlw	0
  2073  00156C  6E33               	movwf	___ftmul@f2,c
  2074  00156E  0E20               	movlw	32
  2075  001570  6E34               	movwf	___ftmul@f2+1,c
  2076  001572  0E41               	movlw	65
  2077  001574  6E35               	movwf	___ftmul@f2+2,c
  2078  001576  EC2B  F016         	call	___ftmul	;wreg free
  2079  00157A  C030  F096         	movff	?___ftmul,sprintf@fval
  2080  00157E  C031  F097         	movff	?___ftmul+1,sprintf@fval+1
  2081  001582  C032  F098         	movff	?___ftmul+2,sprintf@fval+2
  2082                           
  2083                           ;doprnt.c: 900: exp--;
  2084  001586  0100               	movlb	0	; () banked
  2085  001588  0792               	decf	sprintf@exp& (0+255),f,b
  2086  00158A  A0D8               	btfss	status,0,c
  2087  00158C  0793               	decf	(sprintf@exp+1)& (0+255),f,b
  2088  00158E                     l3487:
  2089                           
  2090                           ;doprnt.c: 901: }
  2091                           ;doprnt.c: 903: }
  2092                           ;doprnt.c: 959: {
  2093                           ;doprnt.c: 973: if(flag & 0x03)
  2094  00158E  0E03               	movlw	3
  2095  001590  0100               	movlb	0	; () banked
  2096  001592  1588               	andwf	sprintf@flag& (0+255),w,b
  2097  001594  6E65               	movwf	??_sprintf& (0+255),c
  2098  001596  0E00               	movlw	0
  2099  001598  0100               	movlb	0	; () banked
  2100  00159A  1589               	andwf	(sprintf@flag+1)& (0+255),w,b
  2101  00159C  6E66               	movwf	(??_sprintf+1)& (0+255),c
  2102  00159E  5065               	movf	??_sprintf,w,c
  2103  0015A0  1066               	iorwf	??_sprintf+1,w,c
  2104  0015A2  B4D8               	btfsc	status,2,c
  2105  0015A4  D008               	goto	l3493
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;doprnt.c: 974: ((*sp++ = ('-')));
  2109  0015A6  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2110  0015AA  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2111  0015AE  0E2D               	movlw	45
  2112  0015B0  6EDF               	movwf	indf2,c
  2113                           
  2114                           ; BSR set to: 0
  2115  0015B2  4A5E               	infsnz	sprintf@sp,f,c
  2116  0015B4  2A5F               	incf	sprintf@sp+1,f,c
  2117  0015B6                     l3493:
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;doprnt.c: 980: }
  2121                           ;doprnt.c: 985: val = (unsigned long)fval;
  2122  0015B6  C096  F015         	movff	sprintf@fval,___fttol@f1
  2123  0015BA  C097  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2124  0015BE  C098  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2125  0015C2  ECA5  F016         	call	___fttol	;wreg free
  2126  0015C6  C015  F08E         	movff	?___fttol,sprintf@val
  2127  0015CA  C016  F08F         	movff	?___fttol+1,sprintf@val+1
  2128  0015CE  C017  F090         	movff	?___fttol+2,sprintf@val+2
  2129  0015D2  C018  F091         	movff	?___fttol+3,sprintf@val+3
  2130                           
  2131                           ;doprnt.c: 986: ((*sp++ = (val/dpowers[c] + '0')));
  2132  0015D6  C08E  F001         	movff	sprintf@val,___lldiv@dividend
  2133  0015DA  C08F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2134  0015DE  C090  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2135  0015E2  C091  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2136  0015E6  0100               	movlb	0	; () banked
  2137  0015E8  5199               	movf	sprintf@c& (0+255),w,b
  2138  0015EA  0D04               	mullw	4
  2139  0015EC  0E01               	movlw	low _dpowers
  2140  0015EE  24F3               	addwf	prodl,w,c
  2141  0015F0  6EF6               	movwf	tblptrl,c
  2142  0015F2  0E10               	movlw	high _dpowers
  2143  0015F4  20F4               	addwfc	prodh,w,c
  2144  0015F6  6EF7               	movwf	tblptrh,c
  2145  0015F8                     	if	0	;There are less than 3 active tblptr bytes
  2146  0015F8                     	endif
  2147  0015F8  0009               	tblrd		*+
  2148  0015FA  CFF5 F005          	movff	tablat,___lldiv@divisor
  2149  0015FE  0009               	tblrd		*+
  2150  001600  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2151  001604  0009               	tblrd		*+
  2152  001606  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2153  00160A  000A               	tblrd		*-
  2154  00160C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2155  001610  ECC5  F018         	call	___lldiv	;wreg free
  2156  001614  5001               	movf	?___lldiv,w,c
  2157  001616  0F30               	addlw	48
  2158  001618  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2159  00161C  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2160  001620  6EDF               	movwf	indf2,c
  2161  001622  4A5E               	infsnz	sprintf@sp,f,c
  2162  001624  2A5F               	incf	sprintf@sp+1,f,c
  2163                           
  2164                           ;doprnt.c: 987: val %= dpowers[c];
  2165  001626  C08E  F001         	movff	sprintf@val,___llmod@dividend
  2166  00162A  C08F  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2167  00162E  C090  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2168  001632  C091  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2169  001636  0100               	movlb	0	; () banked
  2170  001638  5199               	movf	sprintf@c& (0+255),w,b
  2171  00163A  0D04               	mullw	4
  2172  00163C  0E01               	movlw	low _dpowers
  2173  00163E  24F3               	addwf	prodl,w,c
  2174  001640  6EF6               	movwf	tblptrl,c
  2175  001642  0E10               	movlw	high _dpowers
  2176  001644  20F4               	addwfc	prodh,w,c
  2177  001646  6EF7               	movwf	tblptrh,c
  2178  001648                     	if	0	;There are less than 3 active tblptr bytes
  2179  001648                     	endif
  2180  001648  0009               	tblrd		*+
  2181  00164A  CFF5 F005          	movff	tablat,___llmod@divisor
  2182  00164E  0009               	tblrd		*+
  2183  001650  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2184  001654  0009               	tblrd		*+
  2185  001656  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2186  00165A  000A               	tblrd		*-
  2187  00165C  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2188  001660  EC3E  F019         	call	___llmod	;wreg free
  2189  001664  C001  F08E         	movff	?___llmod,sprintf@val
  2190  001668  C002  F08F         	movff	?___llmod+1,sprintf@val+1
  2191  00166C  C003  F090         	movff	?___llmod+2,sprintf@val+2
  2192  001670  C004  F091         	movff	?___llmod+3,sprintf@val+3
  2193                           
  2194                           ;doprnt.c: 992: if(prec)
  2195  001674  0100               	movlb	0	; () banked
  2196  001676  5194               	movf	sprintf@prec& (0+255),w,b
  2197  001678  0100               	movlb	0	; () banked
  2198  00167A  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2199  00167C  B4D8               	btfsc	status,2,c
  2200  00167E  D093               	goto	l3529
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;doprnt.c: 994: {
  2204                           ;doprnt.c: 995: ((*sp++ = ('.')));
  2205  001680  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2206  001684  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2207  001688  0E2E               	movlw	46
  2208  00168A  6EDF               	movwf	indf2,c
  2209                           
  2210                           ; BSR set to: 0
  2211  00168C  4A5E               	infsnz	sprintf@sp,f,c
  2212  00168E  2A5F               	incf	sprintf@sp+1,f,c
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;doprnt.c: 996: prec -= c;
  2216  001690  0100               	movlb	0	; () banked
  2217  001692  5199               	movf	sprintf@c& (0+255),w,b
  2218  001694  0100               	movlb	0	; () banked
  2219  001696  5F94               	subwf	sprintf@prec& (0+255),f,b
  2220  001698  0E00               	movlw	0
  2221  00169A  0100               	movlb	0	; () banked
  2222  00169C  BF99               	btfsc	sprintf@c& (0+255),7,b
  2223  00169E  0EFF               	movlw	255
  2224  0016A0  0100               	movlb	0	; () banked
  2225  0016A2  5B95               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2226                           
  2227                           ;doprnt.c: 997: while(c--) {
  2228  0016A4  D067               	goto	l3519
  2229  0016A6                     l319:
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  2233  0016A6  0100               	movlb	0	; () banked
  2234  0016A8  A389               	btfss	(sprintf@flag+1)& (0+255),1,b
  2235  0016AA  D015               	goto	l3513
  2236                           
  2237                           ; BSR set to: 0
  2238  0016AC  0100               	movlb	0	; () banked
  2239  0016AE  518E               	movf	sprintf@val& (0+255),w,b
  2240  0016B0  0100               	movlb	0	; () banked
  2241  0016B2  118F               	iorwf	(sprintf@val+1)& (0+255),w,b
  2242  0016B4  0100               	movlb	0	; () banked
  2243  0016B6  1190               	iorwf	(sprintf@val+2)& (0+255),w,b
  2244  0016B8  0100               	movlb	0	; () banked
  2245  0016BA  1191               	iorwf	(sprintf@val+3)& (0+255),w,b
  2246  0016BC  A4D8               	btfss	status,2,c
  2247  0016BE  D00B               	goto	l3513
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;doprnt.c: 1003: prec = c = 0;
  2251  0016C0  0E00               	movlw	0
  2252  0016C2  0100               	movlb	0	; () banked
  2253  0016C4  6F99               	movwf	sprintf@c& (0+255),b
  2254  0016C6  0100               	movlb	0	; () banked
  2255  0016C8  5199               	movf	sprintf@c& (0+255),w,b
  2256  0016CA  0100               	movlb	0	; () banked
  2257  0016CC  6F94               	movwf	sprintf@prec& (0+255),b
  2258  0016CE  6B95               	clrf	(sprintf@prec+1)& (0+255),b
  2259  0016D0  BF94               	btfsc	sprintf@prec& (0+255),7,b
  2260  0016D2  0795               	decf	(sprintf@prec+1)& (0+255),f,b
  2261                           
  2262                           ;doprnt.c: 1004: break;
  2263  0016D4  D062               	goto	l3527
  2264  0016D6                     l3513:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;doprnt.c: 1005: }
  2268                           ;doprnt.c: 1007: ((*sp++ = ('0' + (val/dpowers[c]))));
  2269  0016D6  C08E  F001         	movff	sprintf@val,___lldiv@dividend
  2270  0016DA  C08F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2271  0016DE  C090  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2272  0016E2  C091  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2273  0016E6  0100               	movlb	0	; () banked
  2274  0016E8  5199               	movf	sprintf@c& (0+255),w,b
  2275  0016EA  0D04               	mullw	4
  2276  0016EC  0E01               	movlw	low _dpowers
  2277  0016EE  24F3               	addwf	prodl,w,c
  2278  0016F0  6EF6               	movwf	tblptrl,c
  2279  0016F2  0E10               	movlw	high _dpowers
  2280  0016F4  20F4               	addwfc	prodh,w,c
  2281  0016F6  6EF7               	movwf	tblptrh,c
  2282  0016F8                     	if	0	;There are less than 3 active tblptr bytes
  2283  0016F8                     	endif
  2284  0016F8  0009               	tblrd		*+
  2285  0016FA  CFF5 F005          	movff	tablat,___lldiv@divisor
  2286  0016FE  0009               	tblrd		*+
  2287  001700  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2288  001704  0009               	tblrd		*+
  2289  001706  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2290  00170A  000A               	tblrd		*-
  2291  00170C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2292  001710  ECC5  F018         	call	___lldiv	;wreg free
  2293  001714  5001               	movf	?___lldiv,w,c
  2294  001716  0F30               	addlw	48
  2295  001718  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2296  00171C  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2297  001720  6EDF               	movwf	indf2,c
  2298  001722  4A5E               	infsnz	sprintf@sp,f,c
  2299  001724  2A5F               	incf	sprintf@sp+1,f,c
  2300                           
  2301                           ;doprnt.c: 1008: val %= dpowers[c];
  2302  001726  C08E  F001         	movff	sprintf@val,___llmod@dividend
  2303  00172A  C08F  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2304  00172E  C090  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2305  001732  C091  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2306  001736  0100               	movlb	0	; () banked
  2307  001738  5199               	movf	sprintf@c& (0+255),w,b
  2308  00173A  0D04               	mullw	4
  2309  00173C  0E01               	movlw	low _dpowers
  2310  00173E  24F3               	addwf	prodl,w,c
  2311  001740  6EF6               	movwf	tblptrl,c
  2312  001742  0E10               	movlw	high _dpowers
  2313  001744  20F4               	addwfc	prodh,w,c
  2314  001746  6EF7               	movwf	tblptrh,c
  2315  001748                     	if	0	;There are less than 3 active tblptr bytes
  2316  001748                     	endif
  2317  001748  0009               	tblrd		*+
  2318  00174A  CFF5 F005          	movff	tablat,___llmod@divisor
  2319  00174E  0009               	tblrd		*+
  2320  001750  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2321  001754  0009               	tblrd		*+
  2322  001756  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2323  00175A  000A               	tblrd		*-
  2324  00175C  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2325  001760  EC3E  F019         	call	___llmod	;wreg free
  2326  001764  C001  F08E         	movff	?___llmod,sprintf@val
  2327  001768  C002  F08F         	movff	?___llmod+1,sprintf@val+1
  2328  00176C  C003  F090         	movff	?___llmod+2,sprintf@val+2
  2329  001770  C004  F091         	movff	?___llmod+3,sprintf@val+3
  2330  001774                     l3519:
  2331  001774  0100               	movlb	0	; () banked
  2332  001776  0799               	decf	sprintf@c& (0+255),f,b
  2333  001778  0100               	movlb	0	; () banked
  2334  00177A  2999               	incf	sprintf@c& (0+255),w,b
  2335  00177C  B4D8               	btfsc	status,2,c
  2336  00177E  D00D               	goto	l3527
  2337  001780  D792               	goto	l319
  2338  001782                     l3521:
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;doprnt.c: 1012: ((*sp++ = ('0')));
  2342  001782  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2343  001786  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2344  00178A  0E30               	movlw	48
  2345  00178C  6EDF               	movwf	indf2,c
  2346                           
  2347                           ; BSR set to: 0
  2348  00178E  4A5E               	infsnz	sprintf@sp,f,c
  2349  001790  2A5F               	incf	sprintf@sp+1,f,c
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;doprnt.c: 1013: prec--;
  2353  001792  0100               	movlb	0	; () banked
  2354  001794  0794               	decf	sprintf@prec& (0+255),f,b
  2355  001796  A0D8               	btfss	status,0,c
  2356  001798  0795               	decf	(sprintf@prec+1)& (0+255),f,b
  2357  00179A                     l3527:
  2358                           
  2359                           ; BSR set to: 0
  2360  00179A  0100               	movlb	0	; () banked
  2361  00179C  5194               	movf	sprintf@prec& (0+255),w,b
  2362  00179E  0100               	movlb	0	; () banked
  2363  0017A0  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2364  0017A2  A4D8               	btfss	status,2,c
  2365  0017A4  D7EE               	goto	l3521
  2366  0017A6                     l3529:
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;doprnt.c: 1014: }
  2370                           ;doprnt.c: 1015: }
  2371                           ;doprnt.c: 1021: ((*sp++ = ('e')));
  2372  0017A6  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2373  0017AA  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2374  0017AE  0E65               	movlw	101
  2375  0017B0  6EDF               	movwf	indf2,c
  2376                           
  2377                           ; BSR set to: 0
  2378  0017B2  4A5E               	infsnz	sprintf@sp,f,c
  2379  0017B4  2A5F               	incf	sprintf@sp+1,f,c
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;doprnt.c: 1022: if(exp < 0) {
  2383  0017B6  0100               	movlb	0	; () banked
  2384  0017B8  AF93               	btfss	(sprintf@exp+1)& (0+255),7,b
  2385  0017BA  D00E               	goto	l3541
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;doprnt.c: 1023: exp = -exp;
  2389  0017BC  0100               	movlb	0	; () banked
  2390  0017BE  6D92               	negf	sprintf@exp& (0+255),b
  2391  0017C0  1F93               	comf	(sprintf@exp+1)& (0+255),f,b
  2392  0017C2  B0D8               	btfsc	status,0,c
  2393  0017C4  2B93               	incf	(sprintf@exp+1)& (0+255),f,b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;doprnt.c: 1024: ((*sp++ = ('-')));
  2397  0017C6  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2398  0017CA  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2399  0017CE  0E2D               	movlw	45
  2400  0017D0  D008               	goto	L1
  2401  0017D2                     l3539:
  2402                           
  2403                           ; BSR set to: 0
  2404  0017D2  4A5E               	infsnz	sprintf@sp,f,c
  2405  0017D4  2A5F               	incf	sprintf@sp+1,f,c
  2406                           
  2407                           ;doprnt.c: 1025: } else
  2408  0017D6  D007               	goto	l3545
  2409  0017D8                     l3541:
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;doprnt.c: 1026: ((*sp++ = ('+')));
  2413  0017D8  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2414  0017DC  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2415  0017E0  0E2B               	movlw	43
  2416  0017E2                     L1:
  2417  0017E2  6EDF               	movwf	indf2,c
  2418  0017E4  D7F6               	goto	l3539
  2419  0017E6                     l3545:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;doprnt.c: 1039: ((*sp++ = (exp / 10 + '0')));
  2423  0017E6  C092  F007         	movff	sprintf@exp,___awdiv@dividend
  2424  0017EA  C093  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2425  0017EE  0E00               	movlw	0
  2426  0017F0  6E0A               	movwf	___awdiv@divisor+1,c
  2427  0017F2  0E0A               	movlw	10
  2428  0017F4  6E09               	movwf	___awdiv@divisor,c
  2429  0017F6  EC83  F018         	call	___awdiv	;wreg free
  2430  0017FA  5007               	movf	?___awdiv,w,c
  2431  0017FC  0F30               	addlw	48
  2432  0017FE  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2433  001802  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2434  001806  6EDF               	movwf	indf2,c
  2435  001808  4A5E               	infsnz	sprintf@sp,f,c
  2436  00180A  2A5F               	incf	sprintf@sp+1,f,c
  2437                           
  2438                           ;doprnt.c: 1040: ((*sp++ = (exp % 10 + '0')));
  2439  00180C  C092  F001         	movff	sprintf@exp,___awmod@dividend
  2440  001810  C093  F002         	movff	sprintf@exp+1,___awmod@dividend+1
  2441  001814  0E00               	movlw	0
  2442  001816  6E04               	movwf	___awmod@divisor+1,c
  2443  001818  0E0A               	movlw	10
  2444  00181A  6E03               	movwf	___awmod@divisor,c
  2445  00181C  EC06  F019         	call	___awmod	;wreg free
  2446  001820  5001               	movf	?___awmod,w,c
  2447  001822  0F30               	addlw	48
  2448  001824  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2449  001828  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2450  00182C  D395               	goto	L2
  2451  00182E                     l3551:
  2452  00182E  4A5E               	infsnz	sprintf@sp,f,c
  2453  001830  2A5F               	incf	sprintf@sp+1,f,c
  2454                           
  2455                           ;doprnt.c: 1047: continue;
  2456  001832  D394               	goto	l3713
  2457  001834                     l305:
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;doprnt.c: 1048: }
  2461                           ;doprnt.c: 1087: if(flag & 0x200) {
  2462  001834  0100               	movlb	0	; () banked
  2463  001836  A389               	btfss	(sprintf@flag+1)& (0+255),1,b
  2464  001838  D100               	goto	l3589
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;doprnt.c: 1088: if(exp < 0)
  2468  00183A  0100               	movlb	0	; () banked
  2469  00183C  AF93               	btfss	(sprintf@exp+1)& (0+255),7,b
  2470  00183E  D00E               	goto	l3557
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;doprnt.c: 1089: prec -= (exp+1);
  2474  001840  0E01               	movlw	1
  2475  001842  0100               	movlb	0	; () banked
  2476  001844  2592               	addwf	sprintf@exp& (0+255),w,b
  2477  001846  6E65               	movwf	??_sprintf& (0+255),c
  2478  001848  0E00               	movlw	0
  2479  00184A  0100               	movlb	0	; () banked
  2480  00184C  2193               	addwfc	(sprintf@exp+1)& (0+255),w,b
  2481  00184E  6E66               	movwf	(??_sprintf+1)& (0+255),c
  2482  001850  5065               	movf	??_sprintf,w,c
  2483  001852  0100               	movlb	0	; () banked
  2484  001854  5F94               	subwf	sprintf@prec& (0+255),f,b
  2485  001856  5066               	movf	??_sprintf+1,w,c
  2486  001858  0100               	movlb	0	; () banked
  2487  00185A  5B95               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2488  00185C                     l3557:
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;doprnt.c: 1091: val = (unsigned long)fval;
  2492  00185C  C096  F015         	movff	sprintf@fval,___fttol@f1
  2493  001860  C097  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2494  001864  C098  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2495  001868  ECA5  F016         	call	___fttol	;wreg free
  2496  00186C  C015  F08E         	movff	?___fttol,sprintf@val
  2497  001870  C016  F08F         	movff	?___fttol+1,sprintf@val+1
  2498  001874  C017  F090         	movff	?___fttol+2,sprintf@val+2
  2499  001878  C018  F091         	movff	?___fttol+3,sprintf@val+3
  2500                           
  2501                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2502  00187C  0E00               	movlw	0
  2503  00187E  0100               	movlb	0	; () banked
  2504  001880  6F99               	movwf	sprintf@c& (0+255),b
  2505  001882                     l3561:
  2506                           
  2507                           ; BSR set to: 0
  2508  001882  0E0A               	movlw	10
  2509  001884  0100               	movlb	0	; () banked
  2510  001886  1999               	xorwf	sprintf@c& (0+255),w,b
  2511  001888  B4D8               	btfsc	status,2,c
  2512  00188A  D01E               	goto	l3573
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;doprnt.c: 1093: if(val < dpowers[c])
  2516                           
  2517                           ; BSR set to: 0
  2518                           
  2519                           ; BSR set to: 0
  2520  00188C  0100               	movlb	0	; () banked
  2521  00188E  5199               	movf	sprintf@c& (0+255),w,b
  2522  001890  0D04               	mullw	4
  2523  001892  0E01               	movlw	low _dpowers
  2524  001894  24F3               	addwf	prodl,w,c
  2525  001896  6EF6               	movwf	tblptrl,c
  2526  001898  0E10               	movlw	high _dpowers
  2527  00189A  20F4               	addwfc	prodh,w,c
  2528  00189C  6EF7               	movwf	tblptrh,c
  2529  00189E                     	if	0	;There are less than 3 active tblptr bytes
  2530  00189E                     	endif
  2531  00189E  0009               	tblrd		*+
  2532  0018A0  50F5               	movf	tablat,w,c
  2533  0018A2  0100               	movlb	0	; () banked
  2534  0018A4  5D8E               	subwf	sprintf@val& (0+255),w,b
  2535  0018A6  0009               	tblrd		*+
  2536  0018A8  50F5               	movf	tablat,w,c
  2537  0018AA  0100               	movlb	0	; () banked
  2538  0018AC  598F               	subwfb	(sprintf@val+1)& (0+255),w,b
  2539  0018AE  0009               	tblrd		*+
  2540  0018B0  50F5               	movf	tablat,w,c
  2541  0018B2  0100               	movlb	0	; () banked
  2542  0018B4  5990               	subwfb	(sprintf@val+2)& (0+255),w,b
  2543  0018B6  0009               	tblrd		*+
  2544  0018B8  50F5               	movf	tablat,w,c
  2545  0018BA  0100               	movlb	0	; () banked
  2546  0018BC  5991               	subwfb	(sprintf@val+3)& (0+255),w,b
  2547  0018BE  A0D8               	btfss	status,0,c
  2548  0018C0  D003               	goto	l3573
  2549                           
  2550                           ; BSR set to: 0
  2551                           
  2552                           ; BSR set to: 0
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;doprnt.c: 1094: break;
  2556  0018C2  0100               	movlb	0	; () banked
  2557  0018C4  2B99               	incf	sprintf@c& (0+255),f,b
  2558  0018C6  D7DD               	goto	l3561
  2559  0018C8                     l3573:
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;doprnt.c: 1095: prec -= c;
  2563  0018C8  0100               	movlb	0	; () banked
  2564  0018CA  5199               	movf	sprintf@c& (0+255),w,b
  2565  0018CC  0100               	movlb	0	; () banked
  2566  0018CE  5F94               	subwf	sprintf@prec& (0+255),f,b
  2567  0018D0  0E00               	movlw	0
  2568  0018D2  0100               	movlb	0	; () banked
  2569  0018D4  BF99               	btfsc	sprintf@c& (0+255),7,b
  2570  0018D6  0EFF               	movlw	255
  2571  0018D8  0100               	movlb	0	; () banked
  2572  0018DA  5B95               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2573                           
  2574                           ;doprnt.c: 1096: if(prec <= 12)
  2575  0018DC  0100               	movlb	0	; () banked
  2576  0018DE  BF95               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2577  0018E0  D008               	goto	l3575
  2578  0018E2  0100               	movlb	0	; () banked
  2579  0018E4  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  2580  0018E6  E11D               	bnz	l332
  2581  0018E8  0E0D               	movlw	13
  2582  0018EA  0100               	movlb	0	; () banked
  2583  0018EC  5D94               	subwf	sprintf@prec& (0+255),w,b
  2584  0018EE  B0D8               	btfsc	status,0,c
  2585  0018F0  D018               	goto	l332
  2586  0018F2                     l3575:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;doprnt.c: 1097: fval += fround(prec);
  2590  0018F2  C096  F049         	movff	sprintf@fval,___ftadd@f1
  2591  0018F6  C097  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  2592  0018FA  C098  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  2593  0018FE  0100               	movlb	0	; () banked
  2594  001900  5194               	movf	sprintf@prec& (0+255),w,b
  2595  001902  EC05  F013         	call	_fround
  2596  001906  C03F  F04C         	movff	?_fround,___ftadd@f2
  2597  00190A  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  2598  00190E  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  2599  001912  EC28  F014         	call	___ftadd	;wreg free
  2600  001916  C049  F096         	movff	?___ftadd,sprintf@fval
  2601  00191A  C04A  F097         	movff	?___ftadd+1,sprintf@fval+1
  2602  00191E  C04B  F098         	movff	?___ftadd+2,sprintf@fval+2
  2603  001922                     l332:
  2604                           
  2605                           ;doprnt.c: 1100: {
  2606                           ;doprnt.c: 1101: double temp;
  2607                           ;doprnt.c: 1102: temp = scale(prec);
  2608  001922  0100               	movlb	0	; () banked
  2609  001924  5194               	movf	sprintf@prec& (0+255),w,b
  2610  001926  ECC3  F00F         	call	_scale
  2611  00192A  C03F  F085         	movff	?_scale,sprintf@temp
  2612  00192E  C040  F086         	movff	?_scale+1,sprintf@temp+1
  2613  001932  C041  F087         	movff	?_scale+2,sprintf@temp+2
  2614                           
  2615                           ;doprnt.c: 1103: temp *= fval - (double)val;
  2616  001936  C085  F030         	movff	sprintf@temp,___ftmul@f1
  2617  00193A  C086  F031         	movff	sprintf@temp+1,___ftmul@f1+1
  2618  00193E  C087  F032         	movff	sprintf@temp+2,___ftmul@f1+2
  2619  001942  C096  F04C         	movff	sprintf@fval,___ftadd@f2
  2620  001946  C097  F04D         	movff	sprintf@fval+1,___ftadd@f2+1
  2621  00194A  C098  F04E         	movff	sprintf@fval+2,___ftadd@f2+2
  2622  00194E  C08E  F024         	movff	sprintf@val,___lltoft@c
  2623  001952  C08F  F025         	movff	sprintf@val+1,___lltoft@c+1
  2624  001956  C090  F026         	movff	sprintf@val+2,___lltoft@c+2
  2625  00195A  C091  F027         	movff	sprintf@val+3,___lltoft@c+3
  2626  00195E  ECA0  F019         	call	___lltoft	;wreg free
  2627  001962  C024  F02D         	movff	?___lltoft,___ftneg@f1
  2628  001966  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  2629  00196A  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  2630  00196E  EC3A  F01B         	call	___ftneg	;wreg free
  2631  001972  C02D  F049         	movff	?___ftneg,___ftadd@f1
  2632  001976  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  2633  00197A  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  2634  00197E  EC28  F014         	call	___ftadd	;wreg free
  2635  001982  C049  F033         	movff	?___ftadd,___ftmul@f2
  2636  001986  C04A  F034         	movff	?___ftadd+1,___ftmul@f2+1
  2637  00198A  C04B  F035         	movff	?___ftadd+2,___ftmul@f2+2
  2638  00198E  EC2B  F016         	call	___ftmul	;wreg free
  2639  001992  C030  F085         	movff	?___ftmul,sprintf@temp
  2640  001996  C031  F086         	movff	?___ftmul+1,sprintf@temp+1
  2641  00199A  C032  F087         	movff	?___ftmul+2,sprintf@temp+2
  2642                           
  2643                           ;doprnt.c: 1104: val = (unsigned long)temp;
  2644  00199E  C085  F015         	movff	sprintf@temp,___fttol@f1
  2645  0019A2  C086  F016         	movff	sprintf@temp+1,___fttol@f1+1
  2646  0019A6  C087  F017         	movff	sprintf@temp+2,___fttol@f1+2
  2647  0019AA  ECA5  F016         	call	___fttol	;wreg free
  2648  0019AE  C015  F08E         	movff	?___fttol,sprintf@val
  2649  0019B2  C016  F08F         	movff	?___fttol+1,sprintf@val+1
  2650  0019B6  C017  F090         	movff	?___fttol+2,sprintf@val+2
  2651  0019BA  C018  F091         	movff	?___fttol+3,sprintf@val+3
  2652                           
  2653                           ;doprnt.c: 1105: }
  2654                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  2655  0019BE  D01E               	goto	l3585
  2656  0019C0                     l3581:
  2657                           
  2658                           ;doprnt.c: 1107: val /= 10;
  2659  0019C0  C08E  F001         	movff	sprintf@val,___lldiv@dividend
  2660  0019C4  C08F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2661  0019C8  C090  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2662  0019CC  C091  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2663  0019D0  0E0A               	movlw	10
  2664  0019D2  6E05               	movwf	___lldiv@divisor,c
  2665  0019D4  0E00               	movlw	0
  2666  0019D6  6E06               	movwf	___lldiv@divisor+1,c
  2667  0019D8  0E00               	movlw	0
  2668  0019DA  6E07               	movwf	___lldiv@divisor+2,c
  2669  0019DC  0E00               	movlw	0
  2670  0019DE  6E08               	movwf	___lldiv@divisor+3,c
  2671  0019E0  ECC5  F018         	call	___lldiv	;wreg free
  2672  0019E4  C001  F08E         	movff	?___lldiv,sprintf@val
  2673  0019E8  C002  F08F         	movff	?___lldiv+1,sprintf@val+1
  2674  0019EC  C003  F090         	movff	?___lldiv+2,sprintf@val+2
  2675  0019F0  C004  F091         	movff	?___lldiv+3,sprintf@val+3
  2676                           
  2677                           ;doprnt.c: 1108: prec--;
  2678  0019F4  0100               	movlb	0	; () banked
  2679  0019F6  0794               	decf	sprintf@prec& (0+255),f,b
  2680  0019F8  A0D8               	btfss	status,0,c
  2681  0019FA  0795               	decf	(sprintf@prec+1)& (0+255),f,b
  2682  0019FC                     l3585:
  2683  0019FC  0100               	movlb	0	; () banked
  2684  0019FE  5194               	movf	sprintf@prec& (0+255),w,b
  2685  001A00  0100               	movlb	0	; () banked
  2686  001A02  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2687  001A04  B4D8               	btfsc	status,2,c
  2688  001A06  D03C               	goto	l3593
  2689                           
  2690                           ; BSR set to: 0
  2691  001A08  C08E  F001         	movff	sprintf@val,___llmod@dividend
  2692  001A0C  C08F  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2693  001A10  C090  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2694  001A14  C091  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2695  001A18  0E0A               	movlw	10
  2696  001A1A  6E05               	movwf	___llmod@divisor,c
  2697  001A1C  0E00               	movlw	0
  2698  001A1E  6E06               	movwf	___llmod@divisor+1,c
  2699  001A20  0E00               	movlw	0
  2700  001A22  6E07               	movwf	___llmod@divisor+2,c
  2701  001A24  0E00               	movlw	0
  2702  001A26  6E08               	movwf	___llmod@divisor+3,c
  2703  001A28  EC3E  F019         	call	___llmod	;wreg free
  2704  001A2C  5001               	movf	?___llmod,w,c
  2705  001A2E  1002               	iorwf	?___llmod+1,w,c
  2706  001A30  1003               	iorwf	?___llmod+2,w,c
  2707  001A32  1004               	iorwf	?___llmod+3,w,c
  2708  001A34  A4D8               	btfss	status,2,c
  2709  001A36  D024               	goto	l3593
  2710  001A38  D7C3               	goto	l3581
  2711  001A3A                     l3589:
  2712                           
  2713                           ;doprnt.c: 1112: if(prec <= 12)
  2714  001A3A  0100               	movlb	0	; () banked
  2715  001A3C  BF95               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2716  001A3E  D008               	goto	l3591
  2717  001A40  0100               	movlb	0	; () banked
  2718  001A42  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  2719  001A44  E11D               	bnz	l3593
  2720  001A46  0E0D               	movlw	13
  2721  001A48  0100               	movlb	0	; () banked
  2722  001A4A  5D94               	subwf	sprintf@prec& (0+255),w,b
  2723  001A4C  B0D8               	btfsc	status,0,c
  2724  001A4E  D018               	goto	l3593
  2725  001A50                     l3591:
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;doprnt.c: 1113: fval += fround(prec);
  2729  001A50  C096  F049         	movff	sprintf@fval,___ftadd@f1
  2730  001A54  C097  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  2731  001A58  C098  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  2732  001A5C  0100               	movlb	0	; () banked
  2733  001A5E  5194               	movf	sprintf@prec& (0+255),w,b
  2734  001A60  EC05  F013         	call	_fround
  2735  001A64  C03F  F04C         	movff	?_fround,___ftadd@f2
  2736  001A68  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  2737  001A6C  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  2738  001A70  EC28  F014         	call	___ftadd	;wreg free
  2739  001A74  C049  F096         	movff	?___ftadd,sprintf@fval
  2740  001A78  C04A  F097         	movff	?___ftadd+1,sprintf@fval+1
  2741  001A7C  C04B  F098         	movff	?___ftadd+2,sprintf@fval+2
  2742  001A80                     l3593:
  2743                           
  2744                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2745  001A80  0100               	movlb	0	; () banked
  2746  001A82  BF93               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2747  001A84  D008               	goto	l3595
  2748  001A86  0100               	movlb	0	; () banked
  2749  001A88  5193               	movf	(sprintf@exp+1)& (0+255),w,b
  2750  001A8A  E126               	bnz	l3601
  2751  001A8C  0E0A               	movlw	10
  2752  001A8E  0100               	movlb	0	; () banked
  2753  001A90  5D92               	subwf	sprintf@exp& (0+255),w,b
  2754  001A92  B0D8               	btfsc	status,0,c
  2755  001A94  D021               	goto	l3601
  2756  001A96                     l3595:
  2757                           
  2758                           ; BSR set to: 0
  2759  001A96  0100               	movlb	0	; () banked
  2760  001A98  5196               	movf	sprintf@fval& (0+255),w,b
  2761  001A9A  0100               	movlb	0	; () banked
  2762  001A9C  1197               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2763  001A9E  0100               	movlb	0	; () banked
  2764  001AA0  1198               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2765  001AA2  B4D8               	btfsc	status,2,c
  2766  001AA4  D05B               	goto	l3615
  2767                           
  2768                           ; BSR set to: 0
  2769  001AA6  C096  F015         	movff	sprintf@fval,___fttol@f1
  2770  001AAA  C097  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2771  001AAE  C098  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2772  001AB2  ECA5  F016         	call	___fttol	;wreg free
  2773  001AB6  5015               	movf	?___fttol,w,c
  2774  001AB8  1016               	iorwf	?___fttol+1,w,c
  2775  001ABA  1017               	iorwf	?___fttol+2,w,c
  2776  001ABC  1018               	iorwf	?___fttol+3,w,c
  2777  001ABE  A4D8               	btfss	status,2,c
  2778  001AC0  D04D               	goto	l3615
  2779  001AC2  0100               	movlb	0	; () banked
  2780  001AC4  BF93               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2781  001AC6  D04A               	goto	l3615
  2782  001AC8  0100               	movlb	0	; () banked
  2783  001ACA  5193               	movf	(sprintf@exp+1)& (0+255),w,b
  2784  001ACC  E105               	bnz	l3601
  2785  001ACE  0E02               	movlw	2
  2786  001AD0  0100               	movlb	0	; () banked
  2787  001AD2  5D92               	subwf	sprintf@exp& (0+255),w,b
  2788  001AD4  A0D8               	btfss	status,0,c
  2789  001AD6  D042               	goto	l3615
  2790  001AD8                     l3601:
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2794  001AD8  C08A  F055         	movff	sprintf@tmpval,___ftge@ff1
  2795  001ADC  C08B  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2796  001AE0  C08C  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2797  001AE4  0E70               	movlw	112
  2798  001AE6  6E58               	movwf	___ftge@ff2,c
  2799  001AE8  0E89               	movlw	137
  2800  001AEA  6E59               	movwf	___ftge@ff2+1,c
  2801  001AEC  0E40               	movlw	64
  2802  001AEE  6E5A               	movwf	___ftge@ff2+2,c
  2803  001AF0  EC3B  F018         	call	___ftge	;wreg free
  2804  001AF4  B0D8               	btfsc	status,0,c
  2805  001AF6  D003               	goto	l3605
  2806                           
  2807                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2808  001AF8  0100               	movlb	0	; () banked
  2809  001AFA  0EF7               	movlw	247
  2810  001AFC  D002               	goto	L3
  2811  001AFE                     l3605:
  2812                           
  2813                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2814  001AFE  0100               	movlb	0	; () banked
  2815  001B00  0EF8               	movlw	248
  2816  001B02                     L3:
  2817  001B02  2792               	addwf	sprintf@exp& (0+255),f,b
  2818  001B04  0EFF               	movlw	255
  2819  001B06  2393               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;doprnt.c: 1124: }
  2823                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2824                           
  2825                           ; BSR set to: 0
  2826  001B08  0100               	movlb	0	; () banked
  2827  001B0A  5192               	movf	sprintf@exp& (0+255),w,b
  2828  001B0C  ECC3  F00F         	call	_scale
  2829  001B10  C03F  F08A         	movff	?_scale,sprintf@tmpval
  2830  001B14  C040  F08B         	movff	?_scale+1,sprintf@tmpval+1
  2831  001B18  C041  F08C         	movff	?_scale+2,sprintf@tmpval+2
  2832                           
  2833                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2834  001B1C  C096  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2835  001B20  C097  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2836  001B24  C098  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2837  001B28  C08A  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2838  001B2C  C08B  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2839  001B30  C08C  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2840  001B34  ECFE  F014         	call	__tdiv_to_l_	;wreg free
  2841  001B38  C001  F08E         	movff	?__tdiv_to_l_,sprintf@val
  2842  001B3C  C002  F08F         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2843  001B40  C003  F090         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2844  001B44  C004  F091         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2845                           
  2846                           ;doprnt.c: 1129: fval = 0.0;
  2847  001B48  0E00               	movlw	0
  2848  001B4A  0100               	movlb	0	; () banked
  2849  001B4C  6F96               	movwf	sprintf@fval& (0+255),b
  2850  001B4E  0E00               	movlw	0
  2851  001B50  0100               	movlb	0	; () banked
  2852  001B52  6F97               	movwf	(sprintf@fval+1)& (0+255),b
  2853  001B54  0E00               	movlw	0
  2854  001B56  0100               	movlb	0	; () banked
  2855  001B58  6F98               	movwf	(sprintf@fval+2)& (0+255),b
  2856                           
  2857                           ;doprnt.c: 1130: } else {
  2858  001B5A  D033               	goto	l3619
  2859  001B5C                     l3615:
  2860                           
  2861                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2862  001B5C  C096  F015         	movff	sprintf@fval,___fttol@f1
  2863  001B60  C097  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2864  001B64  C098  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2865  001B68  ECA5  F016         	call	___fttol	;wreg free
  2866  001B6C  C015  F08E         	movff	?___fttol,sprintf@val
  2867  001B70  C016  F08F         	movff	?___fttol+1,sprintf@val+1
  2868  001B74  C017  F090         	movff	?___fttol+2,sprintf@val+2
  2869  001B78  C018  F091         	movff	?___fttol+3,sprintf@val+3
  2870                           
  2871                           ;doprnt.c: 1132: fval -= (double)val;
  2872  001B7C  C096  F055         	movff	sprintf@fval,___ftsub@f1
  2873  001B80  C097  F056         	movff	sprintf@fval+1,___ftsub@f1+1
  2874  001B84  C098  F057         	movff	sprintf@fval+2,___ftsub@f1+2
  2875  001B88  C08E  F024         	movff	sprintf@val,___lltoft@c
  2876  001B8C  C08F  F025         	movff	sprintf@val+1,___lltoft@c+1
  2877  001B90  C090  F026         	movff	sprintf@val+2,___lltoft@c+2
  2878  001B94  C091  F027         	movff	sprintf@val+3,___lltoft@c+3
  2879  001B98  ECA0  F019         	call	___lltoft	;wreg free
  2880  001B9C  C024  F058         	movff	?___lltoft,___ftsub@f2
  2881  001BA0  C025  F059         	movff	?___lltoft+1,___ftsub@f2+1
  2882  001BA4  C026  F05A         	movff	?___lltoft+2,___ftsub@f2+2
  2883  001BA8  EC17  F01A         	call	___ftsub	;wreg free
  2884  001BAC  C055  F096         	movff	?___ftsub,sprintf@fval
  2885  001BB0  C056  F097         	movff	?___ftsub+1,sprintf@fval+1
  2886  001BB4  C057  F098         	movff	?___ftsub+2,sprintf@fval+2
  2887                           
  2888                           ;doprnt.c: 1133: exp = 0;
  2889  001BB8  0E00               	movlw	0
  2890  001BBA  0100               	movlb	0	; () banked
  2891  001BBC  6F93               	movwf	(sprintf@exp+1)& (0+255),b
  2892  001BBE  0E00               	movlw	0
  2893  001BC0  6F92               	movwf	sprintf@exp& (0+255),b
  2894  001BC2                     l3619:
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;doprnt.c: 1134: }
  2898                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2899  001BC2  0E01               	movlw	1
  2900  001BC4  0100               	movlb	0	; () banked
  2901  001BC6  6F99               	movwf	sprintf@c& (0+255),b
  2902  001BC8                     l3621:
  2903                           
  2904                           ; BSR set to: 0
  2905  001BC8  0E0A               	movlw	10
  2906  001BCA  0100               	movlb	0	; () banked
  2907  001BCC  1999               	xorwf	sprintf@c& (0+255),w,b
  2908  001BCE  B4D8               	btfsc	status,2,c
  2909  001BD0  D01E               	goto	l3633
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;doprnt.c: 1137: if(val < dpowers[c])
  2913                           
  2914                           ; BSR set to: 0
  2915                           
  2916                           ; BSR set to: 0
  2917  001BD2  0100               	movlb	0	; () banked
  2918  001BD4  5199               	movf	sprintf@c& (0+255),w,b
  2919  001BD6  0D04               	mullw	4
  2920  001BD8  0E01               	movlw	low _dpowers
  2921  001BDA  24F3               	addwf	prodl,w,c
  2922  001BDC  6EF6               	movwf	tblptrl,c
  2923  001BDE  0E10               	movlw	high _dpowers
  2924  001BE0  20F4               	addwfc	prodh,w,c
  2925  001BE2  6EF7               	movwf	tblptrh,c
  2926  001BE4                     	if	0	;There are less than 3 active tblptr bytes
  2927  001BE4                     	endif
  2928  001BE4  0009               	tblrd		*+
  2929  001BE6  50F5               	movf	tablat,w,c
  2930  001BE8  0100               	movlb	0	; () banked
  2931  001BEA  5D8E               	subwf	sprintf@val& (0+255),w,b
  2932  001BEC  0009               	tblrd		*+
  2933  001BEE  50F5               	movf	tablat,w,c
  2934  001BF0  0100               	movlb	0	; () banked
  2935  001BF2  598F               	subwfb	(sprintf@val+1)& (0+255),w,b
  2936  001BF4  0009               	tblrd		*+
  2937  001BF6  50F5               	movf	tablat,w,c
  2938  001BF8  0100               	movlb	0	; () banked
  2939  001BFA  5990               	subwfb	(sprintf@val+2)& (0+255),w,b
  2940  001BFC  0009               	tblrd		*+
  2941  001BFE  50F5               	movf	tablat,w,c
  2942  001C00  0100               	movlb	0	; () banked
  2943  001C02  5991               	subwfb	(sprintf@val+3)& (0+255),w,b
  2944  001C04  A0D8               	btfss	status,0,c
  2945  001C06  D003               	goto	l3633
  2946                           
  2947                           ; BSR set to: 0
  2948                           
  2949                           ; BSR set to: 0
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;doprnt.c: 1138: break;
  2953  001C08  0100               	movlb	0	; () banked
  2954  001C0A  2B99               	incf	sprintf@c& (0+255),f,b
  2955  001C0C  D7DD               	goto	l3621
  2956  001C0E                     l3633:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;doprnt.c: 1175: {
  2960                           ;doprnt.c: 1188: if(flag & 0x03)
  2961  001C0E  0E03               	movlw	3
  2962  001C10  0100               	movlb	0	; () banked
  2963  001C12  1588               	andwf	sprintf@flag& (0+255),w,b
  2964  001C14  6E65               	movwf	??_sprintf& (0+255),c
  2965  001C16  0E00               	movlw	0
  2966  001C18  0100               	movlb	0	; () banked
  2967  001C1A  1589               	andwf	(sprintf@flag+1)& (0+255),w,b
  2968  001C1C  6E66               	movwf	(??_sprintf+1)& (0+255),c
  2969  001C1E  5065               	movf	??_sprintf,w,c
  2970  001C20  1066               	iorwf	??_sprintf+1,w,c
  2971  001C22  B4D8               	btfsc	status,2,c
  2972  001C24  D053               	goto	l3647
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2976  001C26  C05E  FFD9         	movff	sprintf@sp,fsr2l
  2977  001C2A  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  2978  001C2E  0E2D               	movlw	45
  2979  001C30  D04B               	goto	L4
  2980  001C32                     l3637:
  2981                           
  2982                           ; BSR set to: 0
  2983  001C32  4A5E               	infsnz	sprintf@sp,f,c
  2984  001C34  2A5F               	incf	sprintf@sp+1,f,c
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;doprnt.c: 1195: }
  2988                           ;doprnt.c: 1196: while(c--) {
  2989  001C36  D04A               	goto	l3647
  2990  001C38                     l3639:
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;doprnt.c: 1200: {
  2994                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2995  001C38  C08E  F001         	movff	sprintf@val,___lldiv@dividend
  2996  001C3C  C08F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2997  001C40  C090  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2998  001C44  C091  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2999  001C48  0100               	movlb	0	; () banked
  3000  001C4A  5199               	movf	sprintf@c& (0+255),w,b
  3001  001C4C  0D04               	mullw	4
  3002  001C4E  0E01               	movlw	low _dpowers
  3003  001C50  24F3               	addwf	prodl,w,c
  3004  001C52  6EF6               	movwf	tblptrl,c
  3005  001C54  0E10               	movlw	high _dpowers
  3006  001C56  20F4               	addwfc	prodh,w,c
  3007  001C58  6EF7               	movwf	tblptrh,c
  3008  001C5A                     	if	0	;There are less than 3 active tblptr bytes
  3009  001C5A                     	endif
  3010  001C5A  0009               	tblrd		*+
  3011  001C5C  CFF5 F005          	movff	tablat,___lldiv@divisor
  3012  001C60  0009               	tblrd		*+
  3013  001C62  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3014  001C66  0009               	tblrd		*+
  3015  001C68  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3016  001C6C  000A               	tblrd		*-
  3017  001C6E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3018  001C72  ECC5  F018         	call	___lldiv	;wreg free
  3019  001C76  C001  F08A         	movff	?___lldiv,sprintf@tmpval
  3020  001C7A  C002  F08B         	movff	?___lldiv+1,sprintf@tmpval+1
  3021  001C7E  C003  F08C         	movff	?___lldiv+2,sprintf@tmpval+2
  3022  001C82  C004  F08D         	movff	?___lldiv+3,sprintf@tmpval+3
  3023                           
  3024                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3025  001C86  C08A  F001         	movff	sprintf@tmpval,___llmod@dividend
  3026  001C8A  C08B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3027  001C8E  C08C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3028  001C92  C08D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3029  001C96  0E0A               	movlw	10
  3030  001C98  6E05               	movwf	___llmod@divisor,c
  3031  001C9A  0E00               	movlw	0
  3032  001C9C  6E06               	movwf	___llmod@divisor+1,c
  3033  001C9E  0E00               	movlw	0
  3034  001CA0  6E07               	movwf	___llmod@divisor+2,c
  3035  001CA2  0E00               	movlw	0
  3036  001CA4  6E08               	movwf	___llmod@divisor+3,c
  3037  001CA6  EC3E  F019         	call	___llmod	;wreg free
  3038  001CAA  C001  F08A         	movff	?___llmod,sprintf@tmpval
  3039  001CAE  C002  F08B         	movff	?___llmod+1,sprintf@tmpval+1
  3040  001CB2  C003  F08C         	movff	?___llmod+2,sprintf@tmpval+2
  3041  001CB6  C004  F08D         	movff	?___llmod+3,sprintf@tmpval+3
  3042                           
  3043                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3044  001CBA  0100               	movlb	0	; () banked
  3045  001CBC  518A               	movf	sprintf@tmpval& (0+255),w,b
  3046  001CBE  0F30               	addlw	48
  3047  001CC0  C05E  FFD9         	movff	sprintf@sp,fsr2l
  3048  001CC4  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  3049  001CC8                     L4:
  3050  001CC8  6EDF               	movwf	indf2,c
  3051  001CCA  D7B3               	goto	l3637
  3052  001CCC                     l3647:
  3053                           
  3054                           ; BSR set to: 0
  3055  001CCC  0100               	movlb	0	; () banked
  3056  001CCE  0799               	decf	sprintf@c& (0+255),f,b
  3057  001CD0  0100               	movlb	0	; () banked
  3058  001CD2  2999               	incf	sprintf@c& (0+255),w,b
  3059  001CD4  B4D8               	btfsc	status,2,c
  3060  001CD6  D00D               	goto	l3655
  3061  001CD8  D7AF               	goto	l3639
  3062  001CDA                     l3649:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3066  001CDA  C05E  FFD9         	movff	sprintf@sp,fsr2l
  3067  001CDE  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  3068  001CE2  0E30               	movlw	48
  3069  001CE4  6EDF               	movwf	indf2,c
  3070                           
  3071                           ; BSR set to: 0
  3072  001CE6  4A5E               	infsnz	sprintf@sp,f,c
  3073  001CE8  2A5F               	incf	sprintf@sp+1,f,c
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;doprnt.c: 1209: exp--;
  3077  001CEA  0100               	movlb	0	; () banked
  3078  001CEC  0792               	decf	sprintf@exp& (0+255),f,b
  3079  001CEE  A0D8               	btfss	status,0,c
  3080  001CF0  0793               	decf	(sprintf@exp+1)& (0+255),f,b
  3081  001CF2                     l3655:
  3082                           
  3083                           ; BSR set to: 0
  3084  001CF2  0100               	movlb	0	; () banked
  3085  001CF4  BF93               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3086  001CF6  D007               	goto	l3657
  3087  001CF8  0100               	movlb	0	; () banked
  3088  001CFA  5193               	movf	(sprintf@exp+1)& (0+255),w,b
  3089  001CFC  E1EE               	bnz	l3649
  3090  001CFE  0100               	movlb	0	; () banked
  3091  001D00  0592               	decf	sprintf@exp& (0+255),w,b
  3092  001D02  B0D8               	btfsc	status,0,c
  3093  001D04  D7EA               	goto	l3649
  3094  001D06                     l3657:
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;doprnt.c: 1210: }
  3098                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3099  001D06  0100               	movlb	0	; () banked
  3100  001D08  BF95               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3101  001D0A  D00C               	goto	l360
  3102  001D0C  0100               	movlb	0	; () banked
  3103  001D0E  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  3104  001D10  E105               	bnz	u3550
  3105  001D12  0E09               	movlw	9
  3106  001D14  0100               	movlb	0	; () banked
  3107  001D16  5D94               	subwf	sprintf@prec& (0+255),w,b
  3108  001D18  A0D8               	btfss	status,0,c
  3109  001D1A  D004               	goto	l360
  3110  001D1C                     u3550:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3114  001D1C  0E08               	movlw	8
  3115  001D1E  0100               	movlb	0	; () banked
  3116  001D20  6F99               	movwf	sprintf@c& (0+255),b
  3117  001D22  D002               	goto	l3661
  3118  001D24                     l360:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;doprnt.c: 1213: else
  3122                           ;doprnt.c: 1214: c = prec;
  3123  001D24  C094  F099         	movff	sprintf@prec,sprintf@c
  3124  001D28                     l3661:
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;doprnt.c: 1215: prec -= c;
  3128  001D28  0100               	movlb	0	; () banked
  3129  001D2A  5199               	movf	sprintf@c& (0+255),w,b
  3130  001D2C  0100               	movlb	0	; () banked
  3131  001D2E  5F94               	subwf	sprintf@prec& (0+255),f,b
  3132  001D30  0E00               	movlw	0
  3133  001D32  0100               	movlb	0	; () banked
  3134  001D34  BF99               	btfsc	sprintf@c& (0+255),7,b
  3135  001D36  0EFF               	movlw	255
  3136  001D38  0100               	movlb	0	; () banked
  3137  001D3A  5B95               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;doprnt.c: 1219: if(c)
  3141  001D3C  0100               	movlb	0	; () banked
  3142  001D3E  5199               	movf	sprintf@c& (0+255),w,b
  3143  001D40  0100               	movlb	0	; () banked
  3144  001D42  B4D8               	btfsc	status,2,c
  3145  001D44  D008               	goto	l3669
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3149  001D46  C05E  FFD9         	movff	sprintf@sp,fsr2l
  3150  001D4A  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  3151  001D4E  0E2E               	movlw	46
  3152  001D50  6EDF               	movwf	indf2,c
  3153                           
  3154                           ; BSR set to: 0
  3155  001D52  4A5E               	infsnz	sprintf@sp,f,c
  3156  001D54  2A5F               	incf	sprintf@sp+1,f,c
  3157  001D56                     l3669:
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3161  001D56  0100               	movlb	0	; () banked
  3162  001D58  5199               	movf	sprintf@c& (0+255),w,b
  3163  001D5A  ECC3  F00F         	call	_scale
  3164  001D5E  C03F  F080         	movff	?_scale,_sprintf$1615
  3165  001D62  C040  F081         	movff	?_scale+1,_sprintf$1615+1
  3166  001D66  C041  F082         	movff	?_scale+2,_sprintf$1615+2
  3167                           
  3168                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3169  001D6A  C096  F033         	movff	sprintf@fval,___ftmul@f2
  3170  001D6E  C097  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  3171  001D72  C098  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  3172  001D76  C080  F030         	movff	_sprintf$1615,___ftmul@f1
  3173  001D7A  C081  F031         	movff	_sprintf$1615+1,___ftmul@f1+1
  3174  001D7E  C082  F032         	movff	_sprintf$1615+2,___ftmul@f1+2
  3175  001D82  EC2B  F016         	call	___ftmul	;wreg free
  3176  001D86  C030  F015         	movff	?___ftmul,___fttol@f1
  3177  001D8A  C031  F016         	movff	?___ftmul+1,___fttol@f1+1
  3178  001D8E  C032  F017         	movff	?___ftmul+2,___fttol@f1+2
  3179  001D92  ECA5  F016         	call	___fttol	;wreg free
  3180  001D96  C015  F08E         	movff	?___fttol,sprintf@val
  3181  001D9A  C016  F08F         	movff	?___fttol+1,sprintf@val+1
  3182  001D9E  C017  F090         	movff	?___fttol+2,sprintf@val+2
  3183  001DA2  C018  F091         	movff	?___fttol+3,sprintf@val+3
  3184                           
  3185                           ;doprnt.c: 1228: while(c--) {
  3186  001DA6  D072               	goto	l3683
  3187  001DA8                     l3673:
  3188                           
  3189                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3190  001DA8  C08E  F001         	movff	sprintf@val,___lldiv@dividend
  3191  001DAC  C08F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3192  001DB0  C090  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3193  001DB4  C091  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3194  001DB8  0100               	movlb	0	; () banked
  3195  001DBA  5199               	movf	sprintf@c& (0+255),w,b
  3196  001DBC  0D04               	mullw	4
  3197  001DBE  0E01               	movlw	low _dpowers
  3198  001DC0  24F3               	addwf	prodl,w,c
  3199  001DC2  6EF6               	movwf	tblptrl,c
  3200  001DC4  0E10               	movlw	high _dpowers
  3201  001DC6  20F4               	addwfc	prodh,w,c
  3202  001DC8  6EF7               	movwf	tblptrh,c
  3203  001DCA                     	if	0	;There are less than 3 active tblptr bytes
  3204  001DCA                     	endif
  3205  001DCA  0009               	tblrd		*+
  3206  001DCC  CFF5 F005          	movff	tablat,___lldiv@divisor
  3207  001DD0  0009               	tblrd		*+
  3208  001DD2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3209  001DD6  0009               	tblrd		*+
  3210  001DD8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3211  001DDC  000A               	tblrd		*-
  3212  001DDE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3213  001DE2  ECC5  F018         	call	___lldiv	;wreg free
  3214  001DE6  C001  F08A         	movff	?___lldiv,sprintf@tmpval
  3215  001DEA  C002  F08B         	movff	?___lldiv+1,sprintf@tmpval+1
  3216  001DEE  C003  F08C         	movff	?___lldiv+2,sprintf@tmpval+2
  3217  001DF2  C004  F08D         	movff	?___lldiv+3,sprintf@tmpval+3
  3218                           
  3219                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3220  001DF6  C08A  F001         	movff	sprintf@tmpval,___llmod@dividend
  3221  001DFA  C08B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3222  001DFE  C08C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3223  001E02  C08D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3224  001E06  0E0A               	movlw	10
  3225  001E08  6E05               	movwf	___llmod@divisor,c
  3226  001E0A  0E00               	movlw	0
  3227  001E0C  6E06               	movwf	___llmod@divisor+1,c
  3228  001E0E  0E00               	movlw	0
  3229  001E10  6E07               	movwf	___llmod@divisor+2,c
  3230  001E12  0E00               	movlw	0
  3231  001E14  6E08               	movwf	___llmod@divisor+3,c
  3232  001E16  EC3E  F019         	call	___llmod	;wreg free
  3233  001E1A  C001  F08A         	movff	?___llmod,sprintf@tmpval
  3234  001E1E  C002  F08B         	movff	?___llmod+1,sprintf@tmpval+1
  3235  001E22  C003  F08C         	movff	?___llmod+2,sprintf@tmpval+2
  3236  001E26  C004  F08D         	movff	?___llmod+3,sprintf@tmpval+3
  3237                           
  3238                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3239  001E2A  0100               	movlb	0	; () banked
  3240  001E2C  518A               	movf	sprintf@tmpval& (0+255),w,b
  3241  001E2E  0F30               	addlw	48
  3242  001E30  C05E  FFD9         	movff	sprintf@sp,fsr2l
  3243  001E34  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  3244  001E38  6EDF               	movwf	indf2,c
  3245                           
  3246                           ; BSR set to: 0
  3247  001E3A  4A5E               	infsnz	sprintf@sp,f,c
  3248  001E3C  2A5F               	incf	sprintf@sp+1,f,c
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;doprnt.c: 1232: val %= dpowers[c];
  3252  001E3E  C08E  F001         	movff	sprintf@val,___llmod@dividend
  3253  001E42  C08F  F002         	movff	sprintf@val+1,___llmod@dividend+1
  3254  001E46  C090  F003         	movff	sprintf@val+2,___llmod@dividend+2
  3255  001E4A  C091  F004         	movff	sprintf@val+3,___llmod@dividend+3
  3256  001E4E  0100               	movlb	0	; () banked
  3257  001E50  5199               	movf	sprintf@c& (0+255),w,b
  3258  001E52  0D04               	mullw	4
  3259  001E54  0E01               	movlw	low _dpowers
  3260  001E56  24F3               	addwf	prodl,w,c
  3261  001E58  6EF6               	movwf	tblptrl,c
  3262  001E5A  0E10               	movlw	high _dpowers
  3263  001E5C  20F4               	addwfc	prodh,w,c
  3264  001E5E  6EF7               	movwf	tblptrh,c
  3265  001E60                     	if	0	;There are less than 3 active tblptr bytes
  3266  001E60                     	endif
  3267  001E60  0009               	tblrd		*+
  3268  001E62  CFF5 F005          	movff	tablat,___llmod@divisor
  3269  001E66  0009               	tblrd		*+
  3270  001E68  CFF5 F006          	movff	tablat,___llmod@divisor+1
  3271  001E6C  0009               	tblrd		*+
  3272  001E6E  CFF5 F007          	movff	tablat,___llmod@divisor+2
  3273  001E72  000A               	tblrd		*-
  3274  001E74  CFF5 F008          	movff	tablat,___llmod@divisor+3
  3275  001E78  EC3E  F019         	call	___llmod	;wreg free
  3276  001E7C  C001  F08E         	movff	?___llmod,sprintf@val
  3277  001E80  C002  F08F         	movff	?___llmod+1,sprintf@val+1
  3278  001E84  C003  F090         	movff	?___llmod+2,sprintf@val+2
  3279  001E88  C004  F091         	movff	?___llmod+3,sprintf@val+3
  3280  001E8C                     l3683:
  3281  001E8C  0100               	movlb	0	; () banked
  3282  001E8E  0799               	decf	sprintf@c& (0+255),f,b
  3283  001E90  0100               	movlb	0	; () banked
  3284  001E92  2999               	incf	sprintf@c& (0+255),w,b
  3285  001E94  B4D8               	btfsc	status,2,c
  3286  001E96  D00D               	goto	l3691
  3287  001E98  D787               	goto	l3673
  3288  001E9A                     l3685:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3292  001E9A  C05E  FFD9         	movff	sprintf@sp,fsr2l
  3293  001E9E  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  3294  001EA2  0E30               	movlw	48
  3295  001EA4  6EDF               	movwf	indf2,c
  3296                           
  3297                           ; BSR set to: 0
  3298  001EA6  4A5E               	infsnz	sprintf@sp,f,c
  3299  001EA8  2A5F               	incf	sprintf@sp+1,f,c
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;doprnt.c: 1237: prec--;
  3303  001EAA  0100               	movlb	0	; () banked
  3304  001EAC  0794               	decf	sprintf@prec& (0+255),f,b
  3305  001EAE  A0D8               	btfss	status,0,c
  3306  001EB0  0795               	decf	(sprintf@prec+1)& (0+255),f,b
  3307  001EB2                     l3691:
  3308                           
  3309                           ; BSR set to: 0
  3310  001EB2  0100               	movlb	0	; () banked
  3311  001EB4  5194               	movf	sprintf@prec& (0+255),w,b
  3312  001EB6  0100               	movlb	0	; () banked
  3313  001EB8  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3314  001EBA  B4D8               	btfsc	status,2,c
  3315  001EBC  D04F               	goto	l3713
  3316  001EBE  D7ED               	goto	l3685
  3317  001EC0                     l3693:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;doprnt.c: 1246: }
  3321                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3322  001EC0  0100               	movlb	0	; () banked
  3323  001EC2  5194               	movf	sprintf@prec& (0+255),w,b
  3324  001EC4  0100               	movlb	0	; () banked
  3325  001EC6  1195               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3326  001EC8  A4D8               	btfss	status,2,c
  3327  001ECA  D00D               	goto	l3699
  3328                           
  3329                           ; BSR set to: 0
  3330  001ECC  0100               	movlb	0	; () banked
  3331  001ECE  518E               	movf	sprintf@val& (0+255),w,b
  3332  001ED0  0100               	movlb	0	; () banked
  3333  001ED2  118F               	iorwf	(sprintf@val+1)& (0+255),w,b
  3334  001ED4  0100               	movlb	0	; () banked
  3335  001ED6  1190               	iorwf	(sprintf@val+2)& (0+255),w,b
  3336  001ED8  0100               	movlb	0	; () banked
  3337  001EDA  1191               	iorwf	(sprintf@val+3)& (0+255),w,b
  3338  001EDC  A4D8               	btfss	status,2,c
  3339  001EDE  D003               	goto	l3699
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;doprnt.c: 1291: prec++;
  3343  001EE0  0100               	movlb	0	; () banked
  3344  001EE2  4B94               	infsnz	sprintf@prec& (0+255),f,b
  3345  001EE4  2B95               	incf	(sprintf@prec+1)& (0+255),f,b
  3346  001EE6                     l3699:
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;doprnt.c: 1339: if(c < prec)
  3350  001EE6  0E80               	movlw	128
  3351  001EE8  0100               	movlb	0	; () banked
  3352  001EEA  BF99               	btfsc	sprintf@c& (0+255),7,b
  3353  001EEC  0E7F               	movlw	127
  3354  001EEE  6E65               	movwf	??_sprintf& (0+255),c
  3355  001EF0  0100               	movlb	0	; () banked
  3356  001EF2  5194               	movf	sprintf@prec& (0+255),w,b
  3357  001EF4  0100               	movlb	0	; () banked
  3358  001EF6  5D99               	subwf	sprintf@c& (0+255),w,b
  3359  001EF8  0100               	movlb	0	; () banked
  3360  001EFA  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  3361  001EFC  0A80               	xorlw	128
  3362  001EFE  5865               	subwfb	??_sprintf& (0+255),w,c
  3363  001F00  B0D8               	btfsc	status,0,c
  3364  001F02  D003               	goto	l3703
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;doprnt.c: 1340: c = prec;
  3368  001F04  C094  F099         	movff	sprintf@prec,sprintf@c
  3369  001F08  D016               	goto	l3707
  3370  001F0A                     l3703:
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;doprnt.c: 1341: else if(prec < c)
  3374  001F0A  0100               	movlb	0	; () banked
  3375  001F0C  5195               	movf	(sprintf@prec+1)& (0+255),w,b
  3376  001F0E  0A80               	xorlw	128
  3377  001F10  6E65               	movwf	??_sprintf& (0+255),c
  3378  001F12  0100               	movlb	0	; () banked
  3379  001F14  5199               	movf	sprintf@c& (0+255),w,b
  3380  001F16  0100               	movlb	0	; () banked
  3381  001F18  5D94               	subwf	sprintf@prec& (0+255),w,b
  3382  001F1A  0E80               	movlw	128
  3383  001F1C  0100               	movlb	0	; () banked
  3384  001F1E  BF99               	btfsc	sprintf@c& (0+255),7,b
  3385  001F20  0E7F               	movlw	127
  3386  001F22  5865               	subwfb	??_sprintf& (0+255),w,c
  3387  001F24  B0D8               	btfsc	status,0,c
  3388  001F26  D007               	goto	l3707
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;doprnt.c: 1342: prec = c;
  3392  001F28  0100               	movlb	0	; () banked
  3393  001F2A  5199               	movf	sprintf@c& (0+255),w,b
  3394  001F2C  0100               	movlb	0	; () banked
  3395  001F2E  6F94               	movwf	sprintf@prec& (0+255),b
  3396  001F30  6B95               	clrf	(sprintf@prec+1)& (0+255),b
  3397  001F32  BF94               	btfsc	sprintf@prec& (0+255),7,b
  3398  001F34  0795               	decf	(sprintf@prec+1)& (0+255),f,b
  3399  001F36                     l3707:
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;doprnt.c: 1422: {
  3403                           ;doprnt.c: 1438: if(flag & 0x03)
  3404  001F36  0E03               	movlw	3
  3405  001F38  0100               	movlb	0	; () banked
  3406  001F3A  1588               	andwf	sprintf@flag& (0+255),w,b
  3407  001F3C  6E65               	movwf	??_sprintf& (0+255),c
  3408  001F3E  0E00               	movlw	0
  3409  001F40  0100               	movlb	0	; () banked
  3410  001F42  1589               	andwf	(sprintf@flag+1)& (0+255),w,b
  3411  001F44  6E66               	movwf	(??_sprintf+1)& (0+255),c
  3412  001F46  5065               	movf	??_sprintf,w,c
  3413  001F48  1066               	iorwf	??_sprintf+1,w,c
  3414  001F4A  B4D8               	btfsc	status,2,c
  3415  001F4C  D007               	goto	l3713
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3419  001F4E  C05E  FFD9         	movff	sprintf@sp,fsr2l
  3420  001F52  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  3421  001F56  0E2D               	movlw	45
  3422  001F58                     L2:
  3423  001F58  6EDF               	movwf	indf2,c
  3424  001F5A  D469               	goto	l3551
  3425  001F5C                     l3713:
  3426  001F5C  C060  FFF6         	movff	sprintf@f,tblptrl
  3427  001F60  C061  FFF7         	movff	sprintf@f+1,tblptrh
  3428  001F64  4A60               	infsnz	sprintf@f,f,c
  3429  001F66  2A61               	incf	sprintf@f+1,f,c
  3430  001F68                     	if	0	;tblptru may be non-zero
  3431  001F68                     	endif
  3432  001F68                     	if	0	;tblptru may be non-zero
  3433  001F68                     	endif
  3434  001F68  0008               	tblrd		*
  3435  001F6A  CFF5 F099          	movff	tablat,sprintf@c
  3436  001F6E  0100               	movlb	0	; () banked
  3437  001F70  5199               	movf	sprintf@c& (0+255),w,b
  3438  001F72  A4D8               	btfss	status,2,c
  3439  001F74  EF63  F008         	goto	l3375
  3440  001F78                     l3715:
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;doprnt.c: 1538: *sp = 0;
  3444  001F78  C05E  FFD9         	movff	sprintf@sp,fsr2l
  3445  001F7C  C05F  FFDA         	movff	sprintf@sp+1,fsr2h
  3446  001F80  0E00               	movlw	0
  3447  001F82  6EDF               	movwf	indf2,c
  3448  001F84  0012               	return	
  3449  001F86                     __end_of_sprintf:
  3450                           	opt stack 0
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           indf2	equ	0xFDF
  3460                           postinc2	equ	0xFDE
  3461                           postdec2	equ	0xFDD
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function _scale *****************
  3467 ;; Defined at:
  3468 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  scl             1    wreg     char 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  scl             1   68[COMRAM] char 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  3   62[COMRAM] char 
  3475 ;; Registers used:
  3476 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3482 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;Total ram usage:        7 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    2
  3489 ;; This function calls:
  3490 ;;		___awdiv
  3491 ;;		___awmod
  3492 ;;		___ftmul
  3493 ;;		___wmul
  3494 ;; This function is called by:
  3495 ;;		_sprintf
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	text2
  3500  001F86                     __ptext2:
  3501                           	opt stack 0
  3502  001F86                     _scale:
  3503                           	opt stack 27
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;incstack = 0
  3507                           ;scale@scl stored from wreg
  3508  001F86  6E45               	movwf	scale@scl,c
  3509                           
  3510                           ;doprnt.c: 428: if(scl < 0) {
  3511  001F88  AE45               	btfss	scale@scl,7,c
  3512  001F8A  D0FB               	goto	l2991
  3513                           
  3514                           ;doprnt.c: 429: scl = -scl;
  3515  001F8C  6C45               	negf	scale@scl,c
  3516                           
  3517                           ;doprnt.c: 430: if(scl>=110)
  3518  001F8E  5045               	movf	scale@scl,w,c
  3519  001F90  0A80               	xorlw	128
  3520  001F92  0F12               	addlw	-238
  3521  001F94  A0D8               	btfss	status,0,c
  3522  001F96  D091               	goto	l2981
  3523                           
  3524                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3525  001F98  0E00               	movlw	0
  3526  001F9A  6E12               	movwf	___wmul@multiplicand+1,c
  3527  001F9C  0E03               	movlw	3
  3528  001F9E  6E11               	movwf	___wmul@multiplicand,c
  3529  001FA0  0E00               	movlw	0
  3530  001FA2  6E0A               	movwf	___awdiv@divisor+1,c
  3531  001FA4  0E0A               	movlw	10
  3532  001FA6  6E09               	movwf	___awdiv@divisor,c
  3533  001FA8  0E00               	movlw	0
  3534  001FAA  6E04               	movwf	___awmod@divisor+1,c
  3535  001FAC  0E64               	movlw	100
  3536  001FAE  6E03               	movwf	___awmod@divisor,c
  3537  001FB0  5045               	movf	scale@scl,w,c
  3538  001FB2  6E01               	movwf	___awmod@dividend,c
  3539  001FB4  6A02               	clrf	___awmod@dividend+1,c
  3540  001FB6  BE01               	btfsc	___awmod@dividend,7,c
  3541  001FB8  0602               	decf	___awmod@dividend+1,f,c
  3542  001FBA  EC06  F019         	call	___awmod	;wreg free
  3543  001FBE  C001  F007         	movff	?___awmod,___awdiv@dividend
  3544  001FC2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3545  001FC6  EC83  F018         	call	___awdiv	;wreg free
  3546  001FCA  0E09               	movlw	9
  3547  001FCC  2407               	addwf	?___awdiv,w,c
  3548  001FCE  6E0F               	movwf	___wmul@multiplier,c
  3549  001FD0  0E00               	movlw	0
  3550  001FD2  2008               	addwfc	?___awdiv+1,w,c
  3551  001FD4  6E10               	movwf	___wmul@multiplier+1,c
  3552  001FD6  EC27  F01B         	call	___wmul	;wreg free
  3553  001FDA  0E50               	movlw	low __npowers_
  3554  001FDC  240F               	addwf	?___wmul,w,c
  3555  001FDE  6EF6               	movwf	tblptrl,c
  3556  001FE0  0E10               	movlw	high __npowers_
  3557  001FE2  2010               	addwfc	?___wmul+1,w,c
  3558  001FE4  6EF7               	movwf	tblptrh,c
  3559  001FE6                     	if	0	;There are less than 3 active tblptr bytes
  3560  001FE6                     	endif
  3561  001FE6  0009               	tblrd		*+
  3562  001FE8  CFF5 F033          	movff	tablat,___ftmul@f2
  3563  001FEC  0009               	tblrd		*+
  3564  001FEE  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3565  001FF2  000A               	tblrd		*-
  3566  001FF4  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3567  001FF8  0E00               	movlw	0
  3568  001FFA  6E0A               	movwf	___awdiv@divisor+1,c
  3569  001FFC  0E64               	movlw	100
  3570  001FFE  6E09               	movwf	___awdiv@divisor,c
  3571  002000  5045               	movf	scale@scl,w,c
  3572  002002  6E07               	movwf	___awdiv@dividend,c
  3573  002004  6A08               	clrf	___awdiv@dividend+1,c
  3574  002006  BE07               	btfsc	___awdiv@dividend,7,c
  3575  002008  0608               	decf	___awdiv@dividend+1,f,c
  3576  00200A  EC83  F018         	call	___awdiv	;wreg free
  3577  00200E  0E12               	movlw	18
  3578  002010  2407               	addwf	?___awdiv,w,c
  3579  002012  6E0F               	movwf	___wmul@multiplier,c
  3580  002014  0E00               	movlw	0
  3581  002016  2008               	addwfc	?___awdiv+1,w,c
  3582  002018  6E10               	movwf	___wmul@multiplier+1,c
  3583  00201A  0E00               	movlw	0
  3584  00201C  6E12               	movwf	___wmul@multiplicand+1,c
  3585  00201E  0E03               	movlw	3
  3586  002020  6E11               	movwf	___wmul@multiplicand,c
  3587  002022  EC27  F01B         	call	___wmul	;wreg free
  3588  002026  0E50               	movlw	low __npowers_
  3589  002028  240F               	addwf	?___wmul,w,c
  3590  00202A  6EF6               	movwf	tblptrl,c
  3591  00202C  0E10               	movlw	high __npowers_
  3592  00202E  2010               	addwfc	?___wmul+1,w,c
  3593  002030  6EF7               	movwf	tblptrh,c
  3594  002032                     	if	0	;There are less than 3 active tblptr bytes
  3595  002032                     	endif
  3596  002032  0009               	tblrd		*+
  3597  002034  CFF5 F030          	movff	tablat,___ftmul@f1
  3598  002038  0009               	tblrd		*+
  3599  00203A  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3600  00203E  000A               	tblrd		*-
  3601  002040  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3602  002044  EC2B  F016         	call	___ftmul	;wreg free
  3603  002048  C030  F042         	movff	?___ftmul,_scale$1614
  3604  00204C  C031  F043         	movff	?___ftmul+1,_scale$1614+1
  3605  002050  C032  F044         	movff	?___ftmul+2,_scale$1614+2
  3606                           
  3607                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3608  002054  C042  F030         	movff	_scale$1614,___ftmul@f1
  3609  002058  C043  F031         	movff	_scale$1614+1,___ftmul@f1+1
  3610  00205C  C044  F032         	movff	_scale$1614+2,___ftmul@f1+2
  3611  002060  0E00               	movlw	0
  3612  002062  6E12               	movwf	___wmul@multiplicand+1,c
  3613  002064  0E03               	movlw	3
  3614  002066  6E11               	movwf	___wmul@multiplicand,c
  3615  002068  0E00               	movlw	0
  3616  00206A  6E04               	movwf	___awmod@divisor+1,c
  3617  00206C  0E0A               	movlw	10
  3618  00206E  6E03               	movwf	___awmod@divisor,c
  3619  002070  5045               	movf	scale@scl,w,c
  3620  002072  6E01               	movwf	___awmod@dividend,c
  3621  002074  6A02               	clrf	___awmod@dividend+1,c
  3622  002076  BE01               	btfsc	___awmod@dividend,7,c
  3623  002078  0602               	decf	___awmod@dividend+1,f,c
  3624  00207A  EC06  F019         	call	___awmod	;wreg free
  3625  00207E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3626  002082  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3627  002086  EC27  F01B         	call	___wmul	;wreg free
  3628  00208A  0E50               	movlw	low __npowers_
  3629  00208C  240F               	addwf	?___wmul,w,c
  3630  00208E  6EF6               	movwf	tblptrl,c
  3631  002090  0E10               	movlw	high __npowers_
  3632  002092  2010               	addwfc	?___wmul+1,w,c
  3633  002094  6EF7               	movwf	tblptrh,c
  3634  002096                     	if	0	;There are less than 3 active tblptr bytes
  3635  002096                     	endif
  3636  002096  0009               	tblrd		*+
  3637  002098  CFF5 F033          	movff	tablat,___ftmul@f2
  3638  00209C  0009               	tblrd		*+
  3639  00209E  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3640  0020A2  000A               	tblrd		*-
  3641  0020A4  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3642  0020A8  EC2B  F016         	call	___ftmul	;wreg free
  3643  0020AC  C030  F03F         	movff	?___ftmul,?_scale
  3644  0020B0  C031  F040         	movff	?___ftmul+1,?_scale+1
  3645  0020B4  C032  F041         	movff	?___ftmul+2,?_scale+2
  3646  0020B8  0012               	return	
  3647  0020BA                     l2981:
  3648                           
  3649                           ;doprnt.c: 432: else if(scl > 10)
  3650  0020BA  5045               	movf	scale@scl,w,c
  3651  0020BC  0A80               	xorlw	128
  3652  0020BE  0F75               	addlw	-139
  3653  0020C0  A0D8               	btfss	status,0,c
  3654  0020C2  D04D               	goto	l2987
  3655                           
  3656                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3657  0020C4  0E00               	movlw	0
  3658  0020C6  6E0A               	movwf	___awdiv@divisor+1,c
  3659  0020C8  0E0A               	movlw	10
  3660  0020CA  6E09               	movwf	___awdiv@divisor,c
  3661  0020CC  5045               	movf	scale@scl,w,c
  3662  0020CE  6E07               	movwf	___awdiv@dividend,c
  3663  0020D0  6A08               	clrf	___awdiv@dividend+1,c
  3664  0020D2  BE07               	btfsc	___awdiv@dividend,7,c
  3665  0020D4  0608               	decf	___awdiv@dividend+1,f,c
  3666  0020D6  EC83  F018         	call	___awdiv	;wreg free
  3667  0020DA  0E09               	movlw	9
  3668  0020DC  2407               	addwf	?___awdiv,w,c
  3669  0020DE  6E0F               	movwf	___wmul@multiplier,c
  3670  0020E0  0E00               	movlw	0
  3671  0020E2  2008               	addwfc	?___awdiv+1,w,c
  3672  0020E4  6E10               	movwf	___wmul@multiplier+1,c
  3673  0020E6  0E00               	movlw	0
  3674  0020E8  6E12               	movwf	___wmul@multiplicand+1,c
  3675  0020EA  0E03               	movlw	3
  3676  0020EC  6E11               	movwf	___wmul@multiplicand,c
  3677  0020EE  EC27  F01B         	call	___wmul	;wreg free
  3678  0020F2  0E50               	movlw	low __npowers_
  3679  0020F4  240F               	addwf	?___wmul,w,c
  3680  0020F6  6EF6               	movwf	tblptrl,c
  3681  0020F8  0E10               	movlw	high __npowers_
  3682  0020FA  2010               	addwfc	?___wmul+1,w,c
  3683  0020FC  6EF7               	movwf	tblptrh,c
  3684  0020FE                     	if	0	;There are less than 3 active tblptr bytes
  3685  0020FE                     	endif
  3686  0020FE  0009               	tblrd		*+
  3687  002100  CFF5 F030          	movff	tablat,___ftmul@f1
  3688  002104  0009               	tblrd		*+
  3689  002106  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3690  00210A  000A               	tblrd		*-
  3691  00210C  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3692  002110  0E00               	movlw	0
  3693  002112  6E12               	movwf	___wmul@multiplicand+1,c
  3694  002114  0E03               	movlw	3
  3695  002116  6E11               	movwf	___wmul@multiplicand,c
  3696  002118  0E00               	movlw	0
  3697  00211A  6E04               	movwf	___awmod@divisor+1,c
  3698  00211C  0E0A               	movlw	10
  3699  00211E  6E03               	movwf	___awmod@divisor,c
  3700  002120  5045               	movf	scale@scl,w,c
  3701  002122  6E01               	movwf	___awmod@dividend,c
  3702  002124  6A02               	clrf	___awmod@dividend+1,c
  3703  002126  BE01               	btfsc	___awmod@dividend,7,c
  3704  002128  0602               	decf	___awmod@dividend+1,f,c
  3705  00212A  EC06  F019         	call	___awmod	;wreg free
  3706  00212E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3707  002132  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3708  002136  EC27  F01B         	call	___wmul	;wreg free
  3709  00213A  0E50               	movlw	low __npowers_
  3710  00213C  240F               	addwf	?___wmul,w,c
  3711  00213E  6EF6               	movwf	tblptrl,c
  3712  002140  0E10               	movlw	high __npowers_
  3713  002142  2010               	addwfc	?___wmul+1,w,c
  3714  002144  6EF7               	movwf	tblptrh,c
  3715  002146                     	if	0	;There are less than 3 active tblptr bytes
  3716  002146                     	endif
  3717  002146  0009               	tblrd		*+
  3718  002148  CFF5 F033          	movff	tablat,___ftmul@f2
  3719  00214C  0009               	tblrd		*+
  3720  00214E  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3721  002152  000A               	tblrd		*-
  3722  002154  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3723  002158  EC2B  F016         	call	___ftmul	;wreg free
  3724  00215C  D7A7               	goto	L5
  3725  00215E                     l2987:
  3726                           
  3727                           ;doprnt.c: 434: return _npowers_[scl];
  3728  00215E  5045               	movf	scale@scl,w,c
  3729  002160  0D03               	mullw	3
  3730  002162  0E50               	movlw	low __npowers_
  3731  002164  24F3               	addwf	prodl,w,c
  3732  002166  6EF6               	movwf	tblptrl,c
  3733  002168  0E10               	movlw	high __npowers_
  3734  00216A  20F4               	addwfc	prodh,w,c
  3735  00216C  6EF7               	movwf	tblptrh,c
  3736  00216E                     	if	0	;There are less than 3 active tblptr bytes
  3737  00216E                     	endif
  3738  00216E  0009               	tblrd		*+
  3739  002170  CFF5 F03F          	movff	tablat,?_scale
  3740  002174  0009               	tblrd		*+
  3741  002176  CFF5 F040          	movff	tablat,?_scale+1
  3742  00217A  000A               	tblrd		*-
  3743  00217C  CFF5 F041          	movff	tablat,?_scale+2
  3744  002180  0012               	return	
  3745  002182                     l2991:
  3746                           
  3747                           ;doprnt.c: 435: }
  3748                           ;doprnt.c: 436: if(scl>=110)
  3749  002182  5045               	movf	scale@scl,w,c
  3750  002184  0A80               	xorlw	128
  3751  002186  0F12               	addlw	-238
  3752  002188  A0D8               	btfss	status,0,c
  3753  00218A  D091               	goto	l2999
  3754                           
  3755                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3756  00218C  0E00               	movlw	0
  3757  00218E  6E12               	movwf	___wmul@multiplicand+1,c
  3758  002190  0E03               	movlw	3
  3759  002192  6E11               	movwf	___wmul@multiplicand,c
  3760  002194  0E00               	movlw	0
  3761  002196  6E0A               	movwf	___awdiv@divisor+1,c
  3762  002198  0E0A               	movlw	10
  3763  00219A  6E09               	movwf	___awdiv@divisor,c
  3764  00219C  0E00               	movlw	0
  3765  00219E  6E04               	movwf	___awmod@divisor+1,c
  3766  0021A0  0E64               	movlw	100
  3767  0021A2  6E03               	movwf	___awmod@divisor,c
  3768  0021A4  5045               	movf	scale@scl,w,c
  3769  0021A6  6E01               	movwf	___awmod@dividend,c
  3770  0021A8  6A02               	clrf	___awmod@dividend+1,c
  3771  0021AA  BE01               	btfsc	___awmod@dividend,7,c
  3772  0021AC  0602               	decf	___awmod@dividend+1,f,c
  3773  0021AE  EC06  F019         	call	___awmod	;wreg free
  3774  0021B2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3775  0021B6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3776  0021BA  EC83  F018         	call	___awdiv	;wreg free
  3777  0021BE  0E09               	movlw	9
  3778  0021C0  2407               	addwf	?___awdiv,w,c
  3779  0021C2  6E0F               	movwf	___wmul@multiplier,c
  3780  0021C4  0E00               	movlw	0
  3781  0021C6  2008               	addwfc	?___awdiv+1,w,c
  3782  0021C8  6E10               	movwf	___wmul@multiplier+1,c
  3783  0021CA  EC27  F01B         	call	___wmul	;wreg free
  3784  0021CE  0E29               	movlw	low __powers_
  3785  0021D0  240F               	addwf	?___wmul,w,c
  3786  0021D2  6EF6               	movwf	tblptrl,c
  3787  0021D4  0E10               	movlw	high __powers_
  3788  0021D6  2010               	addwfc	?___wmul+1,w,c
  3789  0021D8  6EF7               	movwf	tblptrh,c
  3790  0021DA                     	if	0	;There are less than 3 active tblptr bytes
  3791  0021DA                     	endif
  3792  0021DA  0009               	tblrd		*+
  3793  0021DC  CFF5 F033          	movff	tablat,___ftmul@f2
  3794  0021E0  0009               	tblrd		*+
  3795  0021E2  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3796  0021E6  000A               	tblrd		*-
  3797  0021E8  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3798  0021EC  0E00               	movlw	0
  3799  0021EE  6E0A               	movwf	___awdiv@divisor+1,c
  3800  0021F0  0E64               	movlw	100
  3801  0021F2  6E09               	movwf	___awdiv@divisor,c
  3802  0021F4  5045               	movf	scale@scl,w,c
  3803  0021F6  6E07               	movwf	___awdiv@dividend,c
  3804  0021F8  6A08               	clrf	___awdiv@dividend+1,c
  3805  0021FA  BE07               	btfsc	___awdiv@dividend,7,c
  3806  0021FC  0608               	decf	___awdiv@dividend+1,f,c
  3807  0021FE  EC83  F018         	call	___awdiv	;wreg free
  3808  002202  0E12               	movlw	18
  3809  002204  2407               	addwf	?___awdiv,w,c
  3810  002206  6E0F               	movwf	___wmul@multiplier,c
  3811  002208  0E00               	movlw	0
  3812  00220A  2008               	addwfc	?___awdiv+1,w,c
  3813  00220C  6E10               	movwf	___wmul@multiplier+1,c
  3814  00220E  0E00               	movlw	0
  3815  002210  6E12               	movwf	___wmul@multiplicand+1,c
  3816  002212  0E03               	movlw	3
  3817  002214  6E11               	movwf	___wmul@multiplicand,c
  3818  002216  EC27  F01B         	call	___wmul	;wreg free
  3819  00221A  0E29               	movlw	low __powers_
  3820  00221C  240F               	addwf	?___wmul,w,c
  3821  00221E  6EF6               	movwf	tblptrl,c
  3822  002220  0E10               	movlw	high __powers_
  3823  002222  2010               	addwfc	?___wmul+1,w,c
  3824  002224  6EF7               	movwf	tblptrh,c
  3825  002226                     	if	0	;There are less than 3 active tblptr bytes
  3826  002226                     	endif
  3827  002226  0009               	tblrd		*+
  3828  002228  CFF5 F030          	movff	tablat,___ftmul@f1
  3829  00222C  0009               	tblrd		*+
  3830  00222E  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3831  002232  000A               	tblrd		*-
  3832  002234  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3833  002238  EC2B  F016         	call	___ftmul	;wreg free
  3834  00223C  C030  F042         	movff	?___ftmul,_scale$1614
  3835  002240  C031  F043         	movff	?___ftmul+1,_scale$1614+1
  3836  002244  C032  F044         	movff	?___ftmul+2,_scale$1614+2
  3837                           
  3838                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3839  002248  C042  F030         	movff	_scale$1614,___ftmul@f1
  3840  00224C  C043  F031         	movff	_scale$1614+1,___ftmul@f1+1
  3841  002250  C044  F032         	movff	_scale$1614+2,___ftmul@f1+2
  3842  002254  0E00               	movlw	0
  3843  002256  6E12               	movwf	___wmul@multiplicand+1,c
  3844  002258  0E03               	movlw	3
  3845  00225A  6E11               	movwf	___wmul@multiplicand,c
  3846  00225C  0E00               	movlw	0
  3847  00225E  6E04               	movwf	___awmod@divisor+1,c
  3848  002260  0E0A               	movlw	10
  3849  002262  6E03               	movwf	___awmod@divisor,c
  3850  002264  5045               	movf	scale@scl,w,c
  3851  002266  6E01               	movwf	___awmod@dividend,c
  3852  002268  6A02               	clrf	___awmod@dividend+1,c
  3853  00226A  BE01               	btfsc	___awmod@dividend,7,c
  3854  00226C  0602               	decf	___awmod@dividend+1,f,c
  3855  00226E  EC06  F019         	call	___awmod	;wreg free
  3856  002272  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3857  002276  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3858  00227A  EC27  F01B         	call	___wmul	;wreg free
  3859  00227E  0E29               	movlw	low __powers_
  3860  002280  240F               	addwf	?___wmul,w,c
  3861  002282  6EF6               	movwf	tblptrl,c
  3862  002284  0E10               	movlw	high __powers_
  3863  002286  2010               	addwfc	?___wmul+1,w,c
  3864  002288  6EF7               	movwf	tblptrh,c
  3865  00228A                     	if	0	;There are less than 3 active tblptr bytes
  3866  00228A                     	endif
  3867  00228A  0009               	tblrd		*+
  3868  00228C  CFF5 F033          	movff	tablat,___ftmul@f2
  3869  002290  0009               	tblrd		*+
  3870  002292  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3871  002296  000A               	tblrd		*-
  3872  002298  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3873  00229C  EC2B  F016         	call	___ftmul	;wreg free
  3874  0022A0  C030  F03F         	movff	?___ftmul,?_scale
  3875  0022A4  C031  F040         	movff	?___ftmul+1,?_scale+1
  3876  0022A8  C032  F041         	movff	?___ftmul+2,?_scale+2
  3877  0022AC  0012               	return	
  3878  0022AE                     l2999:
  3879                           
  3880                           ;doprnt.c: 438: else if(scl > 10)
  3881  0022AE  5045               	movf	scale@scl,w,c
  3882  0022B0  0A80               	xorlw	128
  3883  0022B2  0F75               	addlw	-139
  3884  0022B4  A0D8               	btfss	status,0,c
  3885  0022B6  D04D               	goto	l3005
  3886                           
  3887                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3888  0022B8  0E00               	movlw	0
  3889  0022BA  6E0A               	movwf	___awdiv@divisor+1,c
  3890  0022BC  0E0A               	movlw	10
  3891  0022BE  6E09               	movwf	___awdiv@divisor,c
  3892  0022C0  5045               	movf	scale@scl,w,c
  3893  0022C2  6E07               	movwf	___awdiv@dividend,c
  3894  0022C4  6A08               	clrf	___awdiv@dividend+1,c
  3895  0022C6  BE07               	btfsc	___awdiv@dividend,7,c
  3896  0022C8  0608               	decf	___awdiv@dividend+1,f,c
  3897  0022CA  EC83  F018         	call	___awdiv	;wreg free
  3898  0022CE  0E09               	movlw	9
  3899  0022D0  2407               	addwf	?___awdiv,w,c
  3900  0022D2  6E0F               	movwf	___wmul@multiplier,c
  3901  0022D4  0E00               	movlw	0
  3902  0022D6  2008               	addwfc	?___awdiv+1,w,c
  3903  0022D8  6E10               	movwf	___wmul@multiplier+1,c
  3904  0022DA  0E00               	movlw	0
  3905  0022DC  6E12               	movwf	___wmul@multiplicand+1,c
  3906  0022DE  0E03               	movlw	3
  3907  0022E0  6E11               	movwf	___wmul@multiplicand,c
  3908  0022E2  EC27  F01B         	call	___wmul	;wreg free
  3909  0022E6  0E29               	movlw	low __powers_
  3910  0022E8  240F               	addwf	?___wmul,w,c
  3911  0022EA  6EF6               	movwf	tblptrl,c
  3912  0022EC  0E10               	movlw	high __powers_
  3913  0022EE  2010               	addwfc	?___wmul+1,w,c
  3914  0022F0  6EF7               	movwf	tblptrh,c
  3915  0022F2                     	if	0	;There are less than 3 active tblptr bytes
  3916  0022F2                     	endif
  3917  0022F2  0009               	tblrd		*+
  3918  0022F4  CFF5 F030          	movff	tablat,___ftmul@f1
  3919  0022F8  0009               	tblrd		*+
  3920  0022FA  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3921  0022FE  000A               	tblrd		*-
  3922  002300  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3923  002304  0E00               	movlw	0
  3924  002306  6E12               	movwf	___wmul@multiplicand+1,c
  3925  002308  0E03               	movlw	3
  3926  00230A  6E11               	movwf	___wmul@multiplicand,c
  3927  00230C  0E00               	movlw	0
  3928  00230E  6E04               	movwf	___awmod@divisor+1,c
  3929  002310  0E0A               	movlw	10
  3930  002312  6E03               	movwf	___awmod@divisor,c
  3931  002314  5045               	movf	scale@scl,w,c
  3932  002316  6E01               	movwf	___awmod@dividend,c
  3933  002318  6A02               	clrf	___awmod@dividend+1,c
  3934  00231A  BE01               	btfsc	___awmod@dividend,7,c
  3935  00231C  0602               	decf	___awmod@dividend+1,f,c
  3936  00231E  EC06  F019         	call	___awmod	;wreg free
  3937  002322  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3938  002326  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3939  00232A  EC27  F01B         	call	___wmul	;wreg free
  3940  00232E  0E29               	movlw	low __powers_
  3941  002330  240F               	addwf	?___wmul,w,c
  3942  002332  6EF6               	movwf	tblptrl,c
  3943  002334  0E10               	movlw	high __powers_
  3944  002336  2010               	addwfc	?___wmul+1,w,c
  3945  002338  6EF7               	movwf	tblptrh,c
  3946  00233A                     	if	0	;There are less than 3 active tblptr bytes
  3947  00233A                     	endif
  3948  00233A  0009               	tblrd		*+
  3949  00233C  CFF5 F033          	movff	tablat,___ftmul@f2
  3950  002340  0009               	tblrd		*+
  3951  002342  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3952  002346  000A               	tblrd		*-
  3953  002348  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3954  00234C  EC2B  F016         	call	___ftmul	;wreg free
  3955  002350  D7A7               	goto	L6
  3956  002352                     l3005:
  3957                           
  3958                           ;doprnt.c: 440: return _powers_[scl];
  3959  002352  5045               	movf	scale@scl,w,c
  3960  002354  0D03               	mullw	3
  3961  002356  0E29               	movlw	low __powers_
  3962  002358  24F3               	addwf	prodl,w,c
  3963  00235A  6EF6               	movwf	tblptrl,c
  3964  00235C  0E10               	movlw	high __powers_
  3965  00235E  20F4               	addwfc	prodh,w,c
  3966  002360  6EF7               	movwf	tblptrh,c
  3967  002362                     	if	0	;There are less than 3 active tblptr bytes
  3968  002362                     	endif
  3969  002362  0009               	tblrd		*+
  3970  002364  CFF5 F03F          	movff	tablat,?_scale
  3971  002368  0009               	tblrd		*+
  3972  00236A  CFF5 F040          	movff	tablat,?_scale+1
  3973  00236E  000A               	tblrd		*-
  3974  002370  CFF5 F041          	movff	tablat,?_scale+2
  3975  002374  0012               	return	
  3976  002376                     __end_of_scale:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           postinc0	equ	0xFEE
  3985                           wreg	equ	0xFE8
  3986                           indf2	equ	0xFDF
  3987                           postinc2	equ	0xFDE
  3988                           postdec2	equ	0xFDD
  3989                           fsr2h	equ	0xFDA
  3990                           fsr2l	equ	0xFD9
  3991                           status	equ	0xFD8
  3992                           
  3993 ;; *************** function _isdigit *****************
  3994 ;; Defined at:
  3995 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  c               1    wreg     unsigned char 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  c               1    2[COMRAM] unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;		None               void
  4002 ;; Registers used:
  4003 ;;		wreg, status,2, status,0
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;Total ram usage:        3 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; This function calls:
  4016 ;;		Nothing
  4017 ;; This function is called by:
  4018 ;;		_sprintf
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           	psect	text3
  4023  0036BC                     __ptext3:
  4024                           	opt stack 0
  4025  0036BC                     _isdigit:
  4026                           	opt stack 29
  4027                           
  4028                           ;incstack = 0
  4029                           ;isdigit@c stored from wreg
  4030  0036BC  6E03               	movwf	isdigit@c,c
  4031  0036BE  0E00               	movlw	0
  4032  0036C0  6E02               	movwf	_isdigit$1257,c
  4033  0036C2  0E3A               	movlw	58
  4034  0036C4  6003               	cpfslt	isdigit@c,c
  4035  0036C6  D005               	goto	l3017
  4036  0036C8  0E2F               	movlw	47
  4037  0036CA  6403               	cpfsgt	isdigit@c,c
  4038  0036CC  D002               	goto	l3017
  4039  0036CE  0E01               	movlw	1
  4040  0036D0  6E02               	movwf	_isdigit$1257,c
  4041  0036D2                     l3017:
  4042  0036D2  C002  F001         	movff	_isdigit$1257,??_isdigit
  4043  0036D6  3001               	rrcf	??_isdigit,w,c
  4044  0036D8  0012               	return	
  4045  0036DA                     __end_of_isdigit:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           postinc0	equ	0xFEE
  4054                           wreg	equ	0xFE8
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function _fround *****************
  4063 ;; Defined at:
  4064 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;  prec            1    wreg     unsigned char 
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  prec            1   71[COMRAM] unsigned char 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  3   62[COMRAM] unsigned char 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4078 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;Total ram usage:       10 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    2
  4085 ;; This function calls:
  4086 ;;		___awdiv
  4087 ;;		___awmod
  4088 ;;		___ftmul
  4089 ;;		___wmul
  4090 ;; This function is called by:
  4091 ;;		_sprintf
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           	psect	text4
  4096  00260A                     __ptext4:
  4097                           	opt stack 0
  4098  00260A                     _fround:
  4099                           	opt stack 27
  4100                           
  4101                           ;incstack = 0
  4102                           ;fround@prec stored from wreg
  4103  00260A  6E48               	movwf	fround@prec,c
  4104                           
  4105                           ;doprnt.c: 413: if(prec>=110)
  4106  00260C  0E6D               	movlw	109
  4107  00260E  6448               	cpfsgt	fround@prec,c
  4108  002610  D09F               	goto	l2959
  4109                           
  4110                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4111  002612  0E00               	movlw	0
  4112  002614  6E12               	movwf	___wmul@multiplicand+1,c
  4113  002616  0E03               	movlw	3
  4114  002618  6E11               	movwf	___wmul@multiplicand,c
  4115  00261A  0E00               	movlw	0
  4116  00261C  6E0A               	movwf	___awdiv@divisor+1,c
  4117  00261E  0E0A               	movlw	10
  4118  002620  6E09               	movwf	___awdiv@divisor,c
  4119  002622  0E00               	movlw	0
  4120  002624  6E04               	movwf	___awmod@divisor+1,c
  4121  002626  0E64               	movlw	100
  4122  002628  6E03               	movwf	___awmod@divisor,c
  4123  00262A  C048  F001         	movff	fround@prec,___awmod@dividend
  4124  00262E  6A02               	clrf	___awmod@dividend+1,c
  4125  002630  EC06  F019         	call	___awmod	;wreg free
  4126  002634  C001  F007         	movff	?___awmod,___awdiv@dividend
  4127  002638  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4128  00263C  EC83  F018         	call	___awdiv	;wreg free
  4129  002640  0E09               	movlw	9
  4130  002642  2407               	addwf	?___awdiv,w,c
  4131  002644  6E0F               	movwf	___wmul@multiplier,c
  4132  002646  0E00               	movlw	0
  4133  002648  2008               	addwfc	?___awdiv+1,w,c
  4134  00264A  6E10               	movwf	___wmul@multiplier+1,c
  4135  00264C  EC27  F01B         	call	___wmul	;wreg free
  4136  002650  0E50               	movlw	low __npowers_
  4137  002652  240F               	addwf	?___wmul,w,c
  4138  002654  6EF6               	movwf	tblptrl,c
  4139  002656  0E10               	movlw	high __npowers_
  4140  002658  2010               	addwfc	?___wmul+1,w,c
  4141  00265A  6EF7               	movwf	tblptrh,c
  4142  00265C                     	if	0	;There are less than 3 active tblptr bytes
  4143  00265C                     	endif
  4144  00265C  0009               	tblrd		*+
  4145  00265E  CFF5 F033          	movff	tablat,___ftmul@f2
  4146  002662  0009               	tblrd		*+
  4147  002664  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4148  002668  000A               	tblrd		*-
  4149  00266A  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4150  00266E  0E00               	movlw	0
  4151  002670  6E0A               	movwf	___awdiv@divisor+1,c
  4152  002672  0E64               	movlw	100
  4153  002674  6E09               	movwf	___awdiv@divisor,c
  4154  002676  C048  F007         	movff	fround@prec,___awdiv@dividend
  4155  00267A  6A08               	clrf	___awdiv@dividend+1,c
  4156  00267C  EC83  F018         	call	___awdiv	;wreg free
  4157  002680  0E12               	movlw	18
  4158  002682  2407               	addwf	?___awdiv,w,c
  4159  002684  6E0F               	movwf	___wmul@multiplier,c
  4160  002686  0E00               	movlw	0
  4161  002688  2008               	addwfc	?___awdiv+1,w,c
  4162  00268A  6E10               	movwf	___wmul@multiplier+1,c
  4163  00268C  0E00               	movlw	0
  4164  00268E  6E12               	movwf	___wmul@multiplicand+1,c
  4165  002690  0E03               	movlw	3
  4166  002692  6E11               	movwf	___wmul@multiplicand,c
  4167  002694  EC27  F01B         	call	___wmul	;wreg free
  4168  002698  0E50               	movlw	low __npowers_
  4169  00269A  240F               	addwf	?___wmul,w,c
  4170  00269C  6EF6               	movwf	tblptrl,c
  4171  00269E  0E10               	movlw	high __npowers_
  4172  0026A0  2010               	addwfc	?___wmul+1,w,c
  4173  0026A2  6EF7               	movwf	tblptrh,c
  4174  0026A4                     	if	0	;There are less than 3 active tblptr bytes
  4175  0026A4                     	endif
  4176  0026A4  0009               	tblrd		*+
  4177  0026A6  CFF5 F030          	movff	tablat,___ftmul@f1
  4178  0026AA  0009               	tblrd		*+
  4179  0026AC  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4180  0026B0  000A               	tblrd		*-
  4181  0026B2  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4182  0026B6  EC2B  F016         	call	___ftmul	;wreg free
  4183  0026BA  C030  F045         	movff	?___ftmul,_fround$1612
  4184  0026BE  C031  F046         	movff	?___ftmul+1,_fround$1612+1
  4185  0026C2  C032  F047         	movff	?___ftmul+2,_fround$1612+2
  4186                           
  4187                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4188  0026C6  0E00               	movlw	0
  4189  0026C8  6E12               	movwf	___wmul@multiplicand+1,c
  4190  0026CA  0E03               	movlw	3
  4191  0026CC  6E11               	movwf	___wmul@multiplicand,c
  4192  0026CE  0E00               	movlw	0
  4193  0026D0  6E04               	movwf	___awmod@divisor+1,c
  4194  0026D2  0E0A               	movlw	10
  4195  0026D4  6E03               	movwf	___awmod@divisor,c
  4196  0026D6  C048  F001         	movff	fround@prec,___awmod@dividend
  4197  0026DA  6A02               	clrf	___awmod@dividend+1,c
  4198  0026DC  EC06  F019         	call	___awmod	;wreg free
  4199  0026E0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4200  0026E4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4201  0026E8  EC27  F01B         	call	___wmul	;wreg free
  4202  0026EC  0E50               	movlw	low __npowers_
  4203  0026EE  240F               	addwf	?___wmul,w,c
  4204  0026F0  6EF6               	movwf	tblptrl,c
  4205  0026F2  0E10               	movlw	high __npowers_
  4206  0026F4  2010               	addwfc	?___wmul+1,w,c
  4207  0026F6  6EF7               	movwf	tblptrh,c
  4208  0026F8                     	if	0	;There are less than 3 active tblptr bytes
  4209  0026F8                     	endif
  4210  0026F8  0009               	tblrd		*+
  4211  0026FA  CFF5 F033          	movff	tablat,___ftmul@f2
  4212  0026FE  0009               	tblrd		*+
  4213  002700  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4214  002704  000A               	tblrd		*-
  4215  002706  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4216  00270A  C045  F030         	movff	_fround$1612,___ftmul@f1
  4217  00270E  C046  F031         	movff	_fround$1612+1,___ftmul@f1+1
  4218  002712  C047  F032         	movff	_fround$1612+2,___ftmul@f1+2
  4219  002716  EC2B  F016         	call	___ftmul	;wreg free
  4220  00271A  C030  F042         	movff	?___ftmul,_fround$1613
  4221  00271E  C031  F043         	movff	?___ftmul+1,_fround$1613+1
  4222  002722  C032  F044         	movff	?___ftmul+2,_fround$1613+2
  4223                           
  4224                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4225  002726  C042  F030         	movff	_fround$1613,___ftmul@f1
  4226  00272A  C043  F031         	movff	_fround$1613+1,___ftmul@f1+1
  4227  00272E  C044  F032         	movff	_fround$1613+2,___ftmul@f1+2
  4228  002732  0E00               	movlw	0
  4229  002734  6E33               	movwf	___ftmul@f2,c
  4230  002736  0E00               	movlw	0
  4231  002738  6E34               	movwf	___ftmul@f2+1,c
  4232  00273A  0E3F               	movlw	63
  4233  00273C  6E35               	movwf	___ftmul@f2+2,c
  4234  00273E  EC2B  F016         	call	___ftmul	;wreg free
  4235  002742  C030  F03F         	movff	?___ftmul,?_fround
  4236  002746  C031  F040         	movff	?___ftmul+1,?_fround+1
  4237  00274A  C032  F041         	movff	?___ftmul+2,?_fround+2
  4238  00274E  0012               	return	
  4239  002750                     l2959:
  4240                           
  4241                           ;doprnt.c: 415: else if(prec > 10)
  4242  002750  0E0A               	movlw	10
  4243  002752  6448               	cpfsgt	fround@prec,c
  4244  002754  D05D               	goto	l2967
  4245                           
  4246                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4247  002756  0E00               	movlw	0
  4248  002758  6E12               	movwf	___wmul@multiplicand+1,c
  4249  00275A  0E03               	movlw	3
  4250  00275C  6E11               	movwf	___wmul@multiplicand,c
  4251  00275E  0E00               	movlw	0
  4252  002760  6E04               	movwf	___awmod@divisor+1,c
  4253  002762  0E0A               	movlw	10
  4254  002764  6E03               	movwf	___awmod@divisor,c
  4255  002766  C048  F001         	movff	fround@prec,___awmod@dividend
  4256  00276A  6A02               	clrf	___awmod@dividend+1,c
  4257  00276C  EC06  F019         	call	___awmod	;wreg free
  4258  002770  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4259  002774  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4260  002778  EC27  F01B         	call	___wmul	;wreg free
  4261  00277C  0E50               	movlw	low __npowers_
  4262  00277E  240F               	addwf	?___wmul,w,c
  4263  002780  6EF6               	movwf	tblptrl,c
  4264  002782  0E10               	movlw	high __npowers_
  4265  002784  2010               	addwfc	?___wmul+1,w,c
  4266  002786  6EF7               	movwf	tblptrh,c
  4267  002788                     	if	0	;There are less than 3 active tblptr bytes
  4268  002788                     	endif
  4269  002788  0009               	tblrd		*+
  4270  00278A  CFF5 F033          	movff	tablat,___ftmul@f2
  4271  00278E  0009               	tblrd		*+
  4272  002790  CFF5 F034          	movff	tablat,___ftmul@f2+1
  4273  002794  000A               	tblrd		*-
  4274  002796  CFF5 F035          	movff	tablat,___ftmul@f2+2
  4275  00279A  0E00               	movlw	0
  4276  00279C  6E0A               	movwf	___awdiv@divisor+1,c
  4277  00279E  0E0A               	movlw	10
  4278  0027A0  6E09               	movwf	___awdiv@divisor,c
  4279  0027A2  C048  F007         	movff	fround@prec,___awdiv@dividend
  4280  0027A6  6A08               	clrf	___awdiv@dividend+1,c
  4281  0027A8  EC83  F018         	call	___awdiv	;wreg free
  4282  0027AC  0E09               	movlw	9
  4283  0027AE  2407               	addwf	?___awdiv,w,c
  4284  0027B0  6E0F               	movwf	___wmul@multiplier,c
  4285  0027B2  0E00               	movlw	0
  4286  0027B4  2008               	addwfc	?___awdiv+1,w,c
  4287  0027B6  6E10               	movwf	___wmul@multiplier+1,c
  4288  0027B8  0E00               	movlw	0
  4289  0027BA  6E12               	movwf	___wmul@multiplicand+1,c
  4290  0027BC  0E03               	movlw	3
  4291  0027BE  6E11               	movwf	___wmul@multiplicand,c
  4292  0027C0  EC27  F01B         	call	___wmul	;wreg free
  4293  0027C4  0E50               	movlw	low __npowers_
  4294  0027C6  240F               	addwf	?___wmul,w,c
  4295  0027C8  6EF6               	movwf	tblptrl,c
  4296  0027CA  0E10               	movlw	high __npowers_
  4297  0027CC  2010               	addwfc	?___wmul+1,w,c
  4298  0027CE  6EF7               	movwf	tblptrh,c
  4299  0027D0                     	if	0	;There are less than 3 active tblptr bytes
  4300  0027D0                     	endif
  4301  0027D0  0009               	tblrd		*+
  4302  0027D2  CFF5 F030          	movff	tablat,___ftmul@f1
  4303  0027D6  0009               	tblrd		*+
  4304  0027D8  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4305  0027DC  000A               	tblrd		*-
  4306  0027DE  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4307  0027E2  EC2B  F016         	call	___ftmul	;wreg free
  4308  0027E6  C030  F045         	movff	?___ftmul,_fround$1612
  4309  0027EA  C031  F046         	movff	?___ftmul+1,_fround$1612+1
  4310  0027EE  C032  F047         	movff	?___ftmul+2,_fround$1612+2
  4311                           
  4312                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4313  0027F2  C045  F030         	movff	_fround$1612,___ftmul@f1
  4314  0027F6  C046  F031         	movff	_fround$1612+1,___ftmul@f1+1
  4315  0027FA  C047  F032         	movff	_fround$1612+2,___ftmul@f1+2
  4316  0027FE  0E00               	movlw	0
  4317  002800  6E33               	movwf	___ftmul@f2,c
  4318  002802  0E00               	movlw	0
  4319  002804  6E34               	movwf	___ftmul@f2+1,c
  4320  002806  0E3F               	movlw	63
  4321  002808  6E35               	movwf	___ftmul@f2+2,c
  4322  00280A  EC2B  F016         	call	___ftmul	;wreg free
  4323  00280E  D799               	goto	L7
  4324  002810                     l2967:
  4325                           
  4326                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4327  002810  5048               	movf	fround@prec,w,c
  4328  002812  0D03               	mullw	3
  4329  002814  0E50               	movlw	low __npowers_
  4330  002816  24F3               	addwf	prodl,w,c
  4331  002818  6EF6               	movwf	tblptrl,c
  4332  00281A  0E10               	movlw	high __npowers_
  4333  00281C  20F4               	addwfc	prodh,w,c
  4334  00281E  6EF7               	movwf	tblptrh,c
  4335  002820                     	if	0	;There are less than 3 active tblptr bytes
  4336  002820                     	endif
  4337  002820  0009               	tblrd		*+
  4338  002822  CFF5 F030          	movff	tablat,___ftmul@f1
  4339  002826  0009               	tblrd		*+
  4340  002828  CFF5 F031          	movff	tablat,___ftmul@f1+1
  4341  00282C  000A               	tblrd		*-
  4342  00282E  CFF5 F032          	movff	tablat,___ftmul@f1+2
  4343  002832  0E00               	movlw	0
  4344  002834  6E33               	movwf	___ftmul@f2,c
  4345  002836  0E00               	movlw	0
  4346  002838  6E34               	movwf	___ftmul@f2+1,c
  4347  00283A  0E3F               	movlw	63
  4348  00283C  6E35               	movwf	___ftmul@f2+2,c
  4349  00283E  EC2B  F016         	call	___ftmul	;wreg free
  4350  002842  C030  F03F         	movff	?___ftmul,?_fround
  4351  002846  C031  F040         	movff	?___ftmul+1,?_fround+1
  4352  00284A  C032  F041         	movff	?___ftmul+2,?_fround+2
  4353  00284E  0012               	return	
  4354  002850                     __end_of_fround:
  4355                           	opt stack 0
  4356                           tblptru	equ	0xFF8
  4357                           tblptrh	equ	0xFF7
  4358                           tblptrl	equ	0xFF6
  4359                           tablat	equ	0xFF5
  4360                           prodh	equ	0xFF4
  4361                           prodl	equ	0xFF3
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           indf2	equ	0xFDF
  4365                           postinc2	equ	0xFDE
  4366                           postdec2	equ	0xFDD
  4367                           fsr2h	equ	0xFDA
  4368                           fsr2l	equ	0xFD9
  4369                           status	equ	0xFD8
  4370                           
  4371 ;; *************** function ___wmul *****************
  4372 ;; Defined at:
  4373 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;  multiplier      2   14[COMRAM] unsigned int 
  4376 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  product         2   18[COMRAM] unsigned int 
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  2   14[COMRAM] unsigned int 
  4381 ;; Registers used:
  4382 ;;		wreg, status,2, status,0, prodl, prodh
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4388 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;Total ram usage:        6 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; This function calls:
  4395 ;;		Nothing
  4396 ;; This function is called by:
  4397 ;;		_fround
  4398 ;;		_scale
  4399 ;;		_sprintf
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           	psect	text5
  4404  00364E                     __ptext5:
  4405                           	opt stack 0
  4406  00364E                     ___wmul:
  4407                           	opt stack 28
  4408                           
  4409                           ;incstack = 0
  4410  00364E  500F               	movf	___wmul@multiplier,w,c
  4411  003650  0211               	mulwf	___wmul@multiplicand,c
  4412  003652  CFF3 F013          	movff	prodl,___wmul@product
  4413  003656  CFF4 F014          	movff	prodh,___wmul@product+1
  4414  00365A  500F               	movf	___wmul@multiplier,w,c
  4415  00365C  0212               	mulwf	___wmul@multiplicand+1,c
  4416  00365E  50F3               	movf	prodl,w,c
  4417  003660  2614               	addwf	___wmul@product+1,f,c
  4418  003662  5010               	movf	___wmul@multiplier+1,w,c
  4419  003664  0211               	mulwf	___wmul@multiplicand,c
  4420  003666  50F3               	movf	prodl,w,c
  4421  003668  2614               	addwf	___wmul@product+1,f,c
  4422  00366A  C013  F00F         	movff	___wmul@product,?___wmul
  4423  00366E  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4424  003672  0012               	return	
  4425  003674                     __end_of___wmul:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           indf2	equ	0xFDF
  4436                           postinc2	equ	0xFDE
  4437                           postdec2	equ	0xFDD
  4438                           fsr2h	equ	0xFDA
  4439                           fsr2l	equ	0xFD9
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function ___ftmul *****************
  4443 ;; Defined at:
  4444 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  f1              3   47[COMRAM] float 
  4447 ;;  f2              3   50[COMRAM] float 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  f3_as_produc    3   57[COMRAM] unsigned um
  4450 ;;  sign            1   61[COMRAM] unsigned char 
  4451 ;;  cntr            1   60[COMRAM] unsigned char 
  4452 ;;  exp             1   56[COMRAM] unsigned char 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  3   47[COMRAM] float 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4462 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;Total ram usage:       15 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    1
  4469 ;; This function calls:
  4470 ;;		___ftpack
  4471 ;; This function is called by:
  4472 ;;		_main
  4473 ;;		_fround
  4474 ;;		_scale
  4475 ;;		_sprintf
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text6
  4480  002C56                     __ptext6:
  4481                           	opt stack 0
  4482  002C56                     ___ftmul:
  4483                           	opt stack 27
  4484                           
  4485                           ;incstack = 0
  4486  002C56  C032  F036         	movff	___ftmul@f1+2,??___ftmul
  4487  002C5A  6A37               	clrf	(??___ftmul+1)& (0+255),c
  4488  002C5C  6A38               	clrf	(??___ftmul+2)& (0+255),c
  4489  002C5E  3431               	rlcf	___ftmul@f1+1,w,c
  4490  002C60  3636               	rlcf	??___ftmul& (0+255),f,c
  4491  002C62  E301               	bnc	u2201
  4492  002C64  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  4493  002C66                     u2201:
  4494  002C66  5036               	movf	??___ftmul,w,c
  4495  002C68  6E39               	movwf	___ftmul@exp,c
  4496  002C6A  5039               	movf	___ftmul@exp,w,c
  4497  002C6C  A4D8               	btfss	status,2,c
  4498  002C6E  D007               	goto	l2735
  4499  002C70  0E00               	movlw	0
  4500  002C72  6E30               	movwf	?___ftmul,c
  4501  002C74  0E00               	movlw	0
  4502  002C76  6E31               	movwf	?___ftmul+1,c
  4503  002C78  0E00               	movlw	0
  4504  002C7A  6E32               	movwf	?___ftmul+2,c
  4505  002C7C  0012               	return	
  4506  002C7E                     l2735:
  4507  002C7E  C035  F036         	movff	___ftmul@f2+2,??___ftmul
  4508  002C82  6A37               	clrf	(??___ftmul+1)& (0+255),c
  4509  002C84  6A38               	clrf	(??___ftmul+2)& (0+255),c
  4510  002C86  3434               	rlcf	___ftmul@f2+1,w,c
  4511  002C88  3636               	rlcf	??___ftmul& (0+255),f,c
  4512  002C8A  E301               	bnc	u2221
  4513  002C8C  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  4514  002C8E                     u2221:
  4515  002C8E  5036               	movf	??___ftmul,w,c
  4516  002C90  6E3E               	movwf	___ftmul@sign,c
  4517  002C92  503E               	movf	___ftmul@sign,w,c
  4518  002C94  A4D8               	btfss	status,2,c
  4519  002C96  D007               	goto	l2741
  4520  002C98  0E00               	movlw	0
  4521  002C9A  6E30               	movwf	?___ftmul,c
  4522  002C9C  0E00               	movlw	0
  4523  002C9E  6E31               	movwf	?___ftmul+1,c
  4524  002CA0  0E00               	movlw	0
  4525  002CA2  6E32               	movwf	?___ftmul+2,c
  4526  002CA4  0012               	return	
  4527  002CA6                     l2741:
  4528  002CA6  503E               	movf	___ftmul@sign,w,c
  4529  002CA8  0F7B               	addlw	123
  4530  002CAA  2639               	addwf	___ftmul@exp,f,c
  4531  002CAC  C032  F03E         	movff	___ftmul@f1+2,___ftmul@sign
  4532  002CB0  5035               	movf	___ftmul@f2+2,w,c
  4533  002CB2  1A3E               	xorwf	___ftmul@sign,f,c
  4534  002CB4  0E80               	movlw	128
  4535  002CB6  163E               	andwf	___ftmul@sign,f,c
  4536  002CB8  8E31               	bsf	___ftmul@f1+1,7,c
  4537  002CBA  8E34               	bsf	___ftmul@f2+1,7,c
  4538  002CBC  0EFF               	movlw	255
  4539  002CBE  1633               	andwf	___ftmul@f2,f,c
  4540  002CC0  0EFF               	movlw	255
  4541  002CC2  1634               	andwf	___ftmul@f2+1,f,c
  4542  002CC4  0E00               	movlw	0
  4543  002CC6  1635               	andwf	___ftmul@f2+2,f,c
  4544  002CC8  0E00               	movlw	0
  4545  002CCA  6E3A               	movwf	___ftmul@f3_as_product,c
  4546  002CCC  0E00               	movlw	0
  4547  002CCE  6E3B               	movwf	___ftmul@f3_as_product+1,c
  4548  002CD0  0E00               	movlw	0
  4549  002CD2  6E3C               	movwf	___ftmul@f3_as_product+2,c
  4550  002CD4  0E07               	movlw	7
  4551  002CD6  6E3D               	movwf	___ftmul@cntr,c
  4552  002CD8                     l2755:
  4553  002CD8  A030               	btfss	___ftmul@f1,0,c
  4554  002CDA  D006               	goto	l2759
  4555  002CDC  5033               	movf	___ftmul@f2,w,c
  4556  002CDE  263A               	addwf	___ftmul@f3_as_product,f,c
  4557  002CE0  5034               	movf	___ftmul@f2+1,w,c
  4558  002CE2  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  4559  002CE4  5035               	movf	___ftmul@f2+2,w,c
  4560  002CE6  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  4561  002CE8                     l2759:
  4562  002CE8  90D8               	bcf	status,0,c
  4563  002CEA  3232               	rrcf	___ftmul@f1+2,f,c
  4564  002CEC  3231               	rrcf	___ftmul@f1+1,f,c
  4565  002CEE  3230               	rrcf	___ftmul@f1,f,c
  4566  002CF0  90D8               	bcf	status,0,c
  4567  002CF2  3633               	rlcf	___ftmul@f2,f,c
  4568  002CF4  3634               	rlcf	___ftmul@f2+1,f,c
  4569  002CF6  3635               	rlcf	___ftmul@f2+2,f,c
  4570  002CF8  2E3D               	decfsz	___ftmul@cntr,f,c
  4571  002CFA  D7EE               	goto	l2755
  4572  002CFC  0E09               	movlw	9
  4573  002CFE  6E3D               	movwf	___ftmul@cntr,c
  4574  002D00                     l2765:
  4575  002D00  A030               	btfss	___ftmul@f1,0,c
  4576  002D02  D006               	goto	l2769
  4577  002D04  5033               	movf	___ftmul@f2,w,c
  4578  002D06  263A               	addwf	___ftmul@f3_as_product,f,c
  4579  002D08  5034               	movf	___ftmul@f2+1,w,c
  4580  002D0A  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  4581  002D0C  5035               	movf	___ftmul@f2+2,w,c
  4582  002D0E  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  4583  002D10                     l2769:
  4584  002D10  90D8               	bcf	status,0,c
  4585  002D12  3232               	rrcf	___ftmul@f1+2,f,c
  4586  002D14  3231               	rrcf	___ftmul@f1+1,f,c
  4587  002D16  3230               	rrcf	___ftmul@f1,f,c
  4588  002D18  90D8               	bcf	status,0,c
  4589  002D1A  323C               	rrcf	___ftmul@f3_as_product+2,f,c
  4590  002D1C  323B               	rrcf	___ftmul@f3_as_product+1,f,c
  4591  002D1E  323A               	rrcf	___ftmul@f3_as_product,f,c
  4592  002D20  2E3D               	decfsz	___ftmul@cntr,f,c
  4593  002D22  D7EE               	goto	l2765
  4594  002D24  C03A  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4595  002D28  C03B  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4596  002D2C  C03C  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4597  002D30  C039  F004         	movff	___ftmul@exp,___ftpack@exp
  4598  002D34  C03E  F005         	movff	___ftmul@sign,___ftpack@sign
  4599  002D38  EC92  F017         	call	___ftpack	;wreg free
  4600  002D3C  C001  F030         	movff	?___ftpack,?___ftmul
  4601  002D40  C002  F031         	movff	?___ftpack+1,?___ftmul+1
  4602  002D44  C003  F032         	movff	?___ftpack+2,?___ftmul+2
  4603  002D48  0012               	return	
  4604  002D4A                     __end_of___ftmul:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           prodh	equ	0xFF4
  4611                           prodl	equ	0xFF3
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           indf2	equ	0xFDF
  4615                           postinc2	equ	0xFDE
  4616                           postdec2	equ	0xFDD
  4617                           fsr2h	equ	0xFDA
  4618                           fsr2l	equ	0xFD9
  4619                           status	equ	0xFD8
  4620                           
  4621 ;; *************** function ___awmod *****************
  4622 ;; Defined at:
  4623 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  dividend        2    0[COMRAM] int 
  4626 ;;  divisor         2    2[COMRAM] int 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  sign            1    5[COMRAM] unsigned char 
  4629 ;;  counter         1    4[COMRAM] unsigned char 
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  2    0[COMRAM] int 
  4632 ;; Registers used:
  4633 ;;		wreg, status,2, status,0
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4639 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;Total ram usage:        6 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; This function calls:
  4646 ;;		Nothing
  4647 ;; This function is called by:
  4648 ;;		_fround
  4649 ;;		_scale
  4650 ;;		_sprintf
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text7
  4655  00320C                     __ptext7:
  4656                           	opt stack 0
  4657  00320C                     ___awmod:
  4658                           	opt stack 28
  4659                           
  4660                           ;incstack = 0
  4661  00320C  0E00               	movlw	0
  4662  00320E  6E06               	movwf	___awmod@sign,c
  4663  003210  AE02               	btfss	___awmod@dividend+1,7,c
  4664  003212  D006               	goto	l2829
  4665  003214  6C01               	negf	___awmod@dividend,c
  4666  003216  1E02               	comf	___awmod@dividend+1,f,c
  4667  003218  B0D8               	btfsc	status,0,c
  4668  00321A  2A02               	incf	___awmod@dividend+1,f,c
  4669  00321C  0E01               	movlw	1
  4670  00321E  6E06               	movwf	___awmod@sign,c
  4671  003220                     l2829:
  4672  003220  AE04               	btfss	___awmod@divisor+1,7,c
  4673  003222  D004               	goto	l2833
  4674  003224  6C03               	negf	___awmod@divisor,c
  4675  003226  1E04               	comf	___awmod@divisor+1,f,c
  4676  003228  B0D8               	btfsc	status,0,c
  4677  00322A  2A04               	incf	___awmod@divisor+1,f,c
  4678  00322C                     l2833:
  4679  00322C  5003               	movf	___awmod@divisor,w,c
  4680  00322E  1004               	iorwf	___awmod@divisor+1,w,c
  4681  003230  B4D8               	btfsc	status,2,c
  4682  003232  D018               	goto	l2849
  4683  003234  0E01               	movlw	1
  4684  003236  6E05               	movwf	___awmod@counter,c
  4685  003238  D004               	goto	l2839
  4686  00323A                     l2837:
  4687  00323A  90D8               	bcf	status,0,c
  4688  00323C  3603               	rlcf	___awmod@divisor,f,c
  4689  00323E  3604               	rlcf	___awmod@divisor+1,f,c
  4690  003240  2A05               	incf	___awmod@counter,f,c
  4691  003242                     l2839:
  4692  003242  AE04               	btfss	___awmod@divisor+1,7,c
  4693  003244  D7FA               	goto	l2837
  4694  003246                     l2841:
  4695  003246  5003               	movf	___awmod@divisor,w,c
  4696  003248  5C01               	subwf	___awmod@dividend,w,c
  4697  00324A  5004               	movf	___awmod@divisor+1,w,c
  4698  00324C  5802               	subwfb	___awmod@dividend+1,w,c
  4699  00324E  A0D8               	btfss	status,0,c
  4700  003250  D004               	goto	l2845
  4701  003252  5003               	movf	___awmod@divisor,w,c
  4702  003254  5E01               	subwf	___awmod@dividend,f,c
  4703  003256  5004               	movf	___awmod@divisor+1,w,c
  4704  003258  5A02               	subwfb	___awmod@dividend+1,f,c
  4705  00325A                     l2845:
  4706  00325A  90D8               	bcf	status,0,c
  4707  00325C  3204               	rrcf	___awmod@divisor+1,f,c
  4708  00325E  3203               	rrcf	___awmod@divisor,f,c
  4709  003260  2E05               	decfsz	___awmod@counter,f,c
  4710  003262  D7F1               	goto	l2841
  4711  003264                     l2849:
  4712  003264  5006               	movf	___awmod@sign,w,c
  4713  003266  B4D8               	btfsc	status,2,c
  4714  003268  D004               	goto	l2853
  4715  00326A  6C01               	negf	___awmod@dividend,c
  4716  00326C  1E02               	comf	___awmod@dividend+1,f,c
  4717  00326E  B0D8               	btfsc	status,0,c
  4718  003270  2A02               	incf	___awmod@dividend+1,f,c
  4719  003272                     l2853:
  4720  003272  C001  F001         	movff	___awmod@dividend,?___awmod
  4721  003276  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4722  00327A  0012               	return	
  4723  00327C                     __end_of___awmod:
  4724                           	opt stack 0
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           indf2	equ	0xFDF
  4734                           postinc2	equ	0xFDE
  4735                           postdec2	equ	0xFDD
  4736                           fsr2h	equ	0xFDA
  4737                           fsr2l	equ	0xFD9
  4738                           status	equ	0xFD8
  4739                           
  4740 ;; *************** function ___awdiv *****************
  4741 ;; Defined at:
  4742 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  dividend        2    6[COMRAM] int 
  4745 ;;  divisor         2    8[COMRAM] int 
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;  quotient        2   12[COMRAM] int 
  4748 ;;  sign            1   11[COMRAM] unsigned char 
  4749 ;;  counter         1   10[COMRAM] unsigned char 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  2    6[COMRAM] int 
  4752 ;; Registers used:
  4753 ;;		wreg, status,2, status,0
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;Total ram usage:        8 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; This function calls:
  4766 ;;		Nothing
  4767 ;; This function is called by:
  4768 ;;		_fround
  4769 ;;		_scale
  4770 ;;		_sprintf
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text8
  4775  003106                     __ptext8:
  4776                           	opt stack 0
  4777  003106                     ___awdiv:
  4778                           	opt stack 28
  4779                           
  4780                           ;incstack = 0
  4781  003106  0E00               	movlw	0
  4782  003108  6E0C               	movwf	___awdiv@sign,c
  4783  00310A  AE0A               	btfss	___awdiv@divisor+1,7,c
  4784  00310C  D006               	goto	l2785
  4785  00310E  6C09               	negf	___awdiv@divisor,c
  4786  003110  1E0A               	comf	___awdiv@divisor+1,f,c
  4787  003112  B0D8               	btfsc	status,0,c
  4788  003114  2A0A               	incf	___awdiv@divisor+1,f,c
  4789  003116  0E01               	movlw	1
  4790  003118  6E0C               	movwf	___awdiv@sign,c
  4791  00311A                     l2785:
  4792  00311A  AE08               	btfss	___awdiv@dividend+1,7,c
  4793  00311C  D006               	goto	l2791
  4794  00311E  6C07               	negf	___awdiv@dividend,c
  4795  003120  1E08               	comf	___awdiv@dividend+1,f,c
  4796  003122  B0D8               	btfsc	status,0,c
  4797  003124  2A08               	incf	___awdiv@dividend+1,f,c
  4798  003126  0E01               	movlw	1
  4799  003128  1A0C               	xorwf	___awdiv@sign,f,c
  4800  00312A                     l2791:
  4801  00312A  0E00               	movlw	0
  4802  00312C  6E0E               	movwf	___awdiv@quotient+1,c
  4803  00312E  0E00               	movlw	0
  4804  003130  6E0D               	movwf	___awdiv@quotient,c
  4805  003132  5009               	movf	___awdiv@divisor,w,c
  4806  003134  100A               	iorwf	___awdiv@divisor+1,w,c
  4807  003136  B4D8               	btfsc	status,2,c
  4808  003138  D01C               	goto	l2813
  4809  00313A  0E01               	movlw	1
  4810  00313C  6E0B               	movwf	___awdiv@counter,c
  4811  00313E  D004               	goto	l2799
  4812  003140                     l2797:
  4813  003140  90D8               	bcf	status,0,c
  4814  003142  3609               	rlcf	___awdiv@divisor,f,c
  4815  003144  360A               	rlcf	___awdiv@divisor+1,f,c
  4816  003146  2A0B               	incf	___awdiv@counter,f,c
  4817  003148                     l2799:
  4818  003148  AE0A               	btfss	___awdiv@divisor+1,7,c
  4819  00314A  D7FA               	goto	l2797
  4820  00314C                     l2801:
  4821  00314C  90D8               	bcf	status,0,c
  4822  00314E  360D               	rlcf	___awdiv@quotient,f,c
  4823  003150  360E               	rlcf	___awdiv@quotient+1,f,c
  4824  003152  5009               	movf	___awdiv@divisor,w,c
  4825  003154  5C07               	subwf	___awdiv@dividend,w,c
  4826  003156  500A               	movf	___awdiv@divisor+1,w,c
  4827  003158  5808               	subwfb	___awdiv@dividend+1,w,c
  4828  00315A  A0D8               	btfss	status,0,c
  4829  00315C  D005               	goto	l2809
  4830  00315E  5009               	movf	___awdiv@divisor,w,c
  4831  003160  5E07               	subwf	___awdiv@dividend,f,c
  4832  003162  500A               	movf	___awdiv@divisor+1,w,c
  4833  003164  5A08               	subwfb	___awdiv@dividend+1,f,c
  4834  003166  800D               	bsf	___awdiv@quotient,0,c
  4835  003168                     l2809:
  4836  003168  90D8               	bcf	status,0,c
  4837  00316A  320A               	rrcf	___awdiv@divisor+1,f,c
  4838  00316C  3209               	rrcf	___awdiv@divisor,f,c
  4839  00316E  2E0B               	decfsz	___awdiv@counter,f,c
  4840  003170  D7ED               	goto	l2801
  4841  003172                     l2813:
  4842  003172  500C               	movf	___awdiv@sign,w,c
  4843  003174  B4D8               	btfsc	status,2,c
  4844  003176  D004               	goto	l2817
  4845  003178  6C0D               	negf	___awdiv@quotient,c
  4846  00317A  1E0E               	comf	___awdiv@quotient+1,f,c
  4847  00317C  B0D8               	btfsc	status,0,c
  4848  00317E  2A0E               	incf	___awdiv@quotient+1,f,c
  4849  003180                     l2817:
  4850  003180  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4851  003184  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4852  003188  0012               	return	
  4853  00318A                     __end_of___awdiv:
  4854                           	opt stack 0
  4855                           tblptru	equ	0xFF8
  4856                           tblptrh	equ	0xFF7
  4857                           tblptrl	equ	0xFF6
  4858                           tablat	equ	0xFF5
  4859                           prodh	equ	0xFF4
  4860                           prodl	equ	0xFF3
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           indf2	equ	0xFDF
  4864                           postinc2	equ	0xFDE
  4865                           postdec2	equ	0xFDD
  4866                           fsr2h	equ	0xFDA
  4867                           fsr2l	equ	0xFD9
  4868                           status	equ	0xFD8
  4869                           
  4870 ;; *************** function __tdiv_to_l_ *****************
  4871 ;; Defined at:
  4872 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  f1              3    0[COMRAM] float 
  4875 ;;  f2              3    3[COMRAM] float 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  quot            4    9[COMRAM] unsigned long 
  4878 ;;  exp1            1   14[COMRAM] unsigned char 
  4879 ;;  cntr            1   13[COMRAM] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  4    0[COMRAM] unsigned long 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4889 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;Total ram usage:       15 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_sprintf
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text9
  4903  0029FC                     __ptext9:
  4904                           	opt stack 0
  4905  0029FC                     __tdiv_to_l_:
  4906                           	opt stack 29
  4907                           
  4908                           ;incstack = 0
  4909  0029FC  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4910  002A00  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4911  002A02  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4912  002A04  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4913  002A06  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4914  002A08  E301               	bnc	u2551
  4915  002A0A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4916  002A0C                     u2551:
  4917  002A0C  5007               	movf	??__tdiv_to_l_,w,c
  4918  002A0E  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4919  002A10  500F               	movf	__tdiv_to_l_@exp1,w,c
  4920  002A12  A4D8               	btfss	status,2,c
  4921  002A14  D009               	goto	l3027
  4922  002A16  0E00               	movlw	0
  4923  002A18  6E01               	movwf	?__tdiv_to_l_,c
  4924  002A1A  0E00               	movlw	0
  4925  002A1C  6E02               	movwf	?__tdiv_to_l_+1,c
  4926  002A1E  0E00               	movlw	0
  4927  002A20  6E03               	movwf	?__tdiv_to_l_+2,c
  4928  002A22  0E00               	movlw	0
  4929  002A24  6E04               	movwf	?__tdiv_to_l_+3,c
  4930  002A26  0012               	return	
  4931  002A28                     l3027:
  4932  002A28  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4933  002A2C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4934  002A2E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4935  002A30  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4936  002A32  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4937  002A34  E301               	bnc	u2571
  4938  002A36  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4939  002A38                     u2571:
  4940  002A38  5007               	movf	??__tdiv_to_l_,w,c
  4941  002A3A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4942  002A3C  500E               	movf	__tdiv_to_l_@cntr,w,c
  4943  002A3E  A4D8               	btfss	status,2,c
  4944  002A40  D009               	goto	l3033
  4945  002A42  0E00               	movlw	0
  4946  002A44  6E01               	movwf	?__tdiv_to_l_,c
  4947  002A46  0E00               	movlw	0
  4948  002A48  6E02               	movwf	?__tdiv_to_l_+1,c
  4949  002A4A  0E00               	movlw	0
  4950  002A4C  6E03               	movwf	?__tdiv_to_l_+2,c
  4951  002A4E  0E00               	movlw	0
  4952  002A50  6E04               	movwf	?__tdiv_to_l_+3,c
  4953  002A52  0012               	return	
  4954  002A54                     l3033:
  4955  002A54  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4956  002A56  0EFF               	movlw	255
  4957  002A58  1601               	andwf	__tdiv_to_l_@f1,f,c
  4958  002A5A  0EFF               	movlw	255
  4959  002A5C  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4960  002A5E  0E00               	movlw	0
  4961  002A60  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4962  002A62  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4963  002A64  0EFF               	movlw	255
  4964  002A66  1604               	andwf	__tdiv_to_l_@f2,f,c
  4965  002A68  0EFF               	movlw	255
  4966  002A6A  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4967  002A6C  0E00               	movlw	0
  4968  002A6E  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4969  002A70  0E00               	movlw	0
  4970  002A72  6E0A               	movwf	__tdiv_to_l_@quot,c
  4971  002A74  0E00               	movlw	0
  4972  002A76  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4973  002A78  0E00               	movlw	0
  4974  002A7A  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4975  002A7C  0E00               	movlw	0
  4976  002A7E  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4977  002A80  0E7F               	movlw	127
  4978  002A82  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4979  002A84  500E               	movf	__tdiv_to_l_@cntr,w,c
  4980  002A86  0F98               	addlw	152
  4981  002A88  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4982  002A8A  0E18               	movlw	24
  4983  002A8C  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4984  002A8E                     l743:
  4985  002A8E  90D8               	bcf	status,0,c
  4986  002A90  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4987  002A92  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4988  002A94  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4989  002A96  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4990  002A98  5004               	movf	__tdiv_to_l_@f2,w,c
  4991  002A9A  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4992  002A9C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4993  002A9E  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4994  002AA0  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4995  002AA2  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4996  002AA4  A0D8               	btfss	status,0,c
  4997  002AA6  D007               	goto	l744
  4998  002AA8  5004               	movf	__tdiv_to_l_@f2,w,c
  4999  002AAA  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5000  002AAC  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5001  002AAE  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5002  002AB0  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5003  002AB2  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5004  002AB4  800A               	bsf	__tdiv_to_l_@quot,0,c
  5005  002AB6                     l744:
  5006  002AB6  90D8               	bcf	status,0,c
  5007  002AB8  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5008  002ABA  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5009  002ABC  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5010  002ABE  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5011  002AC0  D7E6               	goto	l743
  5012  002AC2  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5013  002AC4  D016               	goto	l3067
  5014  002AC6  500F               	movf	__tdiv_to_l_@exp1,w,c
  5015  002AC8  0A80               	xorlw	128
  5016  002ACA  0F97               	addlw	151
  5017  002ACC  B0D8               	btfsc	status,0,c
  5018  002ACE  D009               	goto	l3063
  5019  002AD0  0E00               	movlw	0
  5020  002AD2  6E01               	movwf	?__tdiv_to_l_,c
  5021  002AD4  0E00               	movlw	0
  5022  002AD6  6E02               	movwf	?__tdiv_to_l_+1,c
  5023  002AD8  0E00               	movlw	0
  5024  002ADA  6E03               	movwf	?__tdiv_to_l_+2,c
  5025  002ADC  0E00               	movlw	0
  5026  002ADE  6E04               	movwf	?__tdiv_to_l_+3,c
  5027  002AE0  0012               	return	
  5028  002AE2                     l3063:
  5029  002AE2  90D8               	bcf	status,0,c
  5030  002AE4  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5031  002AE6  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5032  002AE8  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5033  002AEA  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5034  002AEC  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5035  002AEE  D7F9               	goto	l3063
  5036  002AF0  D015               	goto	l750
  5037  002AF2                     l3067:
  5038  002AF2  0E17               	movlw	23
  5039  002AF4  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5040  002AF6  D00F               	goto	l3075
  5041  002AF8  0E00               	movlw	0
  5042  002AFA  6E01               	movwf	?__tdiv_to_l_,c
  5043  002AFC  0E00               	movlw	0
  5044  002AFE  6E02               	movwf	?__tdiv_to_l_+1,c
  5045  002B00  0E00               	movlw	0
  5046  002B02  6E03               	movwf	?__tdiv_to_l_+2,c
  5047  002B04  0E00               	movlw	0
  5048  002B06  6E04               	movwf	?__tdiv_to_l_+3,c
  5049  002B08  0012               	return	
  5050  002B0A                     l3073:
  5051  002B0A  90D8               	bcf	status,0,c
  5052  002B0C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5053  002B0E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5054  002B10  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5055  002B12  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5056  002B14  060F               	decf	__tdiv_to_l_@exp1,f,c
  5057  002B16                     l3075:
  5058  002B16  500F               	movf	__tdiv_to_l_@exp1,w,c
  5059  002B18  A4D8               	btfss	status,2,c
  5060  002B1A  D7F7               	goto	l3073
  5061  002B1C                     l750:
  5062  002B1C  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5063  002B20  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5064  002B24  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5065  002B28  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5066  002B2C  0012               	return		;funcret
  5067  002B2E                     __end_of__tdiv_to_l_:
  5068                           	opt stack 0
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           postinc0	equ	0xFEE
  5076                           wreg	equ	0xFE8
  5077                           indf2	equ	0xFDF
  5078                           postinc2	equ	0xFDE
  5079                           postdec2	equ	0xFDD
  5080                           fsr2h	equ	0xFDA
  5081                           fsr2l	equ	0xFD9
  5082                           status	equ	0xFD8
  5083                           
  5084 ;; *************** function __div_to_l_ *****************
  5085 ;; Defined at:
  5086 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  f1              3    0[COMRAM] unsigned long 
  5089 ;;  f2              3    3[COMRAM] unsigned long 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  quot            4    6[COMRAM] unsigned long 
  5092 ;;  exp1            1   11[COMRAM] unsigned char 
  5093 ;;  cntr            1   10[COMRAM] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  4    0[COMRAM] unsigned long 
  5096 ;; Registers used:
  5097 ;;		wreg, status,2, status,0
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5103 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;Total ram usage:       12 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; This function calls:
  5110 ;;		Nothing
  5111 ;; This function is called by:
  5112 ;;		_sprintf
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text10
  5117  002B2E                     __ptext10:
  5118                           	opt stack 0
  5119  002B2E                     __div_to_l_:
  5120                           	opt stack 29
  5121                           
  5122                           ;incstack = 0
  5123  002B2E  3403               	rlcf	__div_to_l_@f1+2,w,c
  5124  002B30  3404               	rlcf	__div_to_l_@f1+3,w,c
  5125  002B32  6E0C               	movwf	__div_to_l_@exp1,c
  5126  002B34  500C               	movf	__div_to_l_@exp1,w,c
  5127  002B36  A4D8               	btfss	status,2,c
  5128  002B38  D009               	goto	l3083
  5129  002B3A  0E00               	movlw	0
  5130  002B3C  6E01               	movwf	?__div_to_l_,c
  5131  002B3E  0E00               	movlw	0
  5132  002B40  6E02               	movwf	?__div_to_l_+1,c
  5133  002B42  0E00               	movlw	0
  5134  002B44  6E03               	movwf	?__div_to_l_+2,c
  5135  002B46  0E00               	movlw	0
  5136  002B48  6E04               	movwf	?__div_to_l_+3,c
  5137  002B4A  0012               	return	
  5138  002B4C                     l3083:
  5139  002B4C  3406               	rlcf	__div_to_l_@f2+2,w,c
  5140  002B4E  3407               	rlcf	__div_to_l_@f2+3,w,c
  5141  002B50  6E0B               	movwf	__div_to_l_@cntr,c
  5142  002B52  500B               	movf	__div_to_l_@cntr,w,c
  5143  002B54  A4D8               	btfss	status,2,c
  5144  002B56  D009               	goto	l3089
  5145  002B58  0E00               	movlw	0
  5146  002B5A  6E01               	movwf	?__div_to_l_,c
  5147  002B5C  0E00               	movlw	0
  5148  002B5E  6E02               	movwf	?__div_to_l_+1,c
  5149  002B60  0E00               	movlw	0
  5150  002B62  6E03               	movwf	?__div_to_l_+2,c
  5151  002B64  0E00               	movlw	0
  5152  002B66  6E04               	movwf	?__div_to_l_+3,c
  5153  002B68  0012               	return	
  5154  002B6A                     l3089:
  5155  002B6A  8E03               	bsf	__div_to_l_@f1+2,7,c
  5156  002B6C  0EFF               	movlw	255
  5157  002B6E  1601               	andwf	__div_to_l_@f1,f,c
  5158  002B70  0EFF               	movlw	255
  5159  002B72  1602               	andwf	__div_to_l_@f1+1,f,c
  5160  002B74  0EFF               	movlw	255
  5161  002B76  1603               	andwf	__div_to_l_@f1+2,f,c
  5162  002B78  0E00               	movlw	0
  5163  002B7A  1604               	andwf	__div_to_l_@f1+3,f,c
  5164  002B7C  8E06               	bsf	__div_to_l_@f2+2,7,c
  5165  002B7E  0EFF               	movlw	255
  5166  002B80  1604               	andwf	__div_to_l_@f2,f,c
  5167  002B82  0EFF               	movlw	255
  5168  002B84  1605               	andwf	__div_to_l_@f2+1,f,c
  5169  002B86  0EFF               	movlw	255
  5170  002B88  1606               	andwf	__div_to_l_@f2+2,f,c
  5171  002B8A  0E00               	movlw	0
  5172  002B8C  1607               	andwf	__div_to_l_@f2+3,f,c
  5173  002B8E  0E00               	movlw	0
  5174  002B90  6E07               	movwf	__div_to_l_@quot,c
  5175  002B92  0E00               	movlw	0
  5176  002B94  6E08               	movwf	__div_to_l_@quot+1,c
  5177  002B96  0E00               	movlw	0
  5178  002B98  6E09               	movwf	__div_to_l_@quot+2,c
  5179  002B9A  0E00               	movlw	0
  5180  002B9C  6E0A               	movwf	__div_to_l_@quot+3,c
  5181  002B9E  0E7F               	movlw	127
  5182  002BA0  5E0C               	subwf	__div_to_l_@exp1,f,c
  5183  002BA2  500B               	movf	__div_to_l_@cntr,w,c
  5184  002BA4  0FA0               	addlw	160
  5185  002BA6  5E0C               	subwf	__div_to_l_@exp1,f,c
  5186  002BA8  0E20               	movlw	32
  5187  002BAA  6E0B               	movwf	__div_to_l_@cntr,c
  5188  002BAC                     l3103:
  5189  002BAC  90D8               	bcf	status,0,c
  5190  002BAE  3607               	rlcf	__div_to_l_@quot,f,c
  5191  002BB0  3608               	rlcf	__div_to_l_@quot+1,f,c
  5192  002BB2  3609               	rlcf	__div_to_l_@quot+2,f,c
  5193  002BB4  360A               	rlcf	__div_to_l_@quot+3,f,c
  5194  002BB6  5004               	movf	__div_to_l_@f2,w,c
  5195  002BB8  5C01               	subwf	__div_to_l_@f1,w,c
  5196  002BBA  5005               	movf	__div_to_l_@f2+1,w,c
  5197  002BBC  5802               	subwfb	__div_to_l_@f1+1,w,c
  5198  002BBE  5006               	movf	__div_to_l_@f2+2,w,c
  5199  002BC0  5803               	subwfb	__div_to_l_@f1+2,w,c
  5200  002BC2  5007               	movf	__div_to_l_@f2+3,w,c
  5201  002BC4  5804               	subwfb	__div_to_l_@f1+3,w,c
  5202  002BC6  A0D8               	btfss	status,0,c
  5203  002BC8  D009               	goto	l3111
  5204  002BCA  5004               	movf	__div_to_l_@f2,w,c
  5205  002BCC  5E01               	subwf	__div_to_l_@f1,f,c
  5206  002BCE  5005               	movf	__div_to_l_@f2+1,w,c
  5207  002BD0  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5208  002BD2  5006               	movf	__div_to_l_@f2+2,w,c
  5209  002BD4  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5210  002BD6  5007               	movf	__div_to_l_@f2+3,w,c
  5211  002BD8  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5212  002BDA  8007               	bsf	__div_to_l_@quot,0,c
  5213  002BDC                     l3111:
  5214  002BDC  90D8               	bcf	status,0,c
  5215  002BDE  3601               	rlcf	__div_to_l_@f1,f,c
  5216  002BE0  3602               	rlcf	__div_to_l_@f1+1,f,c
  5217  002BE2  3603               	rlcf	__div_to_l_@f1+2,f,c
  5218  002BE4  3604               	rlcf	__div_to_l_@f1+3,f,c
  5219  002BE6  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5220  002BE8  D7E1               	goto	l3103
  5221  002BEA  AE0C               	btfss	__div_to_l_@exp1,7,c
  5222  002BEC  D016               	goto	l3127
  5223  002BEE  500C               	movf	__div_to_l_@exp1,w,c
  5224  002BF0  0A80               	xorlw	128
  5225  002BF2  0F9F               	addlw	159
  5226  002BF4  B0D8               	btfsc	status,0,c
  5227  002BF6  D009               	goto	l3123
  5228  002BF8  0E00               	movlw	0
  5229  002BFA  6E01               	movwf	?__div_to_l_,c
  5230  002BFC  0E00               	movlw	0
  5231  002BFE  6E02               	movwf	?__div_to_l_+1,c
  5232  002C00  0E00               	movlw	0
  5233  002C02  6E03               	movwf	?__div_to_l_+2,c
  5234  002C04  0E00               	movlw	0
  5235  002C06  6E04               	movwf	?__div_to_l_+3,c
  5236  002C08  0012               	return	
  5237  002C0A                     l3123:
  5238  002C0A  90D8               	bcf	status,0,c
  5239  002C0C  320A               	rrcf	__div_to_l_@quot+3,f,c
  5240  002C0E  3209               	rrcf	__div_to_l_@quot+2,f,c
  5241  002C10  3208               	rrcf	__div_to_l_@quot+1,f,c
  5242  002C12  3207               	rrcf	__div_to_l_@quot,f,c
  5243  002C14  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5244  002C16  D7F9               	goto	l3123
  5245  002C18  D015               	goto	l646
  5246  002C1A                     l3127:
  5247  002C1A  0E1F               	movlw	31
  5248  002C1C  640C               	cpfsgt	__div_to_l_@exp1,c
  5249  002C1E  D00F               	goto	l3135
  5250  002C20  0E00               	movlw	0
  5251  002C22  6E01               	movwf	?__div_to_l_,c
  5252  002C24  0E00               	movlw	0
  5253  002C26  6E02               	movwf	?__div_to_l_+1,c
  5254  002C28  0E00               	movlw	0
  5255  002C2A  6E03               	movwf	?__div_to_l_+2,c
  5256  002C2C  0E00               	movlw	0
  5257  002C2E  6E04               	movwf	?__div_to_l_+3,c
  5258  002C30  0012               	return	
  5259  002C32                     l3133:
  5260  002C32  90D8               	bcf	status,0,c
  5261  002C34  3607               	rlcf	__div_to_l_@quot,f,c
  5262  002C36  3608               	rlcf	__div_to_l_@quot+1,f,c
  5263  002C38  3609               	rlcf	__div_to_l_@quot+2,f,c
  5264  002C3A  360A               	rlcf	__div_to_l_@quot+3,f,c
  5265  002C3C  060C               	decf	__div_to_l_@exp1,f,c
  5266  002C3E                     l3135:
  5267  002C3E  500C               	movf	__div_to_l_@exp1,w,c
  5268  002C40  A4D8               	btfss	status,2,c
  5269  002C42  D7F7               	goto	l3133
  5270  002C44                     l646:
  5271  002C44  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5272  002C48  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5273  002C4C  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5274  002C50  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5275  002C54  0012               	return		;funcret
  5276  002C56                     __end_of__div_to_l_:
  5277                           	opt stack 0
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           indf2	equ	0xFDF
  5287                           postinc2	equ	0xFDE
  5288                           postdec2	equ	0xFDD
  5289                           fsr2h	equ	0xFDA
  5290                           fsr2l	equ	0xFD9
  5291                           status	equ	0xFD8
  5292                           
  5293 ;; *************** function ___lltoft *****************
  5294 ;; Defined at:
  5295 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;  c               4   35[COMRAM] unsigned long 
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;  exp             1   43[COMRAM] unsigned char 
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  3   35[COMRAM] float 
  5302 ;; Registers used:
  5303 ;;		wreg, status,2, status,0, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;Total ram usage:        9 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    1
  5316 ;; This function calls:
  5317 ;;		___ftpack
  5318 ;; This function is called by:
  5319 ;;		_sprintf
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           	psect	text11
  5324  003340                     __ptext11:
  5325                           	opt stack 0
  5326  003340                     ___lltoft:
  5327                           	opt stack 28
  5328                           
  5329                           ;incstack = 0
  5330  003340  0E8E               	movlw	142
  5331  003342  6E2C               	movwf	___lltoft@exp,c
  5332  003344  D006               	goto	l3301
  5333  003346                     l3299:
  5334  003346  90D8               	bcf	status,0,c
  5335  003348  3227               	rrcf	___lltoft@c+3,f,c
  5336  00334A  3226               	rrcf	___lltoft@c+2,f,c
  5337  00334C  3225               	rrcf	___lltoft@c+1,f,c
  5338  00334E  3224               	rrcf	___lltoft@c,f,c
  5339  003350  2A2C               	incf	___lltoft@exp,f,c
  5340  003352                     l3301:
  5341  003352  0E00               	movlw	0
  5342  003354  1424               	andwf	___lltoft@c,w,c
  5343  003356  6E28               	movwf	??___lltoft& (0+255),c
  5344  003358  0E00               	movlw	0
  5345  00335A  1425               	andwf	___lltoft@c+1,w,c
  5346  00335C  6E29               	movwf	(??___lltoft+1)& (0+255),c
  5347  00335E  0E00               	movlw	0
  5348  003360  1426               	andwf	___lltoft@c+2,w,c
  5349  003362  6E2A               	movwf	(??___lltoft+2)& (0+255),c
  5350  003364  0EFF               	movlw	255
  5351  003366  1427               	andwf	___lltoft@c+3,w,c
  5352  003368  6E2B               	movwf	(??___lltoft+3)& (0+255),c
  5353  00336A  5028               	movf	??___lltoft,w,c
  5354  00336C  1029               	iorwf	??___lltoft+1,w,c
  5355  00336E  102A               	iorwf	??___lltoft+2,w,c
  5356  003370  102B               	iorwf	??___lltoft+3,w,c
  5357  003372  A4D8               	btfss	status,2,c
  5358  003374  D7E8               	goto	l3299
  5359  003376  C024  F001         	movff	___lltoft@c,___ftpack@arg
  5360  00337A  C025  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5361  00337E  C026  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5362  003382  C02C  F004         	movff	___lltoft@exp,___ftpack@exp
  5363  003386  0E00               	movlw	0
  5364  003388  6E05               	movwf	___ftpack@sign,c
  5365  00338A  EC92  F017         	call	___ftpack	;wreg free
  5366  00338E  C001  F024         	movff	?___ftpack,?___lltoft
  5367  003392  C002  F025         	movff	?___ftpack+1,?___lltoft+1
  5368  003396  C003  F026         	movff	?___ftpack+2,?___lltoft+2
  5369  00339A  0012               	return	
  5370  00339C                     __end_of___lltoft:
  5371                           	opt stack 0
  5372                           tblptru	equ	0xFF8
  5373                           tblptrh	equ	0xFF7
  5374                           tblptrl	equ	0xFF6
  5375                           tablat	equ	0xFF5
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           postinc0	equ	0xFEE
  5379                           wreg	equ	0xFE8
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function ___llmod *****************
  5388 ;; Defined at:
  5389 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  dividend        4    0[COMRAM] unsigned long 
  5392 ;;  divisor         4    4[COMRAM] unsigned long 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;  counter         1    8[COMRAM] unsigned char 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  4    0[COMRAM] unsigned long 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5404 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;Total ram usage:        9 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; This function calls:
  5411 ;;		Nothing
  5412 ;; This function is called by:
  5413 ;;		_sprintf
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text12
  5418  00327C                     __ptext12:
  5419                           	opt stack 0
  5420  00327C                     ___llmod:
  5421                           	opt stack 29
  5422                           
  5423                           ;incstack = 0
  5424  00327C  5005               	movf	___llmod@divisor,w,c
  5425  00327E  1006               	iorwf	___llmod@divisor+1,w,c
  5426  003280  1007               	iorwf	___llmod@divisor+2,w,c
  5427  003282  1008               	iorwf	___llmod@divisor+3,w,c
  5428  003284  B4D8               	btfsc	status,2,c
  5429  003286  D024               	goto	l835
  5430  003288  0E01               	movlw	1
  5431  00328A  6E09               	movwf	___llmod@counter,c
  5432  00328C  D006               	goto	l3287
  5433  00328E                     l3285:
  5434  00328E  90D8               	bcf	status,0,c
  5435  003290  3605               	rlcf	___llmod@divisor,f,c
  5436  003292  3606               	rlcf	___llmod@divisor+1,f,c
  5437  003294  3607               	rlcf	___llmod@divisor+2,f,c
  5438  003296  3608               	rlcf	___llmod@divisor+3,f,c
  5439  003298  2A09               	incf	___llmod@counter,f,c
  5440  00329A                     l3287:
  5441  00329A  AE08               	btfss	___llmod@divisor+3,7,c
  5442  00329C  D7F8               	goto	l3285
  5443  00329E                     l3289:
  5444  00329E  5005               	movf	___llmod@divisor,w,c
  5445  0032A0  5C01               	subwf	___llmod@dividend,w,c
  5446  0032A2  5006               	movf	___llmod@divisor+1,w,c
  5447  0032A4  5802               	subwfb	___llmod@dividend+1,w,c
  5448  0032A6  5007               	movf	___llmod@divisor+2,w,c
  5449  0032A8  5803               	subwfb	___llmod@dividend+2,w,c
  5450  0032AA  5008               	movf	___llmod@divisor+3,w,c
  5451  0032AC  5804               	subwfb	___llmod@dividend+3,w,c
  5452  0032AE  A0D8               	btfss	status,0,c
  5453  0032B0  D008               	goto	l3293
  5454  0032B2  5005               	movf	___llmod@divisor,w,c
  5455  0032B4  5E01               	subwf	___llmod@dividend,f,c
  5456  0032B6  5006               	movf	___llmod@divisor+1,w,c
  5457  0032B8  5A02               	subwfb	___llmod@dividend+1,f,c
  5458  0032BA  5007               	movf	___llmod@divisor+2,w,c
  5459  0032BC  5A03               	subwfb	___llmod@dividend+2,f,c
  5460  0032BE  5008               	movf	___llmod@divisor+3,w,c
  5461  0032C0  5A04               	subwfb	___llmod@dividend+3,f,c
  5462  0032C2                     l3293:
  5463  0032C2  90D8               	bcf	status,0,c
  5464  0032C4  3208               	rrcf	___llmod@divisor+3,f,c
  5465  0032C6  3207               	rrcf	___llmod@divisor+2,f,c
  5466  0032C8  3206               	rrcf	___llmod@divisor+1,f,c
  5467  0032CA  3205               	rrcf	___llmod@divisor,f,c
  5468  0032CC  2E09               	decfsz	___llmod@counter,f,c
  5469  0032CE  D7E7               	goto	l3289
  5470  0032D0                     l835:
  5471  0032D0  C001  F001         	movff	___llmod@dividend,?___llmod
  5472  0032D4  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5473  0032D8  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5474  0032DC  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5475  0032E0  0012               	return		;funcret
  5476  0032E2                     __end_of___llmod:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           postinc0	equ	0xFEE
  5485                           wreg	equ	0xFE8
  5486                           indf2	equ	0xFDF
  5487                           postinc2	equ	0xFDE
  5488                           postdec2	equ	0xFDD
  5489                           fsr2h	equ	0xFDA
  5490                           fsr2l	equ	0xFD9
  5491                           status	equ	0xFD8
  5492                           
  5493 ;; *************** function ___lldiv *****************
  5494 ;; Defined at:
  5495 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  dividend        4    0[COMRAM] unsigned long 
  5498 ;;  divisor         4    4[COMRAM] unsigned long 
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  quotient        4    8[COMRAM] unsigned long 
  5501 ;;  counter         1   12[COMRAM] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  4    0[COMRAM] unsigned long 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, status,0
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5511 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;Total ram usage:       13 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; This function calls:
  5518 ;;		Nothing
  5519 ;; This function is called by:
  5520 ;;		_sprintf
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text13
  5525  00318A                     __ptext13:
  5526                           	opt stack 0
  5527  00318A                     ___lldiv:
  5528                           	opt stack 29
  5529                           
  5530                           ;incstack = 0
  5531  00318A  0E00               	movlw	0
  5532  00318C  6E09               	movwf	___lldiv@quotient,c
  5533  00318E  0E00               	movlw	0
  5534  003190  6E0A               	movwf	___lldiv@quotient+1,c
  5535  003192  0E00               	movlw	0
  5536  003194  6E0B               	movwf	___lldiv@quotient+2,c
  5537  003196  0E00               	movlw	0
  5538  003198  6E0C               	movwf	___lldiv@quotient+3,c
  5539  00319A  5005               	movf	___lldiv@divisor,w,c
  5540  00319C  1006               	iorwf	___lldiv@divisor+1,w,c
  5541  00319E  1007               	iorwf	___lldiv@divisor+2,w,c
  5542  0031A0  1008               	iorwf	___lldiv@divisor+3,w,c
  5543  0031A2  B4D8               	btfsc	status,2,c
  5544  0031A4  D02A               	goto	l825
  5545  0031A6  0E01               	movlw	1
  5546  0031A8  6E0D               	movwf	___lldiv@counter,c
  5547  0031AA  D006               	goto	l3267
  5548  0031AC                     l3265:
  5549  0031AC  90D8               	bcf	status,0,c
  5550  0031AE  3605               	rlcf	___lldiv@divisor,f,c
  5551  0031B0  3606               	rlcf	___lldiv@divisor+1,f,c
  5552  0031B2  3607               	rlcf	___lldiv@divisor+2,f,c
  5553  0031B4  3608               	rlcf	___lldiv@divisor+3,f,c
  5554  0031B6  2A0D               	incf	___lldiv@counter,f,c
  5555  0031B8                     l3267:
  5556  0031B8  AE08               	btfss	___lldiv@divisor+3,7,c
  5557  0031BA  D7F8               	goto	l3265
  5558  0031BC                     l3269:
  5559  0031BC  90D8               	bcf	status,0,c
  5560  0031BE  3609               	rlcf	___lldiv@quotient,f,c
  5561  0031C0  360A               	rlcf	___lldiv@quotient+1,f,c
  5562  0031C2  360B               	rlcf	___lldiv@quotient+2,f,c
  5563  0031C4  360C               	rlcf	___lldiv@quotient+3,f,c
  5564  0031C6  5005               	movf	___lldiv@divisor,w,c
  5565  0031C8  5C01               	subwf	___lldiv@dividend,w,c
  5566  0031CA  5006               	movf	___lldiv@divisor+1,w,c
  5567  0031CC  5802               	subwfb	___lldiv@dividend+1,w,c
  5568  0031CE  5007               	movf	___lldiv@divisor+2,w,c
  5569  0031D0  5803               	subwfb	___lldiv@dividend+2,w,c
  5570  0031D2  5008               	movf	___lldiv@divisor+3,w,c
  5571  0031D4  5804               	subwfb	___lldiv@dividend+3,w,c
  5572  0031D6  A0D8               	btfss	status,0,c
  5573  0031D8  D009               	goto	l3277
  5574  0031DA  5005               	movf	___lldiv@divisor,w,c
  5575  0031DC  5E01               	subwf	___lldiv@dividend,f,c
  5576  0031DE  5006               	movf	___lldiv@divisor+1,w,c
  5577  0031E0  5A02               	subwfb	___lldiv@dividend+1,f,c
  5578  0031E2  5007               	movf	___lldiv@divisor+2,w,c
  5579  0031E4  5A03               	subwfb	___lldiv@dividend+2,f,c
  5580  0031E6  5008               	movf	___lldiv@divisor+3,w,c
  5581  0031E8  5A04               	subwfb	___lldiv@dividend+3,f,c
  5582  0031EA  8009               	bsf	___lldiv@quotient,0,c
  5583  0031EC                     l3277:
  5584  0031EC  90D8               	bcf	status,0,c
  5585  0031EE  3208               	rrcf	___lldiv@divisor+3,f,c
  5586  0031F0  3207               	rrcf	___lldiv@divisor+2,f,c
  5587  0031F2  3206               	rrcf	___lldiv@divisor+1,f,c
  5588  0031F4  3205               	rrcf	___lldiv@divisor,f,c
  5589  0031F6  2E0D               	decfsz	___lldiv@counter,f,c
  5590  0031F8  D7E1               	goto	l3269
  5591  0031FA                     l825:
  5592  0031FA  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5593  0031FE  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5594  003202  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5595  003206  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5596  00320A  0012               	return		;funcret
  5597  00320C                     __end_of___lldiv:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           postinc0	equ	0xFEE
  5606                           wreg	equ	0xFE8
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function ___fttol *****************
  5615 ;; Defined at:
  5616 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  f1              3   20[COMRAM] float 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  lval            4   30[COMRAM] unsigned long 
  5621 ;;  exp1            1   34[COMRAM] unsigned char 
  5622 ;;  sign1           1   29[COMRAM] unsigned char 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  4   20[COMRAM] long 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;Total ram usage:       15 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_sprintf
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text14
  5646  002D4A                     __ptext14:
  5647                           	opt stack 0
  5648  002D4A                     ___fttol:
  5649                           	opt stack 29
  5650                           
  5651                           ;incstack = 0
  5652  002D4A  C017  F019         	movff	___fttol@f1+2,??___fttol
  5653  002D4E  6A1A               	clrf	(??___fttol+1)& (0+255),c
  5654  002D50  6A1B               	clrf	(??___fttol+2)& (0+255),c
  5655  002D52  3416               	rlcf	___fttol@f1+1,w,c
  5656  002D54  3619               	rlcf	??___fttol& (0+255),f,c
  5657  002D56  E301               	bnc	u2811
  5658  002D58  801A               	bsf	(??___fttol+1)& (0+255),0,c
  5659  002D5A                     u2811:
  5660  002D5A  5019               	movf	??___fttol,w,c
  5661  002D5C  6E23               	movwf	___fttol@exp1,c
  5662  002D5E  5023               	movf	___fttol@exp1,w,c
  5663  002D60  A4D8               	btfss	status,2,c
  5664  002D62  D009               	goto	l3219
  5665  002D64  0E00               	movlw	0
  5666  002D66  6E15               	movwf	?___fttol,c
  5667  002D68  0E00               	movlw	0
  5668  002D6A  6E16               	movwf	?___fttol+1,c
  5669  002D6C  0E00               	movlw	0
  5670  002D6E  6E17               	movwf	?___fttol+2,c
  5671  002D70  0E00               	movlw	0
  5672  002D72  6E18               	movwf	?___fttol+3,c
  5673  002D74  0012               	return	
  5674  002D76                     l3219:
  5675  002D76  0E17               	movlw	23
  5676  002D78  6E19               	movwf	??___fttol& (0+255),c
  5677  002D7A  C015  F01A         	movff	___fttol@f1,??___fttol+1
  5678  002D7E  C016  F01B         	movff	___fttol@f1+1,??___fttol+2
  5679  002D82  C017  F01C         	movff	___fttol@f1+2,??___fttol+3
  5680  002D86  2819               	incf	??___fttol,w,c
  5681  002D88  6E1D               	movwf	(??___fttol+4)& (0+255),c
  5682  002D8A  D004               	goto	u2830
  5683  002D8C                     u2835:
  5684  002D8C  90D8               	bcf	status,0,c
  5685  002D8E  321C               	rrcf	??___fttol+3,f,c
  5686  002D90  321B               	rrcf	??___fttol+2,f,c
  5687  002D92  321A               	rrcf	??___fttol+1,f,c
  5688  002D94                     u2830:
  5689  002D94  2E1D               	decfsz	(??___fttol+4)& (0+255),f,c
  5690  002D96  D7FA               	goto	u2835
  5691  002D98  501A               	movf	??___fttol+1,w,c
  5692  002D9A  6E1E               	movwf	___fttol@sign1,c
  5693  002D9C  8E16               	bsf	___fttol@f1+1,7,c
  5694  002D9E  0EFF               	movlw	255
  5695  002DA0  1615               	andwf	___fttol@f1,f,c
  5696  002DA2  0EFF               	movlw	255
  5697  002DA4  1616               	andwf	___fttol@f1+1,f,c
  5698  002DA6  0E00               	movlw	0
  5699  002DA8  1617               	andwf	___fttol@f1+2,f,c
  5700  002DAA  5015               	movf	___fttol@f1,w,c
  5701  002DAC  6E1F               	movwf	___fttol@lval,c
  5702  002DAE  5016               	movf	___fttol@f1+1,w,c
  5703  002DB0  6E20               	movwf	___fttol@lval+1,c
  5704  002DB2  5017               	movf	___fttol@f1+2,w,c
  5705  002DB4  6E21               	movwf	___fttol@lval+2,c
  5706  002DB6  6A22               	clrf	___fttol@lval+3,c
  5707  002DB8  0E8E               	movlw	142
  5708  002DBA  5E23               	subwf	___fttol@exp1,f,c
  5709  002DBC  AE23               	btfss	___fttol@exp1,7,c
  5710  002DBE  D016               	goto	l3241
  5711  002DC0  5023               	movf	___fttol@exp1,w,c
  5712  002DC2  0A80               	xorlw	128
  5713  002DC4  0F8F               	addlw	143
  5714  002DC6  B0D8               	btfsc	status,0,c
  5715  002DC8  D009               	goto	l3237
  5716  002DCA  0E00               	movlw	0
  5717  002DCC  6E15               	movwf	?___fttol,c
  5718  002DCE  0E00               	movlw	0
  5719  002DD0  6E16               	movwf	?___fttol+1,c
  5720  002DD2  0E00               	movlw	0
  5721  002DD4  6E17               	movwf	?___fttol+2,c
  5722  002DD6  0E00               	movlw	0
  5723  002DD8  6E18               	movwf	?___fttol+3,c
  5724  002DDA  0012               	return	
  5725  002DDC                     l3237:
  5726  002DDC  90D8               	bcf	status,0,c
  5727  002DDE  3222               	rrcf	___fttol@lval+3,f,c
  5728  002DE0  3221               	rrcf	___fttol@lval+2,f,c
  5729  002DE2  3220               	rrcf	___fttol@lval+1,f,c
  5730  002DE4  321F               	rrcf	___fttol@lval,f,c
  5731  002DE6  3E23               	incfsz	___fttol@exp1,f,c
  5732  002DE8  D7F9               	goto	l3237
  5733  002DEA  D015               	goto	l3251
  5734  002DEC                     l3241:
  5735  002DEC  0E17               	movlw	23
  5736  002DEE  6423               	cpfsgt	___fttol@exp1,c
  5737  002DF0  D00F               	goto	l3249
  5738  002DF2  0E00               	movlw	0
  5739  002DF4  6E15               	movwf	?___fttol,c
  5740  002DF6  0E00               	movlw	0
  5741  002DF8  6E16               	movwf	?___fttol+1,c
  5742  002DFA  0E00               	movlw	0
  5743  002DFC  6E17               	movwf	?___fttol+2,c
  5744  002DFE  0E00               	movlw	0
  5745  002E00  6E18               	movwf	?___fttol+3,c
  5746  002E02  0012               	return	
  5747  002E04                     l3247:
  5748  002E04  90D8               	bcf	status,0,c
  5749  002E06  361F               	rlcf	___fttol@lval,f,c
  5750  002E08  3620               	rlcf	___fttol@lval+1,f,c
  5751  002E0A  3621               	rlcf	___fttol@lval+2,f,c
  5752  002E0C  3622               	rlcf	___fttol@lval+3,f,c
  5753  002E0E  0623               	decf	___fttol@exp1,f,c
  5754  002E10                     l3249:
  5755  002E10  5023               	movf	___fttol@exp1,w,c
  5756  002E12  A4D8               	btfss	status,2,c
  5757  002E14  D7F7               	goto	l3247
  5758  002E16                     l3251:
  5759  002E16  501E               	movf	___fttol@sign1,w,c
  5760  002E18  B4D8               	btfsc	status,2,c
  5761  002E1A  D008               	goto	l3255
  5762  002E1C  1E22               	comf	___fttol@lval+3,f,c
  5763  002E1E  1E21               	comf	___fttol@lval+2,f,c
  5764  002E20  1E20               	comf	___fttol@lval+1,f,c
  5765  002E22  6C1F               	negf	___fttol@lval,c
  5766  002E24  0E00               	movlw	0
  5767  002E26  2220               	addwfc	___fttol@lval+1,f,c
  5768  002E28  2221               	addwfc	___fttol@lval+2,f,c
  5769  002E2A  2222               	addwfc	___fttol@lval+3,f,c
  5770  002E2C                     l3255:
  5771  002E2C  C01F  F015         	movff	___fttol@lval,?___fttol
  5772  002E30  C020  F016         	movff	___fttol@lval+1,?___fttol+1
  5773  002E34  C021  F017         	movff	___fttol@lval+2,?___fttol+2
  5774  002E38  C022  F018         	movff	___fttol@lval+3,?___fttol+3
  5775  002E3C  0012               	return	
  5776  002E3E                     __end_of___fttol:
  5777                           	opt stack 0
  5778                           tblptru	equ	0xFF8
  5779                           tblptrh	equ	0xFF7
  5780                           tblptrl	equ	0xFF6
  5781                           tablat	equ	0xFF5
  5782                           prodh	equ	0xFF4
  5783                           prodl	equ	0xFF3
  5784                           postinc0	equ	0xFEE
  5785                           wreg	equ	0xFE8
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function ___ftsub *****************
  5794 ;; Defined at:
  5795 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;  f1              3   84[COMRAM] float 
  5798 ;;  f2              3   87[COMRAM] float 
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  3   84[COMRAM] float 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5810 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;Total ram usage:        6 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    2
  5817 ;; This function calls:
  5818 ;;		___ftadd
  5819 ;; This function is called by:
  5820 ;;		_sprintf
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text15
  5825  00342E                     __ptext15:
  5826                           	opt stack 0
  5827  00342E                     ___ftsub:
  5828                           	opt stack 27
  5829                           
  5830                           ;incstack = 0
  5831  00342E  5058               	movf	___ftsub@f2,w,c
  5832  003430  1059               	iorwf	___ftsub@f2+1,w,c
  5833  003432  105A               	iorwf	___ftsub@f2+2,w,c
  5834  003434  B4D8               	btfsc	status,2,c
  5835  003436  D006               	goto	l3187
  5836  003438  0E00               	movlw	0
  5837  00343A  1A58               	xorwf	___ftsub@f2,f,c
  5838  00343C  0E00               	movlw	0
  5839  00343E  1A59               	xorwf	___ftsub@f2+1,f,c
  5840  003440  0E80               	movlw	128
  5841  003442  1A5A               	xorwf	___ftsub@f2+2,f,c
  5842  003444                     l3187:
  5843  003444  C055  F049         	movff	___ftsub@f1,___ftadd@f1
  5844  003448  C056  F04A         	movff	___ftsub@f1+1,___ftadd@f1+1
  5845  00344C  C057  F04B         	movff	___ftsub@f1+2,___ftadd@f1+2
  5846  003450  C058  F04C         	movff	___ftsub@f2,___ftadd@f2
  5847  003454  C059  F04D         	movff	___ftsub@f2+1,___ftadd@f2+1
  5848  003458  C05A  F04E         	movff	___ftsub@f2+2,___ftadd@f2+2
  5849  00345C  EC28  F014         	call	___ftadd	;wreg free
  5850  003460  C049  F055         	movff	?___ftadd,?___ftsub
  5851  003464  C04A  F056         	movff	?___ftadd+1,?___ftsub+1
  5852  003468  C04B  F057         	movff	?___ftadd+2,?___ftsub+2
  5853  00346C  0012               	return	
  5854  00346E                     __end_of___ftsub:
  5855                           	opt stack 0
  5856                           tblptru	equ	0xFF8
  5857                           tblptrh	equ	0xFF7
  5858                           tblptrl	equ	0xFF6
  5859                           tablat	equ	0xFF5
  5860                           prodh	equ	0xFF4
  5861                           prodl	equ	0xFF3
  5862                           postinc0	equ	0xFEE
  5863                           wreg	equ	0xFE8
  5864                           indf2	equ	0xFDF
  5865                           postinc2	equ	0xFDE
  5866                           postdec2	equ	0xFDD
  5867                           fsr2h	equ	0xFDA
  5868                           fsr2l	equ	0xFD9
  5869                           status	equ	0xFD8
  5870                           
  5871 ;; *************** function ___ftadd *****************
  5872 ;; Defined at:
  5873 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;  f1              3   72[COMRAM] float 
  5876 ;;  f2              3   75[COMRAM] float 
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  exp1            1   83[COMRAM] unsigned char 
  5879 ;;  exp2            1   82[COMRAM] unsigned char 
  5880 ;;  sign            1   81[COMRAM] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  3   72[COMRAM] float 
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5890 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;Total ram usage:       12 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    1
  5897 ;; This function calls:
  5898 ;;		___ftpack
  5899 ;; This function is called by:
  5900 ;;		_sprintf
  5901 ;;		___ftsub
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           	psect	text16
  5906  002850                     __ptext16:
  5907                           	opt stack 0
  5908  002850                     ___ftadd:
  5909                           	opt stack 27
  5910                           
  5911                           ;incstack = 0
  5912  002850  C04B  F04F         	movff	___ftadd@f1+2,??___ftadd
  5913  002854  6A50               	clrf	(??___ftadd+1)& (0+255),c
  5914  002856  6A51               	clrf	(??___ftadd+2)& (0+255),c
  5915  002858  344A               	rlcf	___ftadd@f1+1,w,c
  5916  00285A  364F               	rlcf	??___ftadd& (0+255),f,c
  5917  00285C  E301               	bnc	u1991
  5918  00285E  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  5919  002860                     u1991:
  5920  002860  504F               	movf	??___ftadd,w,c
  5921  002862  6E54               	movwf	___ftadd@exp1,c
  5922  002864  C04E  F04F         	movff	___ftadd@f2+2,??___ftadd
  5923  002868  6A50               	clrf	(??___ftadd+1)& (0+255),c
  5924  00286A  6A51               	clrf	(??___ftadd+2)& (0+255),c
  5925  00286C  344D               	rlcf	___ftadd@f2+1,w,c
  5926  00286E  364F               	rlcf	??___ftadd& (0+255),f,c
  5927  002870  E301               	bnc	u2001
  5928  002872  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  5929  002874                     u2001:
  5930  002874  504F               	movf	??___ftadd,w,c
  5931  002876  6E53               	movwf	___ftadd@exp2,c
  5932  002878  5054               	movf	___ftadd@exp1,w,c
  5933  00287A  B4D8               	btfsc	status,2,c
  5934  00287C  D00B               	goto	l701
  5935  00287E  5053               	movf	___ftadd@exp2,w,c
  5936  002880  5C54               	subwf	___ftadd@exp1,w,c
  5937  002882  B0D8               	btfsc	status,0,c
  5938  002884  D00E               	goto	l2667
  5939  002886  5054               	movf	___ftadd@exp1,w,c
  5940  002888  0800               	sublw	0
  5941  00288A  2453               	addwf	___ftadd@exp2,w,c
  5942  00288C  6E4F               	movwf	??___ftadd& (0+255),c
  5943  00288E  0E18               	movlw	24
  5944  002890  644F               	cpfsgt	??___ftadd,c
  5945  002892  D007               	goto	l2667
  5946  002894                     l701:
  5947  002894  C04C  F049         	movff	___ftadd@f2,?___ftadd
  5948  002898  C04D  F04A         	movff	___ftadd@f2+1,?___ftadd+1
  5949  00289C  C04E  F04B         	movff	___ftadd@f2+2,?___ftadd+2
  5950  0028A0  0012               	return	
  5951  0028A2                     l2667:
  5952  0028A2  5053               	movf	___ftadd@exp2,w,c
  5953  0028A4  B4D8               	btfsc	status,2,c
  5954  0028A6  D00B               	goto	l705
  5955  0028A8  5054               	movf	___ftadd@exp1,w,c
  5956  0028AA  5C53               	subwf	___ftadd@exp2,w,c
  5957  0028AC  B0D8               	btfsc	status,0,c
  5958  0028AE  D00E               	goto	l2673
  5959  0028B0  5053               	movf	___ftadd@exp2,w,c
  5960  0028B2  0800               	sublw	0
  5961  0028B4  2454               	addwf	___ftadd@exp1,w,c
  5962  0028B6  6E4F               	movwf	??___ftadd& (0+255),c
  5963  0028B8  0E18               	movlw	24
  5964  0028BA  644F               	cpfsgt	??___ftadd,c
  5965  0028BC  D007               	goto	l2673
  5966  0028BE                     l705:
  5967  0028BE  C049  F049         	movff	___ftadd@f1,?___ftadd
  5968  0028C2  C04A  F04A         	movff	___ftadd@f1+1,?___ftadd+1
  5969  0028C6  C04B  F04B         	movff	___ftadd@f1+2,?___ftadd+2
  5970  0028CA  0012               	return	
  5971  0028CC                     l2673:
  5972  0028CC  0E06               	movlw	6
  5973  0028CE  6E52               	movwf	___ftadd@sign,c
  5974  0028D0  BE4B               	btfsc	___ftadd@f1+2,7,c
  5975  0028D2  8E52               	bsf	___ftadd@sign,7,c
  5976  0028D4  BE4E               	btfsc	___ftadd@f2+2,7,c
  5977  0028D6  8C52               	bsf	___ftadd@sign,6,c
  5978  0028D8  8E4A               	bsf	___ftadd@f1+1,7,c
  5979  0028DA  0EFF               	movlw	255
  5980  0028DC  1649               	andwf	___ftadd@f1,f,c
  5981  0028DE  0EFF               	movlw	255
  5982  0028E0  164A               	andwf	___ftadd@f1+1,f,c
  5983  0028E2  0E00               	movlw	0
  5984  0028E4  164B               	andwf	___ftadd@f1+2,f,c
  5985  0028E6  8E4D               	bsf	___ftadd@f2+1,7,c
  5986  0028E8  0EFF               	movlw	255
  5987  0028EA  164C               	andwf	___ftadd@f2,f,c
  5988  0028EC  0EFF               	movlw	255
  5989  0028EE  164D               	andwf	___ftadd@f2+1,f,c
  5990  0028F0  0E00               	movlw	0
  5991  0028F2  164E               	andwf	___ftadd@f2+2,f,c
  5992  0028F4  5053               	movf	___ftadd@exp2,w,c
  5993  0028F6  5C54               	subwf	___ftadd@exp1,w,c
  5994  0028F8  B0D8               	btfsc	status,0,c
  5995  0028FA  D01B               	goto	l2699
  5996  0028FC                     l2689:
  5997  0028FC  90D8               	bcf	status,0,c
  5998  0028FE  364C               	rlcf	___ftadd@f2,f,c
  5999  002900  364D               	rlcf	___ftadd@f2+1,f,c
  6000  002902  364E               	rlcf	___ftadd@f2+2,f,c
  6001  002904  0653               	decf	___ftadd@exp2,f,c
  6002  002906  5054               	movf	___ftadd@exp1,w,c
  6003  002908  1853               	xorwf	___ftadd@exp2,w,c
  6004  00290A  B4D8               	btfsc	status,2,c
  6005  00290C  D00D               	goto	l2697
  6006  00290E  0652               	decf	___ftadd@sign,f,c
  6007  002910  C052  F04F         	movff	___ftadd@sign,??___ftadd
  6008  002914  0E07               	movlw	7
  6009  002916  164F               	andwf	??___ftadd,f,c
  6010  002918  B4D8               	btfsc	status,2,c
  6011  00291A  D006               	goto	l2697
  6012  00291C  D7EF               	goto	l2689
  6013  00291E                     l2695:
  6014  00291E  90D8               	bcf	status,0,c
  6015  002920  324B               	rrcf	___ftadd@f1+2,f,c
  6016  002922  324A               	rrcf	___ftadd@f1+1,f,c
  6017  002924  3249               	rrcf	___ftadd@f1,f,c
  6018  002926  2A54               	incf	___ftadd@exp1,f,c
  6019  002928                     l2697:
  6020  002928  5053               	movf	___ftadd@exp2,w,c
  6021  00292A  1854               	xorwf	___ftadd@exp1,w,c
  6022  00292C  B4D8               	btfsc	status,2,c
  6023  00292E  D01F               	goto	l716
  6024  002930  D7F6               	goto	l2695
  6025  002932                     l2699:
  6026  002932  5054               	movf	___ftadd@exp1,w,c
  6027  002934  5C53               	subwf	___ftadd@exp2,w,c
  6028  002936  B0D8               	btfsc	status,0,c
  6029  002938  D01A               	goto	l716
  6030  00293A                     l2701:
  6031  00293A  90D8               	bcf	status,0,c
  6032  00293C  3649               	rlcf	___ftadd@f1,f,c
  6033  00293E  364A               	rlcf	___ftadd@f1+1,f,c
  6034  002940  364B               	rlcf	___ftadd@f1+2,f,c
  6035  002942  0654               	decf	___ftadd@exp1,f,c
  6036  002944  5054               	movf	___ftadd@exp1,w,c
  6037  002946  1853               	xorwf	___ftadd@exp2,w,c
  6038  002948  B4D8               	btfsc	status,2,c
  6039  00294A  D00D               	goto	l2709
  6040  00294C  0652               	decf	___ftadd@sign,f,c
  6041  00294E  C052  F04F         	movff	___ftadd@sign,??___ftadd
  6042  002952  0E07               	movlw	7
  6043  002954  164F               	andwf	??___ftadd,f,c
  6044  002956  B4D8               	btfsc	status,2,c
  6045  002958  D006               	goto	l2709
  6046  00295A  D7EF               	goto	l2701
  6047  00295C                     l2707:
  6048  00295C  90D8               	bcf	status,0,c
  6049  00295E  324E               	rrcf	___ftadd@f2+2,f,c
  6050  002960  324D               	rrcf	___ftadd@f2+1,f,c
  6051  002962  324C               	rrcf	___ftadd@f2,f,c
  6052  002964  2A53               	incf	___ftadd@exp2,f,c
  6053  002966                     l2709:
  6054  002966  5053               	movf	___ftadd@exp2,w,c
  6055  002968  1854               	xorwf	___ftadd@exp1,w,c
  6056  00296A  A4D8               	btfss	status,2,c
  6057  00296C  D7F7               	goto	l2707
  6058  00296E                     l716:
  6059  00296E  AE52               	btfss	___ftadd@sign,7,c
  6060  002970  D00C               	goto	l725
  6061  002972  0EFF               	movlw	255
  6062  002974  1A49               	xorwf	___ftadd@f1,f,c
  6063  002976  0EFF               	movlw	255
  6064  002978  1A4A               	xorwf	___ftadd@f1+1,f,c
  6065  00297A  0EFF               	movlw	255
  6066  00297C  1A4B               	xorwf	___ftadd@f1+2,f,c
  6067  00297E  0E01               	movlw	1
  6068  002980  2649               	addwf	___ftadd@f1,f,c
  6069  002982  0E00               	movlw	0
  6070  002984  224A               	addwfc	___ftadd@f1+1,f,c
  6071  002986  0E00               	movlw	0
  6072  002988  224B               	addwfc	___ftadd@f1+2,f,c
  6073  00298A                     l725:
  6074  00298A  AC52               	btfss	___ftadd@sign,6,c
  6075  00298C  D00C               	goto	l2715
  6076  00298E  0EFF               	movlw	255
  6077  002990  1A4C               	xorwf	___ftadd@f2,f,c
  6078  002992  0EFF               	movlw	255
  6079  002994  1A4D               	xorwf	___ftadd@f2+1,f,c
  6080  002996  0EFF               	movlw	255
  6081  002998  1A4E               	xorwf	___ftadd@f2+2,f,c
  6082  00299A  0E01               	movlw	1
  6083  00299C  264C               	addwf	___ftadd@f2,f,c
  6084  00299E  0E00               	movlw	0
  6085  0029A0  224D               	addwfc	___ftadd@f2+1,f,c
  6086  0029A2  0E00               	movlw	0
  6087  0029A4  224E               	addwfc	___ftadd@f2+2,f,c
  6088  0029A6                     l2715:
  6089  0029A6  0E00               	movlw	0
  6090  0029A8  6E52               	movwf	___ftadd@sign,c
  6091  0029AA  5049               	movf	___ftadd@f1,w,c
  6092  0029AC  264C               	addwf	___ftadd@f2,f,c
  6093  0029AE  504A               	movf	___ftadd@f1+1,w,c
  6094  0029B0  224D               	addwfc	___ftadd@f2+1,f,c
  6095  0029B2  504B               	movf	___ftadd@f1+2,w,c
  6096  0029B4  224E               	addwfc	___ftadd@f2+2,f,c
  6097  0029B6  AE4E               	btfss	___ftadd@f2+2,7,c
  6098  0029B8  D00E               	goto	l2725
  6099  0029BA  0EFF               	movlw	255
  6100  0029BC  1A4C               	xorwf	___ftadd@f2,f,c
  6101  0029BE  0EFF               	movlw	255
  6102  0029C0  1A4D               	xorwf	___ftadd@f2+1,f,c
  6103  0029C2  0EFF               	movlw	255
  6104  0029C4  1A4E               	xorwf	___ftadd@f2+2,f,c
  6105  0029C6  0E01               	movlw	1
  6106  0029C8  264C               	addwf	___ftadd@f2,f,c
  6107  0029CA  0E00               	movlw	0
  6108  0029CC  224D               	addwfc	___ftadd@f2+1,f,c
  6109  0029CE  0E00               	movlw	0
  6110  0029D0  224E               	addwfc	___ftadd@f2+2,f,c
  6111  0029D2  0E01               	movlw	1
  6112  0029D4  6E52               	movwf	___ftadd@sign,c
  6113  0029D6                     l2725:
  6114  0029D6  C04C  F001         	movff	___ftadd@f2,___ftpack@arg
  6115  0029DA  C04D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6116  0029DE  C04E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6117  0029E2  C054  F004         	movff	___ftadd@exp1,___ftpack@exp
  6118  0029E6  C052  F005         	movff	___ftadd@sign,___ftpack@sign
  6119  0029EA  EC92  F017         	call	___ftpack	;wreg free
  6120  0029EE  C001  F049         	movff	?___ftpack,?___ftadd
  6121  0029F2  C002  F04A         	movff	?___ftpack+1,?___ftadd+1
  6122  0029F6  C003  F04B         	movff	?___ftpack+2,?___ftadd+2
  6123  0029FA  0012               	return	
  6124  0029FC                     __end_of___ftadd:
  6125                           	opt stack 0
  6126                           tblptru	equ	0xFF8
  6127                           tblptrh	equ	0xFF7
  6128                           tblptrl	equ	0xFF6
  6129                           tablat	equ	0xFF5
  6130                           prodh	equ	0xFF4
  6131                           prodl	equ	0xFF3
  6132                           postinc0	equ	0xFEE
  6133                           wreg	equ	0xFE8
  6134                           indf2	equ	0xFDF
  6135                           postinc2	equ	0xFDE
  6136                           postdec2	equ	0xFDD
  6137                           fsr2h	equ	0xFDA
  6138                           fsr2l	equ	0xFD9
  6139                           status	equ	0xFD8
  6140                           
  6141 ;; *************** function ___ftneg *****************
  6142 ;; Defined at:
  6143 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  f1              3   44[COMRAM] float 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  3   44[COMRAM] float 
  6150 ;; Registers used:
  6151 ;;		wreg, status,2, status,0
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6157 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6161 ;;Total ram usage:        3 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		_sprintf
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text17
  6171  003674                     __ptext17:
  6172                           	opt stack 0
  6173  003674                     ___ftneg:
  6174                           	opt stack 29
  6175                           
  6176                           ;incstack = 0
  6177  003674  502D               	movf	___ftneg@f1,w,c
  6178  003676  102E               	iorwf	___ftneg@f1+1,w,c
  6179  003678  102F               	iorwf	___ftneg@f1+2,w,c
  6180  00367A  B4D8               	btfsc	status,2,c
  6181  00367C  D006               	goto	l775
  6182  00367E  0E00               	movlw	0
  6183  003680  1A2D               	xorwf	___ftneg@f1,f,c
  6184  003682  0E00               	movlw	0
  6185  003684  1A2E               	xorwf	___ftneg@f1+1,f,c
  6186  003686  0E80               	movlw	128
  6187  003688  1A2F               	xorwf	___ftneg@f1+2,f,c
  6188  00368A                     l775:
  6189  00368A  C02D  F02D         	movff	___ftneg@f1,?___ftneg
  6190  00368E  C02E  F02E         	movff	___ftneg@f1+1,?___ftneg+1
  6191  003692  C02F  F02F         	movff	___ftneg@f1+2,?___ftneg+2
  6192  003696  0012               	return		;funcret
  6193  003698                     __end_of___ftneg:
  6194                           	opt stack 0
  6195                           tblptru	equ	0xFF8
  6196                           tblptrh	equ	0xFF7
  6197                           tblptrl	equ	0xFF6
  6198                           tablat	equ	0xFF5
  6199                           prodh	equ	0xFF4
  6200                           prodl	equ	0xFF3
  6201                           postinc0	equ	0xFEE
  6202                           wreg	equ	0xFE8
  6203                           indf2	equ	0xFDF
  6204                           postinc2	equ	0xFDE
  6205                           postdec2	equ	0xFDD
  6206                           fsr2h	equ	0xFDA
  6207                           fsr2l	equ	0xFD9
  6208                           status	equ	0xFD8
  6209                           
  6210 ;; *************** function ___ftge *****************
  6211 ;; Defined at:
  6212 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  ff1             3   84[COMRAM] float 
  6215 ;;  ff2             3   87[COMRAM] float 
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;		None               void
  6220 ;; Registers used:
  6221 ;;		wreg, status,2, status,0
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6227 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;Total ram usage:        9 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_sprintf
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text18
  6241  003076                     __ptext18:
  6242                           	opt stack 0
  6243  003076                     ___ftge:
  6244                           	opt stack 29
  6245                           
  6246                           ;incstack = 0
  6247  003076  AE57               	btfss	___ftge@ff1+2,7,c
  6248  003078  D016               	goto	l3195
  6249  00307A  C055  F05B         	movff	___ftge@ff1,??___ftge
  6250  00307E  C056  F05C         	movff	___ftge@ff1+1,??___ftge+1
  6251  003082  C057  F05D         	movff	___ftge@ff1+2,??___ftge+2
  6252  003086  1E5B               	comf	??___ftge,f,c
  6253  003088  1E5C               	comf	??___ftge+1,f,c
  6254  00308A  1E5D               	comf	??___ftge+2,f,c
  6255  00308C  2A5B               	incf	??___ftge,f,c
  6256  00308E  0E00               	movlw	0
  6257  003090  225C               	addwfc	??___ftge+1,f,c
  6258  003092  225D               	addwfc	??___ftge+2,f,c
  6259  003094  0E00               	movlw	0
  6260  003096  245B               	addwf	??___ftge,w,c
  6261  003098  6E55               	movwf	___ftge@ff1,c
  6262  00309A  0E00               	movlw	0
  6263  00309C  205C               	addwfc	??___ftge+1,w,c
  6264  00309E  6E56               	movwf	___ftge@ff1+1,c
  6265  0030A0  0E80               	movlw	128
  6266  0030A2  205D               	addwfc	??___ftge+2,w,c
  6267  0030A4  6E57               	movwf	___ftge@ff1+2,c
  6268  0030A6                     l3195:
  6269  0030A6  AE5A               	btfss	___ftge@ff2+2,7,c
  6270  0030A8  D016               	goto	l3199
  6271  0030AA  C058  F05B         	movff	___ftge@ff2,??___ftge
  6272  0030AE  C059  F05C         	movff	___ftge@ff2+1,??___ftge+1
  6273  0030B2  C05A  F05D         	movff	___ftge@ff2+2,??___ftge+2
  6274  0030B6  1E5B               	comf	??___ftge,f,c
  6275  0030B8  1E5C               	comf	??___ftge+1,f,c
  6276  0030BA  1E5D               	comf	??___ftge+2,f,c
  6277  0030BC  2A5B               	incf	??___ftge,f,c
  6278  0030BE  0E00               	movlw	0
  6279  0030C0  225C               	addwfc	??___ftge+1,f,c
  6280  0030C2  225D               	addwfc	??___ftge+2,f,c
  6281  0030C4  0E00               	movlw	0
  6282  0030C6  245B               	addwf	??___ftge,w,c
  6283  0030C8  6E58               	movwf	___ftge@ff2,c
  6284  0030CA  0E00               	movlw	0
  6285  0030CC  205C               	addwfc	??___ftge+1,w,c
  6286  0030CE  6E59               	movwf	___ftge@ff2+1,c
  6287  0030D0  0E80               	movlw	128
  6288  0030D2  205D               	addwfc	??___ftge+2,w,c
  6289  0030D4  6E5A               	movwf	___ftge@ff2+2,c
  6290  0030D6                     l3199:
  6291  0030D6  0E00               	movlw	0
  6292  0030D8  1A55               	xorwf	___ftge@ff1,f,c
  6293  0030DA  0E00               	movlw	0
  6294  0030DC  1A56               	xorwf	___ftge@ff1+1,f,c
  6295  0030DE  0E80               	movlw	128
  6296  0030E0  1A57               	xorwf	___ftge@ff1+2,f,c
  6297  0030E2  0E00               	movlw	0
  6298  0030E4  1A58               	xorwf	___ftge@ff2,f,c
  6299  0030E6  0E00               	movlw	0
  6300  0030E8  1A59               	xorwf	___ftge@ff2+1,f,c
  6301  0030EA  0E80               	movlw	128
  6302  0030EC  1A5A               	xorwf	___ftge@ff2+2,f,c
  6303  0030EE  5058               	movf	___ftge@ff2,w,c
  6304  0030F0  5C55               	subwf	___ftge@ff1,w,c
  6305  0030F2  5059               	movf	___ftge@ff2+1,w,c
  6306  0030F4  5856               	subwfb	___ftge@ff1+1,w,c
  6307  0030F6  505A               	movf	___ftge@ff2+2,w,c
  6308  0030F8  5857               	subwfb	___ftge@ff1+2,w,c
  6309  0030FA  B0D8               	btfsc	status,0,c
  6310  0030FC  D002               	goto	l3205
  6311  0030FE  90D8               	bcf	status,0,c
  6312  003100  0012               	return	
  6313  003102                     l3205:
  6314  003102  80D8               	bsf	status,0,c
  6315  003104  0012               	return	
  6316  003106                     __end_of___ftge:
  6317                           	opt stack 0
  6318                           tblptru	equ	0xFF8
  6319                           tblptrh	equ	0xFF7
  6320                           tblptrl	equ	0xFF6
  6321                           tablat	equ	0xFF5
  6322                           prodh	equ	0xFF4
  6323                           prodl	equ	0xFF3
  6324                           postinc0	equ	0xFEE
  6325                           wreg	equ	0xFE8
  6326                           indf2	equ	0xFDF
  6327                           postinc2	equ	0xFDE
  6328                           postdec2	equ	0xFDD
  6329                           fsr2h	equ	0xFDA
  6330                           fsr2l	equ	0xFD9
  6331                           status	equ	0xFD8
  6332                           
  6333 ;; *************** function ___ftdiv *****************
  6334 ;; Defined at:
  6335 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  f1              3   69[COMRAM] float 
  6338 ;;  f2              3   72[COMRAM] float 
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;  f3              3   79[COMRAM] float 
  6341 ;;  sign            1   83[COMRAM] unsigned char 
  6342 ;;  exp             1   82[COMRAM] unsigned char 
  6343 ;;  cntr            1   78[COMRAM] unsigned char 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  3   69[COMRAM] float 
  6346 ;; Registers used:
  6347 ;;		wreg, status,2, status,0, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6353 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;Total ram usage:       15 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    1
  6360 ;; This function calls:
  6361 ;;		___ftpack
  6362 ;; This function is called by:
  6363 ;;		_main
  6364 ;;		_sprintf
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           	psect	text19
  6369  002E3E                     __ptext19:
  6370                           	opt stack 0
  6371  002E3E                     ___ftdiv:
  6372                           	opt stack 28
  6373                           
  6374                           ;incstack = 0
  6375  002E3E  C048  F04C         	movff	___ftdiv@f1+2,??___ftdiv
  6376  002E42  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  6377  002E44  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  6378  002E46  3447               	rlcf	___ftdiv@f1+1,w,c
  6379  002E48  364C               	rlcf	??___ftdiv& (0+255),f,c
  6380  002E4A  E301               	bnc	u2711
  6381  002E4C  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  6382  002E4E                     u2711:
  6383  002E4E  504C               	movf	??___ftdiv,w,c
  6384  002E50  6E53               	movwf	___ftdiv@exp,c
  6385  002E52  5053               	movf	___ftdiv@exp,w,c
  6386  002E54  A4D8               	btfss	status,2,c
  6387  002E56  D007               	goto	l3143
  6388  002E58  0E00               	movlw	0
  6389  002E5A  6E46               	movwf	?___ftdiv,c
  6390  002E5C  0E00               	movlw	0
  6391  002E5E  6E47               	movwf	?___ftdiv+1,c
  6392  002E60  0E00               	movlw	0
  6393  002E62  6E48               	movwf	?___ftdiv+2,c
  6394  002E64  0012               	return	
  6395  002E66                     l3143:
  6396  002E66  C04B  F04C         	movff	___ftdiv@f2+2,??___ftdiv
  6397  002E6A  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  6398  002E6C  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  6399  002E6E  344A               	rlcf	___ftdiv@f2+1,w,c
  6400  002E70  364C               	rlcf	??___ftdiv& (0+255),f,c
  6401  002E72  E301               	bnc	u2731
  6402  002E74  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  6403  002E76                     u2731:
  6404  002E76  504C               	movf	??___ftdiv,w,c
  6405  002E78  6E54               	movwf	___ftdiv@sign,c
  6406  002E7A  5054               	movf	___ftdiv@sign,w,c
  6407  002E7C  A4D8               	btfss	status,2,c
  6408  002E7E  D007               	goto	l3149
  6409  002E80  0E00               	movlw	0
  6410  002E82  6E46               	movwf	?___ftdiv,c
  6411  002E84  0E00               	movlw	0
  6412  002E86  6E47               	movwf	?___ftdiv+1,c
  6413  002E88  0E00               	movlw	0
  6414  002E8A  6E48               	movwf	?___ftdiv+2,c
  6415  002E8C  0012               	return	
  6416  002E8E                     l3149:
  6417  002E8E  0E00               	movlw	0
  6418  002E90  6E50               	movwf	___ftdiv@f3,c
  6419  002E92  0E00               	movlw	0
  6420  002E94  6E51               	movwf	___ftdiv@f3+1,c
  6421  002E96  0E00               	movlw	0
  6422  002E98  6E52               	movwf	___ftdiv@f3+2,c
  6423  002E9A  5054               	movf	___ftdiv@sign,w,c
  6424  002E9C  0F89               	addlw	137
  6425  002E9E  5E53               	subwf	___ftdiv@exp,f,c
  6426  002EA0  C048  F054         	movff	___ftdiv@f1+2,___ftdiv@sign
  6427  002EA4  504B               	movf	___ftdiv@f2+2,w,c
  6428  002EA6  1A54               	xorwf	___ftdiv@sign,f,c
  6429  002EA8  0E80               	movlw	128
  6430  002EAA  1654               	andwf	___ftdiv@sign,f,c
  6431  002EAC  8E47               	bsf	___ftdiv@f1+1,7,c
  6432  002EAE  0EFF               	movlw	255
  6433  002EB0  1646               	andwf	___ftdiv@f1,f,c
  6434  002EB2  0EFF               	movlw	255
  6435  002EB4  1647               	andwf	___ftdiv@f1+1,f,c
  6436  002EB6  0E00               	movlw	0
  6437  002EB8  1648               	andwf	___ftdiv@f1+2,f,c
  6438  002EBA  8E4A               	bsf	___ftdiv@f2+1,7,c
  6439  002EBC  0EFF               	movlw	255
  6440  002EBE  1649               	andwf	___ftdiv@f2,f,c
  6441  002EC0  0EFF               	movlw	255
  6442  002EC2  164A               	andwf	___ftdiv@f2+1,f,c
  6443  002EC4  0E00               	movlw	0
  6444  002EC6  164B               	andwf	___ftdiv@f2+2,f,c
  6445  002EC8  0E18               	movlw	24
  6446  002ECA  6E4F               	movwf	___ftdiv@cntr,c
  6447  002ECC                     l3169:
  6448  002ECC  90D8               	bcf	status,0,c
  6449  002ECE  3650               	rlcf	___ftdiv@f3,f,c
  6450  002ED0  3651               	rlcf	___ftdiv@f3+1,f,c
  6451  002ED2  3652               	rlcf	___ftdiv@f3+2,f,c
  6452  002ED4  5049               	movf	___ftdiv@f2,w,c
  6453  002ED6  5C46               	subwf	___ftdiv@f1,w,c
  6454  002ED8  504A               	movf	___ftdiv@f2+1,w,c
  6455  002EDA  5847               	subwfb	___ftdiv@f1+1,w,c
  6456  002EDC  504B               	movf	___ftdiv@f2+2,w,c
  6457  002EDE  5848               	subwfb	___ftdiv@f1+2,w,c
  6458  002EE0  A0D8               	btfss	status,0,c
  6459  002EE2  D007               	goto	l736
  6460  002EE4  5049               	movf	___ftdiv@f2,w,c
  6461  002EE6  5E46               	subwf	___ftdiv@f1,f,c
  6462  002EE8  504A               	movf	___ftdiv@f2+1,w,c
  6463  002EEA  5A47               	subwfb	___ftdiv@f1+1,f,c
  6464  002EEC  504B               	movf	___ftdiv@f2+2,w,c
  6465  002EEE  5A48               	subwfb	___ftdiv@f1+2,f,c
  6466  002EF0  8050               	bsf	___ftdiv@f3,0,c
  6467  002EF2                     l736:
  6468  002EF2  90D8               	bcf	status,0,c
  6469  002EF4  3646               	rlcf	___ftdiv@f1,f,c
  6470  002EF6  3647               	rlcf	___ftdiv@f1+1,f,c
  6471  002EF8  3648               	rlcf	___ftdiv@f1+2,f,c
  6472  002EFA  2E4F               	decfsz	___ftdiv@cntr,f,c
  6473  002EFC  D7E7               	goto	l3169
  6474  002EFE  C050  F001         	movff	___ftdiv@f3,___ftpack@arg
  6475  002F02  C051  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6476  002F06  C052  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6477  002F0A  C053  F004         	movff	___ftdiv@exp,___ftpack@exp
  6478  002F0E  C054  F005         	movff	___ftdiv@sign,___ftpack@sign
  6479  002F12  EC92  F017         	call	___ftpack	;wreg free
  6480  002F16  C001  F046         	movff	?___ftpack,?___ftdiv
  6481  002F1A  C002  F047         	movff	?___ftpack+1,?___ftdiv+1
  6482  002F1E  C003  F048         	movff	?___ftpack+2,?___ftdiv+2
  6483  002F22  0012               	return	
  6484  002F24                     __end_of___ftdiv:
  6485                           	opt stack 0
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           prodh	equ	0xFF4
  6491                           prodl	equ	0xFF3
  6492                           postinc0	equ	0xFEE
  6493                           wreg	equ	0xFE8
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function _putsXLCD *****************
  6502 ;; Defined at:
  6503 ;;		line 16 in file "putsxlcd.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  6506 ;;		 -> ResultString(10), 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      void 
  6511 ;; Registers used:
  6512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;Total ram usage:        2 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    2
  6525 ;; This function calls:
  6526 ;;		_BusyXLCD
  6527 ;;		_WriteDataXLCD
  6528 ;; This function is called by:
  6529 ;;		_main
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text20
  6534  0035C4                     __ptext20:
  6535                           	opt stack 0
  6536  0035C4                     _putsXLCD:
  6537                           	opt stack 28
  6538                           
  6539                           ;putsxlcd.c: 18: while(*buffer)
  6540                           
  6541                           ;incstack = 0
  6542  0035C4  D00E               	goto	l3727
  6543  0035C6                     l3721:
  6544  0035C6  EC75  F01A         	call	_BusyXLCD	;wreg free
  6545  0035CA  0900               	iorlw	0
  6546  0035CC  A4D8               	btfss	status,2,c
  6547  0035CE  D7FB               	goto	l3721
  6548                           
  6549                           ;putsxlcd.c: 21: WriteDataXLCD(*buffer);
  6550  0035D0  C002  FFD9         	movff	putsXLCD@buffer,fsr2l
  6551  0035D4  C003  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  6552  0035D8  50DF               	movf	indf2,w,c
  6553  0035DA  EC37  F01A         	call	_WriteDataXLCD
  6554                           
  6555                           ;putsxlcd.c: 22: buffer++;
  6556  0035DE  4A02               	infsnz	putsXLCD@buffer,f,c
  6557  0035E0  2A03               	incf	putsXLCD@buffer+1,f,c
  6558  0035E2                     l3727:
  6559  0035E2  C002  FFD9         	movff	putsXLCD@buffer,fsr2l
  6560  0035E6  C003  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  6561  0035EA  50DF               	movf	indf2,w,c
  6562  0035EC  B4D8               	btfsc	status,2,c
  6563  0035EE  0012               	return	
  6564  0035F0  D7EA               	goto	l3721
  6565  0035F2                     __end_of_putsXLCD:
  6566                           	opt stack 0
  6567                           tblptru	equ	0xFF8
  6568                           tblptrh	equ	0xFF7
  6569                           tblptrl	equ	0xFF6
  6570                           tablat	equ	0xFF5
  6571                           prodh	equ	0xFF4
  6572                           prodl	equ	0xFF3
  6573                           postinc0	equ	0xFEE
  6574                           wreg	equ	0xFE8
  6575                           indf2	equ	0xFDF
  6576                           postinc2	equ	0xFDE
  6577                           postdec2	equ	0xFDD
  6578                           fsr2h	equ	0xFDA
  6579                           fsr2l	equ	0xFD9
  6580                           status	equ	0xFD8
  6581                           
  6582 ;; *************** function _putrsXLCD *****************
  6583 ;; Defined at:
  6584 ;;		line 16 in file "putrxlcd.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  buffer          2    1[COMRAM] PTR const unsigned char 
  6587 ;;		 -> STR_8(6), STR_6(6), STR_4(17), STR_3(17), 
  6588 ;;		 -> STR_2(5), STR_1(17), 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;Total ram usage:        2 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    2
  6607 ;; This function calls:
  6608 ;;		_BusyXLCD
  6609 ;;		_WriteDataXLCD
  6610 ;; This function is called by:
  6611 ;;		_main
  6612 ;; This function uses a non-reentrant model
  6613 ;;
  6614                           
  6615                           	psect	text21
  6616  00355C                     __ptext21:
  6617                           	opt stack 0
  6618  00355C                     _putrsXLCD:
  6619                           	opt stack 28
  6620                           
  6621                           ;putrxlcd.c: 18: while(*buffer)
  6622                           
  6623                           ;incstack = 0
  6624  00355C  D00F               	goto	l3359
  6625  00355E                     l3353:
  6626  00355E  EC75  F01A         	call	_BusyXLCD	;wreg free
  6627  003562  0900               	iorlw	0
  6628  003564  A4D8               	btfss	status,2,c
  6629  003566  D7FB               	goto	l3353
  6630                           
  6631                           ;putrxlcd.c: 21: WriteDataXLCD(*buffer);
  6632  003568  C002  FFF6         	movff	putrsXLCD@buffer,tblptrl
  6633  00356C  C003  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  6634  003570                     	if	0	;tblptru may be non-zero
  6635  003570                     	endif
  6636  003570                     	if	0	;tblptru may be non-zero
  6637  003570                     	endif
  6638  003570  0008               	tblrd		*
  6639  003572  50F5               	movf	tablat,w,c
  6640  003574  EC37  F01A         	call	_WriteDataXLCD
  6641                           
  6642                           ;putrxlcd.c: 22: buffer++;
  6643  003578  4A02               	infsnz	putrsXLCD@buffer,f,c
  6644  00357A  2A03               	incf	putrsXLCD@buffer+1,f,c
  6645  00357C                     l3359:
  6646  00357C  C002  FFF6         	movff	putrsXLCD@buffer,tblptrl
  6647  003580  C003  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  6648  003584                     	if	0	;tblptru may be non-zero
  6649  003584                     	endif
  6650  003584                     	if	0	;tblptru may be non-zero
  6651  003584                     	endif
  6652  003584  0008               	tblrd		*
  6653  003586  50F5               	movf	tablat,w,c
  6654  003588  0900               	iorlw	0
  6655  00358A  B4D8               	btfsc	status,2,c
  6656  00358C  0012               	return	
  6657  00358E  D7E7               	goto	l3353
  6658  003590                     __end_of_putrsXLCD:
  6659                           	opt stack 0
  6660                           tblptru	equ	0xFF8
  6661                           tblptrh	equ	0xFF7
  6662                           tblptrl	equ	0xFF6
  6663                           tablat	equ	0xFF5
  6664                           prodh	equ	0xFF4
  6665                           prodl	equ	0xFF3
  6666                           postinc0	equ	0xFEE
  6667                           wreg	equ	0xFE8
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           fsr2h	equ	0xFDA
  6672                           fsr2l	equ	0xFD9
  6673                           status	equ	0xFD8
  6674                           
  6675 ;; *************** function _WriteDataXLCD *****************
  6676 ;; Defined at:
  6677 ;;		line 16 in file "writdata.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;  data            1    wreg     unsigned char 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  data            1    0[COMRAM] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1    wreg      void 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;Total ram usage:        1 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    1
  6698 ;; This function calls:
  6699 ;;		_DelayFor18TCY
  6700 ;; This function is called by:
  6701 ;;		_putrsXLCD
  6702 ;;		_putsXLCD
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text22
  6707  00346E                     __ptext22:
  6708                           	opt stack 0
  6709  00346E                     _WriteDataXLCD:
  6710                           	opt stack 28
  6711                           
  6712                           ;incstack = 0
  6713                           ;WriteDataXLCD@data stored from wreg
  6714  00346E  6E01               	movwf	WriteDataXLCD@data,c
  6715                           
  6716                           ;writdata.c: 35: TRISB &= 0xf0;
  6717  003470  0EF0               	movlw	240
  6718  003472  1693               	andwf	3987,f,c	;volatile
  6719                           
  6720                           ;writdata.c: 36: PORTB &= 0xf0;
  6721  003474  0EF0               	movlw	240
  6722  003476  1681               	andwf	3969,f,c	;volatile
  6723                           
  6724                           ;writdata.c: 37: PORTB |= ((data>>4)&0x0f);
  6725  003478  3801               	swapf	WriteDataXLCD@data,w,c
  6726  00347A  0B0F               	andlw	15
  6727  00347C  0B0F               	andlw	15
  6728  00347E  1281               	iorwf	3969,f,c	;volatile
  6729                           
  6730                           ;writdata.c: 39: LATCbits.LATC0 = 1;
  6731  003480  808B               	bsf	3979,0,c	;volatile
  6732                           
  6733                           ;writdata.c: 40: LATCbits.LATC2 = 0;
  6734  003482  948B               	bcf	3979,2,c	;volatile
  6735                           
  6736                           ;writdata.c: 41: DelayFor18TCY();
  6737  003484  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  6738                           
  6739                           ;writdata.c: 42: LATCbits.LATC1 = 1;
  6740  003488  828B               	bsf	3979,1,c	;volatile
  6741                           
  6742                           ;writdata.c: 43: DelayFor18TCY();
  6743  00348A  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  6744                           
  6745                           ;writdata.c: 44: LATCbits.LATC1 = 0;
  6746  00348E  928B               	bcf	3979,1,c	;volatile
  6747                           
  6748                           ;writdata.c: 49: PORTB &= 0xf0;
  6749  003490  0EF0               	movlw	240
  6750  003492  1681               	andwf	3969,f,c	;volatile
  6751                           
  6752                           ;writdata.c: 50: PORTB |= (data&0x0f);
  6753  003494  5001               	movf	WriteDataXLCD@data,w,c
  6754  003496  0B0F               	andlw	15
  6755  003498  1281               	iorwf	3969,f,c	;volatile
  6756                           
  6757                           ;writdata.c: 52: DelayFor18TCY();
  6758  00349A  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  6759                           
  6760                           ;writdata.c: 53: LATCbits.LATC1 = 1;
  6761  00349E  828B               	bsf	3979,1,c	;volatile
  6762                           
  6763                           ;writdata.c: 54: DelayFor18TCY();
  6764  0034A0  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  6765                           
  6766                           ;writdata.c: 55: LATCbits.LATC1 = 0;
  6767  0034A4  928B               	bcf	3979,1,c	;volatile
  6768                           
  6769                           ;writdata.c: 59: TRISB |= 0x0f;
  6770  0034A6  0E0F               	movlw	15
  6771  0034A8  1293               	iorwf	3987,f,c	;volatile
  6772  0034AA  0012               	return	
  6773  0034AC                     __end_of_WriteDataXLCD:
  6774                           	opt stack 0
  6775                           tblptru	equ	0xFF8
  6776                           tblptrh	equ	0xFF7
  6777                           tblptrl	equ	0xFF6
  6778                           tablat	equ	0xFF5
  6779                           prodh	equ	0xFF4
  6780                           prodl	equ	0xFF3
  6781                           postinc0	equ	0xFEE
  6782                           wreg	equ	0xFE8
  6783                           indf2	equ	0xFDF
  6784                           postinc2	equ	0xFDE
  6785                           postdec2	equ	0xFDD
  6786                           fsr2h	equ	0xFDA
  6787                           fsr2l	equ	0xFD9
  6788                           status	equ	0xFD8
  6789                           
  6790 ;; *************** function _init_XLCD *****************
  6791 ;; Defined at:
  6792 ;;		line 13 in file "LCD_user_functions.h"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;		None
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      void 
  6799 ;; Registers used:
  6800 ;;		wreg, status,2, status,0, cstack
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;Total ram usage:        0 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    3
  6813 ;; This function calls:
  6814 ;;		_BusyXLCD
  6815 ;;		_OpenXLCD
  6816 ;;		_WriteCmdXLCD
  6817 ;; This function is called by:
  6818 ;;		_main
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text23
  6823  003524                     __ptext23:
  6824                           	opt stack 0
  6825  003524                     _init_XLCD:
  6826                           	opt stack 27
  6827                           
  6828                           ;LCD_user_functions.h: 14: OpenXLCD(0b00101100 & 0b00111000);
  6829                           
  6830                           ;incstack = 0
  6831  003524  0E28               	movlw	40
  6832  003526  ECE9  F017         	call	_OpenXLCD
  6833  00352A                     l3309:
  6834  00352A  EC75  F01A         	call	_BusyXLCD	;wreg free
  6835  00352E  0900               	iorlw	0
  6836  003530  A4D8               	btfss	status,2,c
  6837  003532  D7FB               	goto	l3309
  6838                           
  6839                           ;LCD_user_functions.h: 21: WriteCmdXLCD(0x06);
  6840  003534  0E06               	movlw	6
  6841  003536  EC56  F01A         	call	_WriteCmdXLCD
  6842  00353A                     l3313:
  6843  00353A  EC75  F01A         	call	_BusyXLCD	;wreg free
  6844  00353E  0900               	iorlw	0
  6845  003540  A4D8               	btfss	status,2,c
  6846  003542  D7FB               	goto	l3313
  6847                           
  6848                           ;LCD_user_functions.h: 23: WriteCmdXLCD(0x0C);
  6849  003544  0E0C               	movlw	12
  6850  003546  EC56  F01A         	call	_WriteCmdXLCD
  6851  00354A                     l3317:
  6852  00354A  EC75  F01A         	call	_BusyXLCD	;wreg free
  6853  00354E  0900               	iorlw	0
  6854  003550  A4D8               	btfss	status,2,c
  6855  003552  D7FB               	goto	l3317
  6856                           
  6857                           ;LCD_user_functions.h: 25: WriteCmdXLCD(0x01);
  6858  003554  0E01               	movlw	1
  6859  003556  EC56  F01A         	call	_WriteCmdXLCD
  6860  00355A  0012               	return		;funcret
  6861  00355C                     __end_of_init_XLCD:
  6862                           	opt stack 0
  6863                           tblptru	equ	0xFF8
  6864                           tblptrh	equ	0xFF7
  6865                           tblptrl	equ	0xFF6
  6866                           tablat	equ	0xFF5
  6867                           prodh	equ	0xFF4
  6868                           prodl	equ	0xFF3
  6869                           postinc0	equ	0xFEE
  6870                           wreg	equ	0xFE8
  6871                           indf2	equ	0xFDF
  6872                           postinc2	equ	0xFDE
  6873                           postdec2	equ	0xFDD
  6874                           fsr2h	equ	0xFDA
  6875                           fsr2l	equ	0xFD9
  6876                           status	equ	0xFD8
  6877                           
  6878 ;; *************** function _OpenXLCD *****************
  6879 ;; Defined at:
  6880 ;;		line 19 in file "openxlcd.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;  lcdtype         1    wreg     unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  lcdtype         1    4[COMRAM] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      void 
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;Total ram usage:        1 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    2
  6901 ;; This function calls:
  6902 ;;		_BusyXLCD
  6903 ;;		_Delay10KTCYx
  6904 ;;		_DelayPORXLCD
  6905 ;;		_SetDDRamAddr
  6906 ;;		_WriteCmdXLCD
  6907 ;; This function is called by:
  6908 ;;		_init_XLCD
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text24
  6913  002FD2                     __ptext24:
  6914                           	opt stack 0
  6915  002FD2                     _OpenXLCD:
  6916                           	opt stack 27
  6917                           
  6918                           ;incstack = 0
  6919                           ;OpenXLCD@lcdtype stored from wreg
  6920  002FD2  6E05               	movwf	OpenXLCD@lcdtype,c
  6921                           
  6922                           ;openxlcd.c: 31: PORTB &= 0xf0;
  6923  002FD4  0EF0               	movlw	240
  6924  002FD6  1681               	andwf	3969,f,c	;volatile
  6925                           
  6926                           ;openxlcd.c: 32: TRISB &= 0xF0;
  6927  002FD8  0EF0               	movlw	240
  6928  002FDA  1693               	andwf	3987,f,c	;volatile
  6929                           
  6930                           ;openxlcd.c: 35: TRISCbits.RC2 = 0;
  6931  002FDC  9494               	bcf	3988,2,c	;volatile
  6932                           
  6933                           ;openxlcd.c: 36: TRISCbits.RC0 = 0;
  6934  002FDE  9094               	bcf	3988,0,c	;volatile
  6935                           
  6936                           ;openxlcd.c: 37: TRISCbits.RC1 = 0;
  6937  002FE0  9294               	bcf	3988,1,c	;volatile
  6938                           
  6939                           ;openxlcd.c: 38: LATCbits.LATC2 = 0;
  6940  002FE2  948B               	bcf	3979,2,c	;volatile
  6941                           
  6942                           ;openxlcd.c: 39: LATCbits.LATC0 = 0;
  6943  002FE4  908B               	bcf	3979,0,c	;volatile
  6944                           
  6945                           ;openxlcd.c: 40: LATCbits.LATC1 = 0;
  6946  002FE6  928B               	bcf	3979,1,c	;volatile
  6947                           
  6948                           ;openxlcd.c: 43: DelayPORXLCD();
  6949  002FE8  ECA7  F01B         	call	_DelayPORXLCD	;wreg free
  6950                           
  6951                           ;openxlcd.c: 45: WriteCmdXLCD(0x30);
  6952  002FEC  0E30               	movlw	48
  6953  002FEE  EC56  F01A         	call	_WriteCmdXLCD
  6954                           
  6955                           ;openxlcd.c: 46: Delay10KTCYx(0x05);
  6956  002FF2  0E05               	movlw	5
  6957  002FF4  EC7C  F01B         	call	_Delay10KTCYx
  6958                           
  6959                           ;openxlcd.c: 48: WriteCmdXLCD(0x30);
  6960  002FF8  0E30               	movlw	48
  6961  002FFA  EC56  F01A         	call	_WriteCmdXLCD
  6962                           
  6963                           ;openxlcd.c: 49: Delay10KTCYx(0x01);
  6964  002FFE  0E01               	movlw	1
  6965  003000  EC7C  F01B         	call	_Delay10KTCYx
  6966                           
  6967                           ;openxlcd.c: 52: WriteCmdXLCD(0x32);
  6968  003004  0E32               	movlw	50
  6969  003006  EC56  F01A         	call	_WriteCmdXLCD
  6970  00300A                     l2883:
  6971  00300A  EC75  F01A         	call	_BusyXLCD	;wreg free
  6972  00300E  0900               	iorlw	0
  6973  003010  A4D8               	btfss	status,2,c
  6974  003012  D7FB               	goto	l2883
  6975  003014                     l2885:
  6976  003014  EC75  F01A         	call	_BusyXLCD	;wreg free
  6977  003018  0900               	iorlw	0
  6978  00301A  A4D8               	btfss	status,2,c
  6979  00301C  D7FB               	goto	l2885
  6980                           
  6981                           ;openxlcd.c: 59: WriteCmdXLCD(lcdtype);
  6982  00301E  5005               	movf	OpenXLCD@lcdtype,w,c
  6983  003020  EC56  F01A         	call	_WriteCmdXLCD
  6984  003024                     l2889:
  6985  003024  EC75  F01A         	call	_BusyXLCD	;wreg free
  6986  003028  0900               	iorlw	0
  6987  00302A  A4D8               	btfss	status,2,c
  6988  00302C  D7FB               	goto	l2889
  6989                           
  6990                           ;openxlcd.c: 63: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  6991  00302E  0E08               	movlw	8
  6992  003030  EC56  F01A         	call	_WriteCmdXLCD
  6993  003034                     l2893:
  6994  003034  EC75  F01A         	call	_BusyXLCD	;wreg free
  6995  003038  0900               	iorlw	0
  6996  00303A  A4D8               	btfss	status,2,c
  6997  00303C  D7FB               	goto	l2893
  6998                           
  6999                           ;openxlcd.c: 65: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  7000  00303E  0E0F               	movlw	15
  7001  003040  EC56  F01A         	call	_WriteCmdXLCD
  7002  003044                     l2897:
  7003  003044  EC75  F01A         	call	_BusyXLCD	;wreg free
  7004  003048  0900               	iorlw	0
  7005  00304A  A4D8               	btfss	status,2,c
  7006  00304C  D7FB               	goto	l2897
  7007                           
  7008                           ;openxlcd.c: 69: WriteCmdXLCD(0x01);
  7009  00304E  0E01               	movlw	1
  7010  003050  EC56  F01A         	call	_WriteCmdXLCD
  7011  003054                     l2901:
  7012  003054  EC75  F01A         	call	_BusyXLCD	;wreg free
  7013  003058  0900               	iorlw	0
  7014  00305A  A4D8               	btfss	status,2,c
  7015  00305C  D7FB               	goto	l2901
  7016                           
  7017                           ;openxlcd.c: 73: WriteCmdXLCD(0b00000100);
  7018  00305E  0E04               	movlw	4
  7019  003060  EC56  F01A         	call	_WriteCmdXLCD
  7020  003064                     l2905:
  7021  003064  EC75  F01A         	call	_BusyXLCD	;wreg free
  7022  003068  0900               	iorlw	0
  7023  00306A  A4D8               	btfss	status,2,c
  7024  00306C  D7FB               	goto	l2905
  7025                           
  7026                           ;openxlcd.c: 77: SetDDRamAddr(0x80);
  7027  00306E  0E80               	movlw	128
  7028  003070  ECCE  F019         	call	_SetDDRamAddr
  7029  003074  0012               	return	
  7030  003076                     __end_of_OpenXLCD:
  7031                           	opt stack 0
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           postinc0	equ	0xFEE
  7039                           wreg	equ	0xFE8
  7040                           indf2	equ	0xFDF
  7041                           postinc2	equ	0xFDE
  7042                           postdec2	equ	0xFDD
  7043                           fsr2h	equ	0xFDA
  7044                           fsr2l	equ	0xFD9
  7045                           status	equ	0xFD8
  7046                           
  7047 ;; *************** function _WriteCmdXLCD *****************
  7048 ;; Defined at:
  7049 ;;		line 13 in file "wcmdxlcd.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;  cmd             1    wreg     unsigned char 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;  cmd             1    0[COMRAM] unsigned char 
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  1    wreg      void 
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;Total ram usage:        1 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    1
  7070 ;; This function calls:
  7071 ;;		_DelayFor18TCY
  7072 ;; This function is called by:
  7073 ;;		_init_XLCD
  7074 ;;		_OpenXLCD
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text25
  7079  0034AC                     __ptext25:
  7080                           	opt stack 0
  7081  0034AC                     _WriteCmdXLCD:
  7082                           	opt stack 28
  7083                           
  7084                           ;incstack = 0
  7085                           ;WriteCmdXLCD@cmd stored from wreg
  7086  0034AC  6E01               	movwf	WriteCmdXLCD@cmd,c
  7087                           
  7088                           ;wcmdxlcd.c: 32: TRISB &= 0xf0;
  7089  0034AE  0EF0               	movlw	240
  7090  0034B0  1693               	andwf	3987,f,c	;volatile
  7091                           
  7092                           ;wcmdxlcd.c: 33: PORTB &= 0xf0;
  7093  0034B2  0EF0               	movlw	240
  7094  0034B4  1681               	andwf	3969,f,c	;volatile
  7095                           
  7096                           ;wcmdxlcd.c: 34: PORTB |= (cmd>>4)&0x0f;
  7097  0034B6  3801               	swapf	WriteCmdXLCD@cmd,w,c
  7098  0034B8  0B0F               	andlw	15
  7099  0034BA  0B0F               	andlw	15
  7100  0034BC  1281               	iorwf	3969,f,c	;volatile
  7101                           
  7102                           ;wcmdxlcd.c: 36: LATCbits.LATC2 = 0;
  7103  0034BE  948B               	bcf	3979,2,c	;volatile
  7104                           
  7105                           ;wcmdxlcd.c: 37: LATCbits.LATC0 = 0;
  7106  0034C0  908B               	bcf	3979,0,c	;volatile
  7107                           
  7108                           ;wcmdxlcd.c: 38: DelayFor18TCY();
  7109  0034C2  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7110                           
  7111                           ;wcmdxlcd.c: 39: LATCbits.LATC1 = 1;
  7112  0034C6  828B               	bsf	3979,1,c	;volatile
  7113                           
  7114                           ;wcmdxlcd.c: 40: DelayFor18TCY();
  7115  0034C8  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7116                           
  7117                           ;wcmdxlcd.c: 41: LATCbits.LATC1 = 0;
  7118  0034CC  928B               	bcf	3979,1,c	;volatile
  7119                           
  7120                           ;wcmdxlcd.c: 46: PORTB &= 0xf0;
  7121  0034CE  0EF0               	movlw	240
  7122  0034D0  1681               	andwf	3969,f,c	;volatile
  7123                           
  7124                           ;wcmdxlcd.c: 47: PORTB |= cmd&0x0f;
  7125  0034D2  5001               	movf	WriteCmdXLCD@cmd,w,c
  7126  0034D4  0B0F               	andlw	15
  7127  0034D6  1281               	iorwf	3969,f,c	;volatile
  7128                           
  7129                           ;wcmdxlcd.c: 49: DelayFor18TCY();
  7130  0034D8  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7131                           
  7132                           ;wcmdxlcd.c: 50: LATCbits.LATC1 = 1;
  7133  0034DC  828B               	bsf	3979,1,c	;volatile
  7134                           
  7135                           ;wcmdxlcd.c: 51: DelayFor18TCY();
  7136  0034DE  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7137                           
  7138                           ;wcmdxlcd.c: 52: LATCbits.LATC1 = 0;
  7139  0034E2  928B               	bcf	3979,1,c	;volatile
  7140                           
  7141                           ;wcmdxlcd.c: 56: TRISB |= 0x0f;
  7142  0034E4  0E0F               	movlw	15
  7143  0034E6  1293               	iorwf	3987,f,c	;volatile
  7144  0034E8  0012               	return	
  7145  0034EA                     __end_of_WriteCmdXLCD:
  7146                           	opt stack 0
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           prodh	equ	0xFF4
  7152                           prodl	equ	0xFF3
  7153                           postinc0	equ	0xFEE
  7154                           wreg	equ	0xFE8
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8
  7161                           
  7162 ;; *************** function _SetDDRamAddr *****************
  7163 ;; Defined at:
  7164 ;;		line 13 in file "setddram.c"
  7165 ;; Parameters:    Size  Location     Type
  7166 ;;  DDaddr          1    wreg     unsigned char 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;  DDaddr          1    3[COMRAM] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      void 
  7171 ;; Registers used:
  7172 ;;		wreg, status,2, status,0, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;Total ram usage:        4 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    1
  7185 ;; This function calls:
  7186 ;;		_DelayFor18TCY
  7187 ;; This function is called by:
  7188 ;;		_main
  7189 ;;		_OpenXLCD
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text26
  7194  00339C                     __ptext26:
  7195                           	opt stack 0
  7196  00339C                     _SetDDRamAddr:
  7197                           	opt stack 27
  7198                           
  7199                           ;incstack = 0
  7200                           ;SetDDRamAddr@DDaddr stored from wreg
  7201  00339C  6E04               	movwf	SetDDRamAddr@DDaddr,c
  7202                           
  7203                           ;setddram.c: 32: TRISB &= 0xf0;
  7204  00339E  0EF0               	movlw	240
  7205  0033A0  1693               	andwf	3987,f,c	;volatile
  7206                           
  7207                           ;setddram.c: 33: PORTB &= 0xf0;
  7208  0033A2  0EF0               	movlw	240
  7209  0033A4  1681               	andwf	3969,f,c	;volatile
  7210                           
  7211                           ;setddram.c: 34: PORTB |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  7212  0033A6  5004               	movf	SetDDRamAddr@DDaddr,w,c
  7213  0033A8  6E01               	movwf	??_SetDDRamAddr& (0+255),c
  7214  0033AA  6A02               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  7215  0033AC  8E01               	bsf	??_SetDDRamAddr,7,c
  7216  0033AE  0E04               	movlw	4
  7217  0033B0  6E03               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  7218  0033B2                     u1985:
  7219  0033B2  3402               	rlcf	??_SetDDRamAddr+1,w,c
  7220  0033B4  3202               	rrcf	??_SetDDRamAddr+1,f,c
  7221  0033B6  3201               	rrcf	??_SetDDRamAddr,f,c
  7222  0033B8  2E03               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  7223  0033BA  D7FB               	goto	u1985
  7224  0033BC  5001               	movf	??_SetDDRamAddr,w,c
  7225  0033BE  0B0F               	andlw	15
  7226  0033C0  1281               	iorwf	3969,f,c	;volatile
  7227                           
  7228                           ;setddram.c: 36: LATCbits.LATC2 = 0;
  7229  0033C2  948B               	bcf	3979,2,c	;volatile
  7230                           
  7231                           ;setddram.c: 37: LATCbits.LATC0 = 0;
  7232  0033C4  908B               	bcf	3979,0,c	;volatile
  7233                           
  7234                           ;setddram.c: 38: DelayFor18TCY();
  7235  0033C6  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7236                           
  7237                           ;setddram.c: 39: LATCbits.LATC1 = 1;
  7238  0033CA  828B               	bsf	3979,1,c	;volatile
  7239                           
  7240                           ;setddram.c: 40: DelayFor18TCY();
  7241  0033CC  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7242                           
  7243                           ;setddram.c: 41: LATCbits.LATC1 = 0;
  7244  0033D0  928B               	bcf	3979,1,c	;volatile
  7245                           
  7246                           ;setddram.c: 46: PORTB &= 0xf0;
  7247  0033D2  0EF0               	movlw	240
  7248  0033D4  1681               	andwf	3969,f,c	;volatile
  7249                           
  7250                           ;setddram.c: 47: PORTB |= (DDaddr&0x0f);
  7251  0033D6  5004               	movf	SetDDRamAddr@DDaddr,w,c
  7252  0033D8  0B0F               	andlw	15
  7253  0033DA  1281               	iorwf	3969,f,c	;volatile
  7254                           
  7255                           ;setddram.c: 49: DelayFor18TCY();
  7256  0033DC  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7257                           
  7258                           ;setddram.c: 50: LATCbits.LATC1 = 1;
  7259  0033E0  828B               	bsf	3979,1,c	;volatile
  7260                           
  7261                           ;setddram.c: 51: DelayFor18TCY();
  7262  0033E2  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7263                           
  7264                           ;setddram.c: 52: LATCbits.LATC1 = 0;
  7265  0033E6  928B               	bcf	3979,1,c	;volatile
  7266                           
  7267                           ;setddram.c: 56: TRISB |= 0x0f;
  7268  0033E8  0E0F               	movlw	15
  7269  0033EA  1293               	iorwf	3987,f,c	;volatile
  7270  0033EC  0012               	return	
  7271  0033EE                     __end_of_SetDDRamAddr:
  7272                           	opt stack 0
  7273                           tblptru	equ	0xFF8
  7274                           tblptrh	equ	0xFF7
  7275                           tblptrl	equ	0xFF6
  7276                           tablat	equ	0xFF5
  7277                           prodh	equ	0xFF4
  7278                           prodl	equ	0xFF3
  7279                           postinc0	equ	0xFEE
  7280                           wreg	equ	0xFE8
  7281                           indf2	equ	0xFDF
  7282                           postinc2	equ	0xFDE
  7283                           postdec2	equ	0xFDD
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function _DelayPORXLCD *****************
  7289 ;; Defined at:
  7290 ;;		line 35 in file "LCD_user_functions.h"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;		None
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;Total ram usage:        0 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    1
  7311 ;; This function calls:
  7312 ;;		_Delay1KTCYx
  7313 ;; This function is called by:
  7314 ;;		_OpenXLCD
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text27
  7319  00374E                     __ptext27:
  7320                           	opt stack 0
  7321  00374E                     _DelayPORXLCD:
  7322                           	opt stack 27
  7323                           
  7324                           ;LCD_user_functions.h: 36: Delay1KTCYx(30);
  7325                           
  7326                           ;incstack = 0
  7327  00374E  0E1E               	movlw	30
  7328  003750  EC92  F01B         	call	_Delay1KTCYx
  7329  003754  0012               	return		;funcret
  7330  003756                     __end_of_DelayPORXLCD:
  7331                           	opt stack 0
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _Delay1KTCYx *****************
  7348 ;; Defined at:
  7349 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic18\d1ktcyx.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  unit            1    wreg     unsigned char 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  unit            1    0[COMRAM] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;Total ram usage:        1 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; This function calls:
  7370 ;;		Nothing
  7371 ;; This function is called by:
  7372 ;;		_DelayPORXLCD
  7373 ;;		_DelayXLCD
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text28
  7378  003724                     __ptext28:
  7379                           	opt stack 0
  7380  003724                     _Delay1KTCYx:
  7381                           	opt stack 27
  7382                           
  7383                           ;incstack = 0
  7384                           ;Delay1KTCYx@unit stored from wreg
  7385  003724  6E01               	movwf	Delay1KTCYx@unit,c
  7386  003726  0EC8               	movlw	200
  7387  003728                     u3757:
  7388  003728  D000               	nop2	
  7389  00372A  2EE8               	decfsz	wreg,f,c
  7390  00372C  D7FD               	bra	u3757
  7391  00372E  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7392  003730  D7FA               	goto	l2523
  7393  003732  0012               	return	
  7394  003734                     __end_of_Delay1KTCYx:
  7395                           	opt stack 0
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           prodh	equ	0xFF4
  7401                           prodl	equ	0xFF3
  7402                           postinc0	equ	0xFEE
  7403                           wreg	equ	0xFE8
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8
  7410                           
  7411 ;; *************** function _Delay10KTCYx *****************
  7412 ;; Defined at:
  7413 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic18\d10ktcyx.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;  unit            1    wreg     unsigned char 
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;  unit            1    1[COMRAM] unsigned char 
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		wreg
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;Total ram usage:        2 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; This function calls:
  7434 ;;		Nothing
  7435 ;; This function is called by:
  7436 ;;		_OpenXLCD
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text29
  7441  0036F8                     __ptext29:
  7442                           	opt stack 0
  7443  0036F8                     _Delay10KTCYx:
  7444                           	opt stack 28
  7445                           
  7446                           ;incstack = 0
  7447                           ;Delay10KTCYx@unit stored from wreg
  7448  0036F8  6E02               	movwf	Delay10KTCYx@unit,c
  7449  0036FA  0E0D               	movlw	13
  7450  0036FC  6E01               	movwf	??_Delay10KTCYx& (0+255),c
  7451  0036FE  0EFC               	movlw	252
  7452  003700                     u3767:
  7453  003700  2EE8               	decfsz	wreg,f,c
  7454  003702  D7FE               	bra	u3767
  7455  003704  2E01               	decfsz	??_Delay10KTCYx& (0+255),f,c
  7456  003706  D7FC               	bra	u3767
  7457  003708  2E02               	decfsz	Delay10KTCYx@unit,f,c
  7458  00370A  D7F7               	goto	l2649
  7459  00370C  0012               	return	
  7460  00370E                     __end_of_Delay10KTCYx:
  7461                           	opt stack 0
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           postinc0	equ	0xFEE
  7469                           wreg	equ	0xFE8
  7470                           indf2	equ	0xFDF
  7471                           postinc2	equ	0xFDE
  7472                           postdec2	equ	0xFDD
  7473                           fsr2h	equ	0xFDA
  7474                           fsr2l	equ	0xFD9
  7475                           status	equ	0xFD8
  7476                           
  7477 ;; *************** function _BusyXLCD *****************
  7478 ;; Defined at:
  7479 ;;		line 11 in file "busyxlcd.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;		None
  7484 ;; Return value:  Size  Location     Type
  7485 ;;                  1    wreg      unsigned char 
  7486 ;; Registers used:
  7487 ;;		wreg, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7497 ;;Total ram usage:        0 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    1
  7500 ;; This function calls:
  7501 ;;		_DelayFor18TCY
  7502 ;; This function is called by:
  7503 ;;		_init_XLCD
  7504 ;;		_OpenXLCD
  7505 ;;		_putrsXLCD
  7506 ;;		_putsXLCD
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           	psect	text30
  7511  0034EA                     __ptext30:
  7512                           	opt stack 0
  7513  0034EA                     _BusyXLCD:
  7514                           	opt stack 28
  7515                           
  7516                           ;busyxlcd.c: 13: LATCbits.LATC2 = 1;
  7517                           
  7518                           ;incstack = 0
  7519  0034EA  848B               	bsf	3979,2,c	;volatile
  7520                           
  7521                           ;busyxlcd.c: 14: LATCbits.LATC0 = 0;
  7522  0034EC  908B               	bcf	3979,0,c	;volatile
  7523                           
  7524                           ;busyxlcd.c: 15: DelayFor18TCY();
  7525  0034EE  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7526                           
  7527                           ;busyxlcd.c: 16: LATCbits.LATC1 = 1;
  7528  0034F2  828B               	bsf	3979,1,c	;volatile
  7529                           
  7530                           ;busyxlcd.c: 17: DelayFor18TCY();
  7531  0034F4  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7532                           
  7533                           ;busyxlcd.c: 35: if(PORTB&0x08)
  7534  0034F8  A681               	btfss	3969,3,c	;volatile
  7535  0034FA  D00A               	goto	l114
  7536                           
  7537                           ;busyxlcd.c: 37: {
  7538                           ;busyxlcd.c: 38: LATCbits.LATC1 = 0;
  7539  0034FC  928B               	bcf	3979,1,c	;volatile
  7540                           
  7541                           ;busyxlcd.c: 39: DelayFor18TCY();
  7542  0034FE  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7543                           
  7544                           ;busyxlcd.c: 40: LATCbits.LATC1 = 1;
  7545  003502  828B               	bsf	3979,1,c	;volatile
  7546                           
  7547                           ;busyxlcd.c: 41: DelayFor18TCY();
  7548  003504  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7549                           
  7550                           ;busyxlcd.c: 42: LATCbits.LATC1 = 0;
  7551  003508  928B               	bcf	3979,1,c	;volatile
  7552                           
  7553                           ;busyxlcd.c: 43: LATCbits.LATC2 = 0;
  7554  00350A  948B               	bcf	3979,2,c	;volatile
  7555                           
  7556                           ;busyxlcd.c: 44: return 1;
  7557  00350C  0E01               	movlw	1
  7558                           
  7559                           ;busyxlcd.c: 45: }
  7560  00350E  0012               	return	
  7561  003510                     l114:
  7562                           
  7563                           ;busyxlcd.c: 46: else
  7564                           ;busyxlcd.c: 47: {
  7565                           ;busyxlcd.c: 48: LATCbits.LATC1 = 0;
  7566  003510  928B               	bcf	3979,1,c	;volatile
  7567                           
  7568                           ;busyxlcd.c: 49: DelayFor18TCY();
  7569  003512  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7570                           
  7571                           ;busyxlcd.c: 50: LATCbits.LATC1 = 1;
  7572  003516  828B               	bsf	3979,1,c	;volatile
  7573                           
  7574                           ;busyxlcd.c: 51: DelayFor18TCY();
  7575  003518  EC6D  F01B         	call	_DelayFor18TCY	;wreg free
  7576                           
  7577                           ;busyxlcd.c: 52: LATCbits.LATC1 = 0;
  7578  00351C  928B               	bcf	3979,1,c	;volatile
  7579                           
  7580                           ;busyxlcd.c: 53: LATCbits.LATC2 = 0;
  7581  00351E  948B               	bcf	3979,2,c	;volatile
  7582                           
  7583                           ;busyxlcd.c: 54: return 0;
  7584  003520  0E00               	movlw	0
  7585  003522  0012               	return	
  7586  003524                     __end_of_BusyXLCD:
  7587                           	opt stack 0
  7588                           tblptru	equ	0xFF8
  7589                           tblptrh	equ	0xFF7
  7590                           tblptrl	equ	0xFF6
  7591                           tablat	equ	0xFF5
  7592                           prodh	equ	0xFF4
  7593                           prodl	equ	0xFF3
  7594                           postinc0	equ	0xFEE
  7595                           wreg	equ	0xFE8
  7596                           indf2	equ	0xFDF
  7597                           postinc2	equ	0xFDE
  7598                           postdec2	equ	0xFDD
  7599                           fsr2h	equ	0xFDA
  7600                           fsr2l	equ	0xFD9
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function _DelayFor18TCY *****************
  7604 ;; Defined at:
  7605 ;;		line 28 in file "LCD_user_functions.h"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;		None
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;		None
  7610 ;; Return value:  Size  Location     Type
  7611 ;;                  1    wreg      void 
  7612 ;; Registers used:
  7613 ;;		None
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;Total ram usage:        0 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_BusyXLCD
  7629 ;;		_SetDDRamAddr
  7630 ;;		_WriteCmdXLCD
  7631 ;;		_WriteDataXLCD
  7632 ;;		_ReadAddrXLCD
  7633 ;;		_ReadDataXLCD
  7634 ;;		_SetCGRamAddr
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text31
  7639  0036DA                     __ptext31:
  7640                           	opt stack 0
  7641  0036DA                     _DelayFor18TCY:
  7642                           	opt stack 28
  7643                           
  7644                           ;LCD_user_functions.h: 29: __nop(); __nop(); __nop(); __nop();
  7645                           
  7646                           ;incstack = 0
  7647  0036DA  F000               	nop	
  7648  0036DC  F000               	nop	
  7649  0036DE  F000               	nop	
  7650  0036E0  F000               	nop	
  7651                           
  7652                           ;LCD_user_functions.h: 30: __nop(); __nop(); __nop(); __nop();
  7653  0036E2  F000               	nop	
  7654  0036E4  F000               	nop	
  7655  0036E6  F000               	nop	
  7656  0036E8  F000               	nop	
  7657                           
  7658                           ;LCD_user_functions.h: 31: __nop(); __nop(); __nop(); __nop();
  7659  0036EA  F000               	nop	
  7660  0036EC  F000               	nop	
  7661  0036EE  F000               	nop	
  7662  0036F0  F000               	nop	
  7663                           
  7664                           ;LCD_user_functions.h: 32: __nop(); __nop();
  7665  0036F2  F000               	nop	
  7666  0036F4  F000               	nop	
  7667                           
  7668                           ;LCD_user_functions.h: 33: return;
  7669  0036F6  0012               	return		;funcret
  7670  0036F8                     __end_of_DelayFor18TCY:
  7671                           	opt stack 0
  7672                           tblptru	equ	0xFF8
  7673                           tblptrh	equ	0xFF7
  7674                           tblptrl	equ	0xFF6
  7675                           tablat	equ	0xFF5
  7676                           prodh	equ	0xFF4
  7677                           prodl	equ	0xFF3
  7678                           postinc0	equ	0xFEE
  7679                           wreg	equ	0xFE8
  7680                           indf2	equ	0xFDF
  7681                           postinc2	equ	0xFDE
  7682                           postdec2	equ	0xFDD
  7683                           fsr2h	equ	0xFDA
  7684                           fsr2l	equ	0xFD9
  7685                           status	equ	0xFD8
  7686                           
  7687 ;; *************** function _init_ADC *****************
  7688 ;; Defined at:
  7689 ;;		line 5 in file "ADC_user_functions.h"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;		None
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;  portconfig      1   10[COMRAM] unsigned char 
  7694 ;;  config2         1    9[COMRAM] unsigned char 
  7695 ;;  config1         1    8[COMRAM] unsigned char 
  7696 ;;  i               1    7[COMRAM] unsigned char 
  7697 ;;  config3         1    6[COMRAM] unsigned char 
  7698 ;;  channel         1    5[COMRAM] unsigned char 
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  1    wreg      void 
  7701 ;; Registers used:
  7702 ;;		wreg, status,2, status,0, cstack
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7709 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7711 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7712 ;;Total ram usage:        6 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    1
  7715 ;; This function calls:
  7716 ;;		_CloseADC
  7717 ;;		_OpenADC
  7718 ;; This function is called by:
  7719 ;;		_main
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           	psect	text32
  7724  003590                     __ptext32:
  7725                           	opt stack 0
  7726  003590                     _init_ADC:
  7727                           	opt stack 29
  7728                           
  7729                           ;ADC_user_functions.h: 14: unsigned char channel=0x00,config1=0x00,config2=0x00,config3=
      +                          0x00,portconfig=0x00,i=0;
  7730                           
  7731                           ;incstack = 0
  7732  003590  0E00               	movlw	0
  7733  003592  6E06               	movwf	init_ADC@channel,c
  7734  003594  0E00               	movlw	0
  7735  003596  6E09               	movwf	init_ADC@config1,c
  7736  003598  0E00               	movlw	0
  7737  00359A  6E0A               	movwf	init_ADC@config2,c
  7738  00359C  0E00               	movlw	0
  7739  00359E  6E07               	movwf	init_ADC@config3,c
  7740  0035A0  0E00               	movlw	0
  7741  0035A2  6E0B               	movwf	init_ADC@portconfig,c
  7742  0035A4  0E00               	movlw	0
  7743  0035A6  6E08               	movwf	init_ADC@i,c
  7744                           
  7745                           ;ADC_user_functions.h: 16: config1 = 0b10001111 | 0b11111111 | 0b11110101 ;
  7746  0035A8  6809               	setf	init_ADC@config1,c
  7747                           
  7748                           ;ADC_user_functions.h: 17: config2 = 0b10000111 | 0b11111111 | 0b11111101 ;
  7749  0035AA  680A               	setf	init_ADC@config2,c
  7750                           
  7751                           ;ADC_user_functions.h: 18: portconfig = 0b11111101 ;
  7752  0035AC  0EFD               	movlw	253
  7753  0035AE  6E0B               	movwf	init_ADC@portconfig,c
  7754                           
  7755                           ;ADC_user_functions.h: 20: CloseADC();
  7756  0035B0  ECAB  F01B         	call	_CloseADC	;wreg free
  7757                           
  7758                           ;ADC_user_functions.h: 21: OpenADC(0b10001111 & 0b11111111 & 0b11110101, 0b10000111 & 0b
      +                          11111111 & 0b11111101, 0b11111101);
  7759  0035B4  0E85               	movlw	133
  7760  0035B6  6E01               	movwf	OpenADC@config2,c
  7761  0035B8  0EFD               	movlw	253
  7762  0035BA  6E02               	movwf	OpenADC@portconfig,c
  7763  0035BC  0E85               	movlw	133
  7764  0035BE  EC71  F019         	call	_OpenADC
  7765  0035C2  0012               	return		;funcret
  7766  0035C4                     __end_of_init_ADC:
  7767                           	opt stack 0
  7768                           tblptru	equ	0xFF8
  7769                           tblptrh	equ	0xFF7
  7770                           tblptrl	equ	0xFF6
  7771                           tablat	equ	0xFF5
  7772                           prodh	equ	0xFF4
  7773                           prodl	equ	0xFF3
  7774                           postinc0	equ	0xFEE
  7775                           wreg	equ	0xFE8
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           fsr2h	equ	0xFDA
  7780                           fsr2l	equ	0xFD9
  7781                           status	equ	0xFD8
  7782                           
  7783 ;; *************** function _OpenADC *****************
  7784 ;; Defined at:
  7785 ;;		line 68 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic18\plib\ADC\adcopen.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  config          1    wreg     unsigned char 
  7788 ;;  config2         1    0[COMRAM] unsigned char 
  7789 ;;  portconfig      1    1[COMRAM] unsigned char 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  config          1    4[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7801 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;Total ram usage:        5 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		_init_ADC
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text33
  7815  0032E2                     __ptext33:
  7816                           	opt stack 0
  7817  0032E2                     _OpenADC:
  7818                           	opt stack 29
  7819                           
  7820                           ;incstack = 0
  7821                           ;OpenADC@config stored from wreg
  7822  0032E2  6E05               	movwf	OpenADC@config,c
  7823  0032E4  0E00               	movlw	0
  7824  0032E6  6EC2               	movwf	4034,c	;volatile
  7825  0032E8  0E00               	movlw	0
  7826  0032EA  6EC0               	movwf	4032,c	;volatile
  7827  0032EC  90D8               	bcf	status,0,c
  7828  0032EE  3001               	rrcf	OpenADC@config2,w,c
  7829  0032F0  0B3C               	andlw	60
  7830  0032F2  6EC2               	movwf	4034,c	;volatile
  7831  0032F4  C001  F003         	movff	OpenADC@config2,??_OpenADC
  7832  0032F8  3A03               	swapf	??_OpenADC,f,c
  7833  0032FA  0EF0               	movlw	240
  7834  0032FC  1603               	andwf	??_OpenADC,f,c
  7835  0032FE  0E30               	movlw	48
  7836  003300  1603               	andwf	??_OpenADC,f,c
  7837  003302  5002               	movf	OpenADC@portconfig,w,c
  7838  003304  0B0F               	andlw	15
  7839  003306  1003               	iorwf	??_OpenADC,w,c
  7840  003308  6EC1               	movwf	4033,c	;volatile
  7841  00330A  C005  F003         	movff	OpenADC@config,??_OpenADC
  7842  00330E  90D8               	bcf	status,0,c
  7843  003310  3603               	rlcf	??_OpenADC,f,c
  7844  003312  90D8               	bcf	status,0,c
  7845  003314  3603               	rlcf	??_OpenADC,f,c
  7846  003316  0E38               	movlw	56
  7847  003318  1603               	andwf	??_OpenADC,f,c
  7848  00331A  C005  F004         	movff	OpenADC@config,??_OpenADC+1
  7849  00331E  3A04               	swapf	??_OpenADC+1,f,c
  7850  003320  0E0F               	movlw	15
  7851  003322  1604               	andwf	??_OpenADC+1,f,c
  7852  003324  0E07               	movlw	7
  7853  003326  1604               	andwf	??_OpenADC+1,f,c
  7854  003328  5005               	movf	OpenADC@config,w,c
  7855  00332A  0B80               	andlw	128
  7856  00332C  1004               	iorwf	??_OpenADC+1,w,c
  7857  00332E  1003               	iorwf	??_OpenADC,w,c
  7858  003330  6EC0               	movwf	4032,c	;volatile
  7859  003332  AE01               	btfss	OpenADC@config2,7,c
  7860  003334  D003               	goto	l409
  7861  003336  9C9E               	bcf	3998,6,c	;volatile
  7862  003338  8C9D               	bsf	3997,6,c	;volatile
  7863  00333A  8CF2               	bsf	intcon,6,c	;volatile
  7864  00333C                     l409:
  7865  00333C  80C2               	bsf	4034,0,c	;volatile
  7866  00333E  0012               	return		;funcret
  7867  003340                     __end_of_OpenADC:
  7868                           	opt stack 0
  7869                           tblptru	equ	0xFF8
  7870                           tblptrh	equ	0xFF7
  7871                           tblptrl	equ	0xFF6
  7872                           tablat	equ	0xFF5
  7873                           prodh	equ	0xFF4
  7874                           prodl	equ	0xFF3
  7875                           intcon	equ	0xFF2
  7876                           postinc0	equ	0xFEE
  7877                           wreg	equ	0xFE8
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function _CloseADC *****************
  7886 ;; Defined at:
  7887 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic18\plib\ADC\adcclose.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  1    wreg      void 
  7894 ;; Registers used:
  7895 ;;		None
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;Total ram usage:        0 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; This function calls:
  7908 ;;		Nothing
  7909 ;; This function is called by:
  7910 ;;		_init_ADC
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           	psect	text34
  7915  003756                     __ptext34:
  7916                           	opt stack 0
  7917  003756                     _CloseADC:
  7918                           	opt stack 29
  7919                           
  7920                           ;incstack = 0
  7921  003756  90C2               	bcf	4034,0,c	;volatile
  7922  003758  9C9D               	bcf	3997,6,c	;volatile
  7923  00375A  0012               	return		;funcret
  7924  00375C                     __end_of_CloseADC:
  7925                           	opt stack 0
  7926                           tblptru	equ	0xFF8
  7927                           tblptrh	equ	0xFF7
  7928                           tblptrl	equ	0xFF6
  7929                           tablat	equ	0xFF5
  7930                           prodh	equ	0xFF4
  7931                           prodl	equ	0xFF3
  7932                           intcon	equ	0xFF2
  7933                           postinc0	equ	0xFEE
  7934                           wreg	equ	0xFE8
  7935                           indf2	equ	0xFDF
  7936                           postinc2	equ	0xFDE
  7937                           postdec2	equ	0xFDD
  7938                           fsr2h	equ	0xFDA
  7939                           fsr2l	equ	0xFD9
  7940                           status	equ	0xFD8
  7941                           
  7942 ;; *************** function ___lwtoft *****************
  7943 ;; Defined at:
  7944 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;  c               2    8[COMRAM] unsigned int 
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;		None
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  3    8[COMRAM] float 
  7951 ;; Registers used:
  7952 ;;		wreg, status,2, status,0, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7958 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;Total ram usage:        3 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    1
  7965 ;; This function calls:
  7966 ;;		___ftpack
  7967 ;; This function is called by:
  7968 ;;		_main
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           	psect	text35
  7973  003698                     __ptext35:
  7974                           	opt stack 0
  7975  003698                     ___lwtoft:
  7976                           	opt stack 29
  7977                           
  7978                           ;incstack = 0
  7979  003698  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  7980  00369C  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  7981  0036A0  6A03               	clrf	___ftpack@arg+2,c
  7982  0036A2  0E8E               	movlw	142
  7983  0036A4  6E04               	movwf	___ftpack@exp,c
  7984  0036A6  0E00               	movlw	0
  7985  0036A8  6E05               	movwf	___ftpack@sign,c
  7986  0036AA  EC92  F017         	call	___ftpack	;wreg free
  7987  0036AE  C001  F009         	movff	?___ftpack,?___lwtoft
  7988  0036B2  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  7989  0036B6  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  7990  0036BA  0012               	return	
  7991  0036BC                     __end_of___lwtoft:
  7992                           	opt stack 0
  7993                           tblptru	equ	0xFF8
  7994                           tblptrh	equ	0xFF7
  7995                           tblptrl	equ	0xFF6
  7996                           tablat	equ	0xFF5
  7997                           prodh	equ	0xFF4
  7998                           prodl	equ	0xFF3
  7999                           intcon	equ	0xFF2
  8000                           postinc0	equ	0xFEE
  8001                           wreg	equ	0xFE8
  8002                           indf2	equ	0xFDF
  8003                           postinc2	equ	0xFDE
  8004                           postdec2	equ	0xFDD
  8005                           fsr2h	equ	0xFDA
  8006                           fsr2l	equ	0xFD9
  8007                           status	equ	0xFD8
  8008                           
  8009 ;; *************** function ___ftpack *****************
  8010 ;; Defined at:
  8011 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  arg             3    0[COMRAM] unsigned um
  8014 ;;  exp             1    3[COMRAM] unsigned char 
  8015 ;;  sign            1    4[COMRAM] unsigned char 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;		None
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  3    0[COMRAM] float 
  8020 ;; Registers used:
  8021 ;;		wreg, status,2, status,0
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8027 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8029 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8030 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8031 ;;Total ram usage:        8 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; This function calls:
  8034 ;;		Nothing
  8035 ;; This function is called by:
  8036 ;;		___ftadd
  8037 ;;		___ftdiv
  8038 ;;		___ftmul
  8039 ;;		___lltoft
  8040 ;;		___lwtoft
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           	psect	text36
  8045  002F24                     __ptext36:
  8046                           	opt stack 0
  8047  002F24                     ___ftpack:
  8048                           	opt stack 27
  8049                           
  8050                           ;incstack = 0
  8051  002F24  5004               	movf	___ftpack@exp,w,c
  8052  002F26  B4D8               	btfsc	status,2,c
  8053  002F28  D005               	goto	l2531
  8054  002F2A  5001               	movf	___ftpack@arg,w,c
  8055  002F2C  1002               	iorwf	___ftpack@arg+1,w,c
  8056  002F2E  1003               	iorwf	___ftpack@arg+2,w,c
  8057  002F30  A4D8               	btfss	status,2,c
  8058  002F32  D00C               	goto	l2537
  8059  002F34                     l2531:
  8060  002F34  0E00               	movlw	0
  8061  002F36  6E01               	movwf	?___ftpack,c
  8062  002F38  0E00               	movlw	0
  8063  002F3A  6E02               	movwf	?___ftpack+1,c
  8064  002F3C  0E00               	movlw	0
  8065  002F3E  6E03               	movwf	?___ftpack+2,c
  8066  002F40  0012               	return	
  8067  002F42                     l2535:
  8068  002F42  2A04               	incf	___ftpack@exp,f,c
  8069  002F44  90D8               	bcf	status,0,c
  8070  002F46  3203               	rrcf	___ftpack@arg+2,f,c
  8071  002F48  3202               	rrcf	___ftpack@arg+1,f,c
  8072  002F4A  3201               	rrcf	___ftpack@arg,f,c
  8073  002F4C                     l2537:
  8074  002F4C  0E00               	movlw	0
  8075  002F4E  1401               	andwf	___ftpack@arg,w,c
  8076  002F50  6E06               	movwf	??___ftpack& (0+255),c
  8077  002F52  0E00               	movlw	0
  8078  002F54  1402               	andwf	___ftpack@arg+1,w,c
  8079  002F56  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8080  002F58  0EFE               	movlw	254
  8081  002F5A  1403               	andwf	___ftpack@arg+2,w,c
  8082  002F5C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8083  002F5E  5006               	movf	??___ftpack,w,c
  8084  002F60  1007               	iorwf	??___ftpack+1,w,c
  8085  002F62  1008               	iorwf	??___ftpack+2,w,c
  8086  002F64  B4D8               	btfsc	status,2,c
  8087  002F66  D00C               	goto	l2543
  8088  002F68  D7EC               	goto	l2535
  8089  002F6A                     l2539:
  8090  002F6A  2A04               	incf	___ftpack@exp,f,c
  8091  002F6C  0E01               	movlw	1
  8092  002F6E  2601               	addwf	___ftpack@arg,f,c
  8093  002F70  0E00               	movlw	0
  8094  002F72  2202               	addwfc	___ftpack@arg+1,f,c
  8095  002F74  0E00               	movlw	0
  8096  002F76  2203               	addwfc	___ftpack@arg+2,f,c
  8097  002F78  90D8               	bcf	status,0,c
  8098  002F7A  3203               	rrcf	___ftpack@arg+2,f,c
  8099  002F7C  3202               	rrcf	___ftpack@arg+1,f,c
  8100  002F7E  3201               	rrcf	___ftpack@arg,f,c
  8101  002F80                     l2543:
  8102  002F80  0E00               	movlw	0
  8103  002F82  1401               	andwf	___ftpack@arg,w,c
  8104  002F84  6E06               	movwf	??___ftpack& (0+255),c
  8105  002F86  0E00               	movlw	0
  8106  002F88  1402               	andwf	___ftpack@arg+1,w,c
  8107  002F8A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8108  002F8C  0EFF               	movlw	255
  8109  002F8E  1403               	andwf	___ftpack@arg+2,w,c
  8110  002F90  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8111  002F92  5006               	movf	??___ftpack,w,c
  8112  002F94  1007               	iorwf	??___ftpack+1,w,c
  8113  002F96  1008               	iorwf	??___ftpack+2,w,c
  8114  002F98  B4D8               	btfsc	status,2,c
  8115  002F9A  D006               	goto	l2547
  8116  002F9C  D7E6               	goto	l2539
  8117  002F9E                     l2545:
  8118  002F9E  0604               	decf	___ftpack@exp,f,c
  8119  002FA0  90D8               	bcf	status,0,c
  8120  002FA2  3601               	rlcf	___ftpack@arg,f,c
  8121  002FA4  3602               	rlcf	___ftpack@arg+1,f,c
  8122  002FA6  3603               	rlcf	___ftpack@arg+2,f,c
  8123  002FA8                     l2547:
  8124  002FA8  BE02               	btfsc	___ftpack@arg+1,7,c
  8125  002FAA  D003               	goto	l678
  8126  002FAC  0E02               	movlw	2
  8127  002FAE  6004               	cpfslt	___ftpack@exp,c
  8128  002FB0  D7F6               	goto	l2545
  8129  002FB2                     l678:
  8130  002FB2  A004               	btfss	___ftpack@exp,0,c
  8131  002FB4  9E02               	bcf	___ftpack@arg+1,7,c
  8132  002FB6  90D8               	bcf	status,0,c
  8133  002FB8  3204               	rrcf	___ftpack@exp,f,c
  8134  002FBA  5004               	movf	___ftpack@exp,w,c
  8135  002FBC  1203               	iorwf	___ftpack@arg+2,f,c
  8136  002FBE  5005               	movf	___ftpack@sign,w,c
  8137  002FC0  A4D8               	btfss	status,2,c
  8138  002FC2  8E03               	bsf	___ftpack@arg+2,7,c
  8139  002FC4  C001  F001         	movff	___ftpack@arg,?___ftpack
  8140  002FC8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8141  002FCC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8142  002FD0  0012               	return	
  8143  002FD2                     __end_of___ftpack:
  8144                           	opt stack 0
  8145                           tblptru	equ	0xFF8
  8146                           tblptrh	equ	0xFF7
  8147                           tblptrl	equ	0xFF6
  8148                           tablat	equ	0xFF5
  8149                           prodh	equ	0xFF4
  8150                           prodl	equ	0xFF3
  8151                           intcon	equ	0xFF2
  8152                           postinc0	equ	0xFEE
  8153                           wreg	equ	0xFE8
  8154                           indf2	equ	0xFDF
  8155                           postinc2	equ	0xFDE
  8156                           postdec2	equ	0xFDD
  8157                           fsr2h	equ	0xFDA
  8158                           fsr2l	equ	0xFD9
  8159                           status	equ	0xFD8
  8160                           
  8161 ;; *************** function _SetChanADC *****************
  8162 ;; Defined at:
  8163 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic18\plib\ADC\adcsetch.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;  channel         1    wreg     unsigned char 
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;  channel         1    1[COMRAM] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  1    wreg      void 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;Total ram usage:        2 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; This function calls:
  8184 ;;		Nothing
  8185 ;; This function is called by:
  8186 ;;		_main
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           	psect	text37
  8191  00370E                     __ptext37:
  8192                           	opt stack 0
  8193  00370E                     _SetChanADC:
  8194                           	opt stack 30
  8195                           
  8196                           ;incstack = 0
  8197                           ;SetChanADC@channel stored from wreg
  8198  00370E  6E02               	movwf	SetChanADC@channel,c
  8199  003710  CFC2 F001          	movff	4034,??_SetChanADC	;volatile
  8200  003714  0EC3               	movlw	195
  8201  003716  1601               	andwf	??_SetChanADC,f,c
  8202  003718  90D8               	bcf	status,0,c
  8203  00371A  3002               	rrcf	SetChanADC@channel,w,c
  8204  00371C  0B3C               	andlw	60
  8205  00371E  1001               	iorwf	??_SetChanADC,w,c
  8206  003720  6EC2               	movwf	4034,c	;volatile
  8207  003722  0012               	return		;funcret
  8208  003724                     __end_of_SetChanADC:
  8209                           	opt stack 0
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           prodh	equ	0xFF4
  8215                           prodl	equ	0xFF3
  8216                           intcon	equ	0xFF2
  8217                           postinc0	equ	0xFEE
  8218                           wreg	equ	0xFE8
  8219                           indf2	equ	0xFDF
  8220                           postinc2	equ	0xFDE
  8221                           postdec2	equ	0xFDD
  8222                           fsr2h	equ	0xFDA
  8223                           fsr2l	equ	0xFD9
  8224                           status	equ	0xFD8
  8225                           
  8226 ;; *************** function _ReadADC *****************
  8227 ;; Defined at:
  8228 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic18\plib\ADC\adcread.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  2    0[COMRAM] int 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8242 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;Total ram usage:        4 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; This function calls:
  8249 ;;		Nothing
  8250 ;; This function is called by:
  8251 ;;		_main
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           	psect	text38
  8256  003734                     __ptext38:
  8257                           	opt stack 0
  8258  003734                     _ReadADC:
  8259                           	opt stack 30
  8260                           
  8261                           ;incstack = 0
  8262  003734  50C4               	movf	4036,w,c	;volatile
  8263  003736  6E03               	movwf	??_ReadADC& (0+255),c
  8264  003738  50C3               	movf	4035,w,c	;volatile
  8265  00373A  6E01               	movwf	?_ReadADC,c
  8266  00373C  C003  F002         	movff	??_ReadADC,?_ReadADC+1
  8267  003740  0012               	return	
  8268  003742                     __end_of_ReadADC:
  8269                           	opt stack 0
  8270                           tblptru	equ	0xFF8
  8271                           tblptrh	equ	0xFF7
  8272                           tblptrl	equ	0xFF6
  8273                           tablat	equ	0xFF5
  8274                           prodh	equ	0xFF4
  8275                           prodl	equ	0xFF3
  8276                           intcon	equ	0xFF2
  8277                           postinc0	equ	0xFEE
  8278                           wreg	equ	0xFE8
  8279                           indf2	equ	0xFDF
  8280                           postinc2	equ	0xFDE
  8281                           postdec2	equ	0xFDD
  8282                           fsr2h	equ	0xFDA
  8283                           fsr2l	equ	0xFD9
  8284                           status	equ	0xFD8
  8285                           
  8286 ;; *************** function _DelayHalfSec *****************
  8287 ;; Defined at:
  8288 ;;		line 48 in file "LCD_user_functions.h"
  8289 ;; Parameters:    Size  Location     Type
  8290 ;;		None
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;  cntDelay        2    1[COMRAM] int 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  1    wreg      void 
  8295 ;; Registers used:
  8296 ;;		wreg, status,2, status,0
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;Total ram usage:        3 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; This function calls:
  8309 ;;		Nothing
  8310 ;; This function is called by:
  8311 ;;		_main
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text39
  8316  0035F2                     __ptext39:
  8317                           	opt stack 0
  8318  0035F2                     _DelayHalfSec:
  8319                           	opt stack 30
  8320                           
  8321                           ;LCD_user_functions.h: 49: for (int cntDelay = 0; cntDelay < 10; cntDelay ++) _delay((un
      +                          signed long)((50)*(8000000/4000.0)));
  8322                           
  8323                           ;incstack = 0
  8324  0035F2  0E00               	movlw	0
  8325  0035F4  6E03               	movwf	DelayHalfSec@cntDelay+1,c
  8326  0035F6  0E00               	movlw	0
  8327  0035F8  6E02               	movwf	DelayHalfSec@cntDelay,c
  8328  0035FA                     l3333:
  8329  0035FA  BE03               	btfsc	DelayHalfSec@cntDelay+1,7,c
  8330  0035FC  D006               	goto	l3337
  8331  0035FE  5003               	movf	DelayHalfSec@cntDelay+1,w,c
  8332  003600  E10E               	bnz	l69
  8333  003602  0E0A               	movlw	10
  8334  003604  5C02               	subwf	DelayHalfSec@cntDelay,w,c
  8335  003606  B0D8               	btfsc	status,0,c
  8336  003608  0012               	return	
  8337  00360A                     l3337:
  8338  00360A  0E82               	movlw	130
  8339  00360C  6E01               	movwf	??_DelayHalfSec& (0+255),c
  8340  00360E  0EDE               	movlw	222
  8341  003610                     u3777:
  8342  003610  2EE8               	decfsz	wreg,f,c
  8343  003612  D7FE               	bra	u3777
  8344  003614  2E01               	decfsz	??_DelayHalfSec& (0+255),f,c
  8345  003616  D7FC               	bra	u3777
  8346  003618  4A02               	infsnz	DelayHalfSec@cntDelay,f,c
  8347  00361A  2A03               	incf	DelayHalfSec@cntDelay+1,f,c
  8348  00361C  D7EE               	goto	l3333
  8349  00361E                     l69:
  8350  00361E  0012               	return		;funcret
  8351  003620                     __end_of_DelayHalfSec:
  8352                           	opt stack 0
  8353                           tblptru	equ	0xFF8
  8354                           tblptrh	equ	0xFF7
  8355                           tblptrl	equ	0xFF6
  8356                           tablat	equ	0xFF5
  8357                           prodh	equ	0xFF4
  8358                           prodl	equ	0xFF3
  8359                           intcon	equ	0xFF2
  8360                           postinc0	equ	0xFEE
  8361                           wreg	equ	0xFE8
  8362                           indf2	equ	0xFDF
  8363                           postinc2	equ	0xFDE
  8364                           postdec2	equ	0xFDD
  8365                           fsr2h	equ	0xFDA
  8366                           fsr2l	equ	0xFD9
  8367                           status	equ	0xFD8
  8368                           
  8369 ;; *************** function _Delay1Sec *****************
  8370 ;; Defined at:
  8371 ;;		line 44 in file "LCD_user_functions.h"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;		None
  8374 ;; Auto vars:     Size  Location     Type
  8375 ;;  cntDelay        2    1[COMRAM] int 
  8376 ;; Return value:  Size  Location     Type
  8377 ;;                  1    wreg      void 
  8378 ;; Registers used:
  8379 ;;		wreg, status,2, status,0
  8380 ;; Tracked objects:
  8381 ;;		On entry : 0/0
  8382 ;;		On exit  : 0/0
  8383 ;;		Unchanged: 0/0
  8384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;Total ram usage:        3 bytes
  8390 ;; Hardware stack levels used:    1
  8391 ;; This function calls:
  8392 ;;		Nothing
  8393 ;; This function is called by:
  8394 ;;		_main
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           	psect	text40
  8399  003620                     __ptext40:
  8400                           	opt stack 0
  8401  003620                     _Delay1Sec:
  8402                           	opt stack 30
  8403                           
  8404                           ;LCD_user_functions.h: 45: for (int cntDelay = 0; cntDelay < 20; cntDelay ++) _delay((un
      +                          signed long)((50)*(8000000/4000.0)));
  8405                           
  8406                           ;incstack = 0
  8407  003620  0E00               	movlw	0
  8408  003622  6E03               	movwf	Delay1Sec@cntDelay+1,c
  8409  003624  0E00               	movlw	0
  8410  003626  6E02               	movwf	Delay1Sec@cntDelay,c
  8411  003628                     l3323:
  8412  003628  BE03               	btfsc	Delay1Sec@cntDelay+1,7,c
  8413  00362A  D006               	goto	l3327
  8414  00362C  5003               	movf	Delay1Sec@cntDelay+1,w,c
  8415  00362E  E10E               	bnz	l64
  8416  003630  0E14               	movlw	20
  8417  003632  5C02               	subwf	Delay1Sec@cntDelay,w,c
  8418  003634  B0D8               	btfsc	status,0,c
  8419  003636  0012               	return	
  8420  003638                     l3327:
  8421  003638  0E82               	movlw	130
  8422  00363A  6E01               	movwf	??_Delay1Sec& (0+255),c
  8423  00363C  0EDE               	movlw	222
  8424  00363E                     u3787:
  8425  00363E  2EE8               	decfsz	wreg,f,c
  8426  003640  D7FE               	bra	u3787
  8427  003642  2E01               	decfsz	??_Delay1Sec& (0+255),f,c
  8428  003644  D7FC               	bra	u3787
  8429  003646  4A02               	infsnz	Delay1Sec@cntDelay,f,c
  8430  003648  2A03               	incf	Delay1Sec@cntDelay+1,f,c
  8431  00364A  D7EE               	goto	l3323
  8432  00364C                     l64:
  8433  00364C  0012               	return		;funcret
  8434  00364E                     __end_of_Delay1Sec:
  8435                           	opt stack 0
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           postinc0	equ	0xFEE
  8444                           wreg	equ	0xFE8
  8445                           indf2	equ	0xFDF
  8446                           postinc2	equ	0xFDE
  8447                           postdec2	equ	0xFDD
  8448                           fsr2h	equ	0xFDA
  8449                           fsr2l	equ	0xFD9
  8450                           status	equ	0xFD8
  8451                           
  8452 ;; *************** function _ConvertADC *****************
  8453 ;; Defined at:
  8454 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic18\plib\ADC\adcconv.c"
  8455 ;; Parameters:    Size  Location     Type
  8456 ;;		None
  8457 ;; Auto vars:     Size  Location     Type
  8458 ;;		None
  8459 ;; Return value:  Size  Location     Type
  8460 ;;                  1    wreg      void 
  8461 ;; Registers used:
  8462 ;;		None
  8463 ;; Tracked objects:
  8464 ;;		On entry : 0/0
  8465 ;;		On exit  : 0/0
  8466 ;;		Unchanged: 0/0
  8467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8472 ;;Total ram usage:        0 bytes
  8473 ;; Hardware stack levels used:    1
  8474 ;; This function calls:
  8475 ;;		Nothing
  8476 ;; This function is called by:
  8477 ;;		_main
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           	psect	text41
  8482  00375C                     __ptext41:
  8483                           	opt stack 0
  8484  00375C                     _ConvertADC:
  8485                           	opt stack 30
  8486                           
  8487                           ;incstack = 0
  8488  00375C  82C2               	bsf	4034,1,c	;volatile
  8489  00375E  0012               	return		;funcret
  8490  003760                     __end_of_ConvertADC:
  8491                           	opt stack 0
  8492                           tblptru	equ	0xFF8
  8493                           tblptrh	equ	0xFF7
  8494                           tblptrl	equ	0xFF6
  8495                           tablat	equ	0xFF5
  8496                           prodh	equ	0xFF4
  8497                           prodl	equ	0xFF3
  8498                           intcon	equ	0xFF2
  8499                           postinc0	equ	0xFEE
  8500                           wreg	equ	0xFE8
  8501                           indf2	equ	0xFDF
  8502                           postinc2	equ	0xFDE
  8503                           postdec2	equ	0xFDD
  8504                           fsr2h	equ	0xFDA
  8505                           fsr2l	equ	0xFD9
  8506                           status	equ	0xFD8
  8507                           
  8508 ;; *************** function _BusyADC *****************
  8509 ;; Defined at:
  8510 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\pic18\plib\ADC\adcbusy.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;		None
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;		None
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  1    wreg      unsigned char 
  8517 ;; Registers used:
  8518 ;;		wreg
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;Total ram usage:        0 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; This function calls:
  8531 ;;		Nothing
  8532 ;; This function is called by:
  8533 ;;		_main
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           	psect	text42
  8538  003742                     __ptext42:
  8539                           	opt stack 0
  8540  003742                     _BusyADC:
  8541                           	opt stack 30
  8542                           
  8543                           ;incstack = 0
  8544  003742  A2C2               	btfss	4034,1,c	;volatile
  8545  003744  D002               	goto	u3050
  8546  003746  0E01               	movlw	1
  8547  003748  0012               	return	
  8548  00374A                     u3050:
  8549  00374A  0E00               	movlw	0
  8550  00374C  0012               	return	
  8551  00374E                     __end_of_BusyADC:
  8552                           	opt stack 0
  8553                           tblptru	equ	0xFF8
  8554                           tblptrh	equ	0xFF7
  8555                           tblptrl	equ	0xFF6
  8556                           tablat	equ	0xFF5
  8557                           prodh	equ	0xFF4
  8558                           prodl	equ	0xFF3
  8559                           intcon	equ	0xFF2
  8560                           postinc0	equ	0xFEE
  8561                           wreg	equ	0xFE8
  8562                           indf2	equ	0xFDF
  8563                           postinc2	equ	0xFDE
  8564                           postdec2	equ	0xFDD
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           tblptru	equ	0xFF8
  8569                           tblptrh	equ	0xFF7
  8570                           tblptrl	equ	0xFF6
  8571                           tablat	equ	0xFF5
  8572                           prodh	equ	0xFF4
  8573                           prodl	equ	0xFF3
  8574                           intcon	equ	0xFF2
  8575                           postinc0	equ	0xFEE
  8576                           wreg	equ	0xFE8
  8577                           indf2	equ	0xFDF
  8578                           postinc2	equ	0xFDE
  8579                           postdec2	equ	0xFDD
  8580                           fsr2h	equ	0xFDA
  8581                           fsr2l	equ	0xFD9
  8582                           status	equ	0xFD8
  8583                           
  8584                           	psect	rparam
  8585  0000                     tblptru	equ	0xFF8
  8586                           tblptrh	equ	0xFF7
  8587                           tblptrl	equ	0xFF6
  8588                           tablat	equ	0xFF5
  8589                           prodh	equ	0xFF4
  8590                           prodl	equ	0xFF3
  8591                           intcon	equ	0xFF2
  8592                           postinc0	equ	0xFEE
  8593                           wreg	equ	0xFE8
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8


Data Sizes:
    Strings     61
    Constant    118
    Data        3
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    114     125
    BANK0           128     26      36
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> ResultString(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 10
		 -> ResultString(BANK0[10]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_8(CODE[6]), STR_6(CODE[6]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[5]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftneg
    ___awdiv->___awmod
    ___lltoft->___fttol
    ___fttol->___wmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale
    _putsXLCD->_WriteDataXLCD
    _putrsXLCD->_WriteDataXLCD
    _init_XLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _DelayPORXLCD->_Delay1KTCYx
    _init_ADC->_OpenADC
    ___lwtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   76165
                                            106 COMRAM     8     8      0
                            _BusyADC
                         _ConvertADC
                          _Delay1Sec
                       _DelayHalfSec
                            _ReadADC
                         _SetChanADC
                       _SetDDRamAddr
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                           _init_ADC
                          _init_XLCD
                          _putrsXLCD
                           _putsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             47    40      7   62550
                                             93 COMRAM    13     6      7
                                              0 BANK0     26    26      0
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   13017
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   12819
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5997
                                             47 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1816
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1972
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2802
                                             35 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1071
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     922
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     936
                                             20 COMRAM    15    11      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4728
                                             84 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4383
                                             72 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     273
                                             44 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                             84 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3367
                                             69 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (1) _putsXLCD                                             2     0      2     241
                                              1 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (1) _putrsXLCD                                            2     0      2     545
                                              1 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      44
                                              0 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _init_XLCD                                            0     0      0     198
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     154
                                              4 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      44
                                              0 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      44
                                              0 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0      22
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             6     6      0     315
                                              5 COMRAM     6     6      0
                           _CloseADC
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     306
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _CloseADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2679
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SetChanADC                                           2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReadADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DelayHalfSec                                         3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Delay1Sec                                            3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyADC
   _ConvertADC
   _Delay1Sec
   _DelayHalfSec
   _ReadADC
   _SetChanADC
   _SetDDRamAddr
     _DelayFor18TCY
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftneg (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _init_ADC
     _CloseADC
     _OpenADC
   _init_XLCD
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
         _Delay1KTCYx
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
   _putrsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _putsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___fttol
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1A      24       5       28.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     72      7D       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      34        0.0%
DATA                 0      0      A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Sep 15 10:15:12 2018

                     l64 364C                       l69 361E             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             ___ftadd@exp1 0054  
           ___ftadd@exp2 0053             ___ftadd@sign 0052                      l114 3510  
                    l303 134A                      l304 134E                      l305 1834  
                    l332 1922                      l309 13B8                      l319 16A6  
                    l360 1D24                      l409 333C                      l701 2894  
                    l705 28BE                      l716 296E                      l725 298A  
                    l646 2C44                      l750 2B1C                      l743 2A8E  
                    l736 2EF2                      l744 2AB6                      l825 31FA  
                    l835 32D0                      l678 2FB2                      l775 368A  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000    __size_of_WriteCmdXLCD 003E  
           ___awmod@sign 0006                      wreg 000FE8             __CFG_LVP$OFF 000000  
           ___ftdiv@cntr 004F             ___ftdiv@sign 0054             __CFG_WDT$OFF 000000  
                   l3005 2352                     l3111 2BDC                     l3103 2BAC  
                   l3033 2A54                     l3017 36D2                     l3123 2C0A  
                   l3027 2A28                     l3205 3102                     l3301 3352  
                   l3133 2C32                     l3143 2E66                     l3135 2C3E  
                   l3127 2C1A                     l3063 2AE2                     l3313 353A  
                   l3241 2DEC                     l3073 2B0A                     l3323 3628  
                   l2531 2F34                     l2523 3726                     l3251 2E16  
                   l3219 2D76                     l3083 2B4C                     l3075 2B16  
                   l3067 2AF2                     l3411 11B8                     l3403 1174  
                   l3333 35FA                     l3317 354A                     l3309 352A  
                   l3149 2E8E                     l2701 293A                     l3237 2DDC  
                   l3421 11FE                     l3405 119C                     l3327 3638  
                   l2543 2F80                     l2535 2F42                     l3255 2E2C  
                   l3247 2E04                     l3337 360A                     l2545 2F9E  
                   l2537 2F4C                     l3353 355E                     l3169 2ECC  
                   l3249 2E10                     l3265 31AC                     l3089 2B6A  
                   l2801 314C                     l3601 1AD8                     l3521 1782  
                   l3513 16D6                     l2547 2FA8                     l2539 2F6A  
                   l3195 30A6                     l2715 29A6                     l2707 295C  
                   l3187 3444                     l3267 31B8                     l3451 1342  
                   l2901 3054                     l2725 29D6                     l2709 2966  
                   l3277 31EC                     l3269 31BC                     l3293 32C2  
                   l3285 328E                     l2813 3172                     l2741 2CA6  
                   l3621 1BC8                     l3605 1AFE                     l3541 17D8  
                   l3445 1308                     l3437 12A0                     l3381 10DE  
                   l3359 357C                     l3199 30D6                     l3287 329A  
                   l2735 2C7E                     l3703 1F0A                     l3615 1B5C  
                   l3551 182E                     l3527 179A                     l3519 1774  
                   l3463 13A0                     l3455 136A                     l3375 10C6  
                   l2649 36FA                     l2905 3064                     l3721 35C6  
                   l2673 28CC                     l3289 329E                     l2817 3180  
                   l2809 3168                     l2841 3246                     l2833 322C  
                   l3633 1C0E                     l3561 1882                     l3545 17E6  
                   l3529 17A6                     l3481 1520                     l3457 1386  
                   l3449 132E                     l3393 1148                     l3713 1F5C  
                   l2667 28A2                     l3299 3346                     l2755 2CD8  
                   l3707 1F36                     l3619 1BC2                     l3539 17D2  
                   l3475 149A                     l3467 13BC                     l3715 1F78  
                   l3395 115E                     l2853 3272                     l2845 325A  
                   l2837 323A                     l2829 3220                     l2765 2D00  
                   l3661 1D28                     l3637 1C32                     l3581 19C0  
                   l3573 18C8                     l3557 185C                     l3493 15B6  
                   l3389 110E                     l3813 2530                     l3727 35E2  
                   l2695 291E                     l2791 312A                     l2839 3242  
                   l2759 2CE8                     l3655 1CF2                     l3639 1C38  
                   l3647 1CCC                     l3591 1A50                     l3575 18F2  
                   l3487 158E                     l3399 116E                     l3815 2534  
                   l3823 2550                     l2697 2928                     l2689 28FC  
                   l2785 311A                     l2849 3264                     l2769 2D10  
                   l3673 1DA8                     l3657 1D06                     l3649 1CDA  
                   l3593 1A80                     l3585 19FC                     l3809 2520  
                   l2883 300A                     l2699 2932                     l3691 1EB2  
                   l3683 1E8C                     l3595 1A96                     l2893 3034  
                   l2885 3014                     l2797 3140                     l2981 20BA  
                   l3685 1E9A                     l3669 1D56                     l3589 1A3A  
                   l3693 1EC0                     l3773 2406                     l3765 23D6  
                   l2799 3148                     l2967 2810                     l2959 2750  
                   l2991 2182                     l2897 3044                     l2889 3024  
                   l3777 2416                     l2987 215E                     l3699 1EE6  
                   l3779 241A                     l3787 2436                     l2999 22AE  
                   STR_1 1099                     STR_2 10AA                     STR_3 1088  
                   STR_4 1077                     STR_5 10AF                     STR_6 1082  
                   STR_7 10AF                     STR_8 1082                     u2001 2874  
                   u2201 2C66                     u2221 2C8E                     u3050 374A  
                   u3130 123E                     u3230 13B0                     u3135 1234  
                   u2711 2E4E                     u2551 2A0C                     u2731 2E76  
                   u2811 2D5A                     u2571 2A38                     u2830 2D94  
                   u3550 1D1C                     u2835 2D8C                     u3670 23DE  
                   u1991 2860                     u1985 33B2                     u3676 23E0  
                   u3757 3728                     u3767 3700                     u3777 3610  
                   u3787 363E                     _vRef 007B                     _main 2376  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   indf2 000FDF                     fsr2l 000FD9   __size_of_WriteDataXLCD 003E  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000             _sprintf$1615 0080             ___ftmul@cntr 003D  
           ___param_bank 000000             ___ftmul@sign 003E          __end_of_BusyADC 374E  
        __end_of_ReadADC 3742          __end_of_OpenADC 3340             ___fttol@exp1 0023  
           ___fttol@lval 001F             _WriteCmdXLCD 34AC              _Delay1KTCYx 3724  
          ?_SetDDRamAddr 0001                    ?_main 0001          __end_of___awdiv 318A  
        __end_of___ftadd 29FC          __end_of___awmod 327C          __end_of___ftdiv 2F24  
        __end_of___ftneg 3698          __end_of___lldiv 320C          __end_of___ftmul 2D4A  
        ___awdiv@divisor 0009          __end_of___llmod 32E2          __end_of___ftsub 346E  
        __end_of___fttol 2E3E          ___awdiv@counter 000B                    _PORTB 000F81  
                  _TRISB 000F93    __size_of_Delay10KTCYx 0016            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
           ___lltoft@exp 002C           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000                    _u_AN0 0076  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 1029                    _scale 1F86  
        __end_of_isdigit 36DA            ___ftpack@sign 0005                    main@i 006F  
             _ConvertADC 375C           __CFG_BOREN$OFF 000000                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 1F86         __end_of_CloseADC 375C  
         __CFG_MCLRE$OFF 000000          __initialization 33EE             __end_of_main 260A  
       __end_of_BusyXLCD 3524       __size_of_Delay1Sec 002E             _Delay10KTCYx 36F8  
  __size_of_DelayPORXLCD 0008           ??_SetDDRamAddr 0001         __end_of_OpenXLCD 3076  
                 ??_main 006B            ___fttol@sign1 001E            __activetblptr 000002  
          _WriteDataXLCD 346E    __size_of_DelayHalfSec 002E               _SetChanADC 370E  
   __size_of__tdiv_to_l_ 0132                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         ___llmod@dividend 0001                   ?_scale 003F  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0007  
       __end_of___ftpack 2FD2         __end_of___lltoft 339C         __end_of___lwtoft 36BC  
                 _OSCCON 000FD3                ??_BusyADC 0001                ??_ReadADC 0003  
              ??_OpenADC 0003             _DelayPORXLCD 374E           __CFG_XINST$OFF 000000  
   DelayHalfSec@cntDelay 0002         __end_of__powers_ 1050                   ___ftge 3076  
                 ___wmul 364E             _DelayHalfSec 35F2                ??___awdiv 000B  
              ??___ftadd 004F                ??___awmod 0005                ??___ftdiv 004C  
              ??___ftneg 0030                ??___lldiv 0009                ??___ftmul 0036  
              ??___llmod 0009                ??___ftsub 005B                ??___fttol 0019  
       __end_of_init_ADC 35C4                   _fround 260A                   clear_0 3412  
                 clear_1 341E         ___awdiv@quotient 000D          ___awmod@divisor 0003  
        ___awmod@counter 0005           ?_WriteDataXLCD 0001    ___ftmul@f3_as_product 003A  
           __pdataCOMRAM 007B                ??_isdigit 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       __end_of_putsXLCD 35F2                ??_sprintf 0065        __end_of_Delay1Sec 364E  
            ?_ConvertADC 0001               __accesstop 0080  __end_of__initialization 3424  
        __CFG_PBADEN$OFF 000000               ___ftadd@f1 0049               ___ftadd@f2 004C  
             ___ftge@ff1 0055               ___ftge@ff2 0058            ___rparam_used 000001  
             ___ftdiv@f1 0046               ___ftdiv@f2 0049               ___ftdiv@f3 0050  
             ___ftneg@f1 002D               ___ftmul@f1 0030               ___ftmul@f2 0033  
             ___ftsub@f1 0055               ___ftsub@f2 0058          init_ADC@channel 0006  
             ___fttol@f1 0015           __pcstackCOMRAM 0001          init_ADC@config1 0009  
        init_ADC@config2 000A          init_ADC@config3 0007               ___lltoft@c 0024  
          __end_of_scale 2376               ___lwtoft@c 0009               __div_to_l_ 2B2E  
            ?_SetChanADC 0001          __CFG_OSC$INTIO7 000000        Delay1Sec@cntDelay 0002  
              ?_CloseADC 0001          __div_to_l_@exp1 000C          __div_to_l_@cntr 000B  
                ??_scale 0042   __size_of_DelayFor18TCY 001E          __div_to_l_@quot 0007  
             __pbssBANK0 009A                ?_BusyXLCD 0001          WriteCmdXLCD@cmd 0001  
   __end_of_SetDDRamAddr 33EE       __size_of_init_XLCD 0038       init_ADC@portconfig 000B  
              ?_OpenXLCD 0001            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
     __CFG_CCP2MX$PORTBE 000000                  ?___ftge 0055        WriteDataXLCD@data 0001  
                ?___wmul 000F          ??_WriteDataXLCD 0001             ?_Delay1KTCYx 0001  
                ?_fround 003F      __size_of_ConvertADC 0004                ?___ftpack 0001  
              ?___lltoft 0024                ?___lwtoft 0009               ??_CloseADC 0001  
     __size_of_putrsXLCD 0034               ??_BusyXLCD 0001                ?_init_ADC 0001  
                _BusyADC 3742                  _ReadADC 3734               ??_OpenXLCD 0005  
              _ADCResult 0079                  _OpenADC 32E2        __end_of__npowers_ 1077  
                __Hparam 0000      __size_of_SetChanADC 0016               _scale$1614 0042  
                __Lparam 0000          __size_of___ftge 0090                  ___awdiv 3106  
          _DelayFor18TCY 36DA                  ___ftadd 2850                  ___awmod 320C  
                ___ftdiv 2E3E                  ___ftneg 3674                  ___lldiv 318A  
        __size_of___wmul 0026                  ___ftmul 2C56                  ___llmod 327C  
                ___ftsub 342E                  ___fttol 2D4A                ?_putsXLCD 0002  
           __psmallconst 1000          __CFG_STVREN$OFF 000000                  __pcinit 33EE  
             ??___ftpack 0006          putrsXLCD@buffer 0002          __size_of_fround 0246  
                __ramtop 1000               ??___lltoft 0028                  __ptext0 2376  
                __ptext1 10B6                  __ptext2 1F86                  __ptext3 36BC  
                __ptext4 260A                  __ptext5 364E                  __ptext6 2C56  
                __ptext7 320C                  __ptext8 3106                  __ptext9 29FC  
      __end_of_init_XLCD 355C               ??___lwtoft 000C              ?__div_to_l_ 0001  
                _dpowers 1001                  _isdigit 36BC         ___awmod@dividend 0001  
         OpenADC@config2 0001                  _sprintf 10B6                  _voltage 0073  
   end_of_initialization 3424               ??_init_ADC 0006            __Lmediumconst 0000  
        ___lldiv@divisor 0005          ___lldiv@counter 000D           ?_DelayFor18TCY 0001  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
             ??_putsXLCD 0004           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
      __end_of_putrsXLCD 3590            ??__tdiv_to_l_ 0007                _TRISAbits 000F92  
              _TRISCbits 000F94    __size_of_SetDDRamAddr 0052             ??_ConvertADC 0001  
            ___ftdiv@exp 0053                _Delay1Sec 3620      __size_of__div_to_l_ 0128  
            ___ftmul@exp 0039           __end_of___ftge 3106           __end_of___wmul 3674  
          __pidataCOMRAM 3760       __end_of_ConvertADC 3760           __end_of_fround 2850  
           _SetDDRamAddr 339C     __size_of_Delay1KTCYx 0010             ??_SetChanADC 0001  
     SetDDRamAddr@DDaddr 0004      start_initialization 33EE      __end_of__tdiv_to_l_ 2B2E  
      __size_of_CloseADC 0006               ?_Delay1Sec 0001          ___llmod@divisor 0005  
      __size_of_BusyXLCD 003A          ___llmod@counter 0009          ??_DelayFor18TCY 0001  
     __end_of_SetChanADC 3724        __size_of_OpenXLCD 00A4                 ??___ftge 005B  
               ??___wmul 0013            ?_WriteCmdXLCD 0001         __CFG_LPT1OSC$OFF 000000  
               ??_fround 0042            sprintf@tmpval 008A               fround@prec 0048  
      __size_of___ftpack 00AE        __size_of___lltoft 005C              __pbssCOMRAM 0073  
      __size_of___lwtoft 0024            __pcstackBANK0 0080             _isdigit$1257 0002  
        Delay1KTCYx@unit 0001              sprintf@flag 0088              sprintf@fval 0096  
            sprintf@prec 0094              sprintf@temp 0085                 ?_BusyADC 0001  
               ?_ReadADC 0001        __size_of_init_ADC 0034        OpenADC@portconfig 0002  
               ?_OpenADC 0001                _main$1611 006C           putsXLCD@buffer 0002  
         ??_WriteCmdXLCD 0001                 ?___awdiv 0007                 ?___ftadd 0049  
               ?___awmod 0001                 ?___ftdiv 0046                 ?___ftneg 002D  
               ?___lldiv 0001                 ?___ftmul 0030                 ?___llmod 0001  
               ?___ftsub 0055                __npowers_ 1050                 ?___fttol 0015  
          ?_Delay10KTCYx 0001              __tdiv_to_l_ 29FC        __size_of_putsXLCD 002E  
  __end_of_WriteDataXLCD 34AC             ??__div_to_l_ 0007              __smallconst 1000  
               ?_isdigit 0001                _init_XLCD 3524                 ?_sprintf 005E  
         __size_of_scale 03F0           ___wmul@product 0013            OpenADC@config 0005  
               _LATAbits 000F89              ??_Delay1Sec 0001                 _LATCbits 000F8B  
               _PIE1bits 000F9D            ?_DelayPORXLCD 0001                 _PIR1bits 000F9E  
        OpenXLCD@lcdtype 0005       __end_of__div_to_l_ 2C56         __CFG_WDTPS$32768 000000  
          ?_DelayHalfSec 0001           ??_Delay10KTCYx 0001               _ADCON0bits 000FC2  
              main@i_233 0071        ___wmul@multiplier 000F                _putrsXLCD 355C  
       Delay10KTCYx@unit 0002               ?_init_XLCD 0001                 _CloseADC 3756  
               _BusyXLCD 34EA                init_ADC@i 0008           ??_DelayPORXLCD 0002  
               _OpenXLCD 2FD2         __size_of_BusyADC 000C         __size_of_ReadADC 000E  
               __Hrparam 0000         __size_of_OpenADC 005E                 __Lrparam 0000  
         ??_DelayHalfSec 0001         __size_of___awdiv 0084         __size_of___ftadd 01AC  
       __size_of___awmod 0070         __size_of___ftdiv 00E6         __size_of___ftneg 0024  
       __size_of___lldiv 0082         __size_of___ftmul 00F4         __size_of___llmod 0066  
       __size_of___ftsub 0040         __size_of___fttol 00F4                 ___ftpack 2F24  
            _fround$1612 0045              _fround$1613 0042                 ___lltoft 3340  
               ___lwtoft 3698               sprintf@exp 0092               sprintf@val 008E  
             ?_putrsXLCD 0002         __size_of_isdigit 001E                 __ptext10 2B2E  
               __ptext11 3340                 __ptext20 35C4                 __ptext12 327C  
               __ptext21 355C                 __ptext13 318A                 __ptext30 34EA  
               __ptext22 346E                 __ptext14 2D4A                 __ptext31 36DA  
               __ptext23 3524                 __ptext15 342E                 __ptext40 3620  
               __ptext32 3590                 __ptext24 2FD2                 __ptext16 2850  
               __ptext41 375C                 __ptext33 32E2                 __ptext25 34AC  
               __ptext17 3674                 __ptext42 3742                 __ptext34 3756  
               __ptext26 339C                 __ptext18 3076                 __ptext35 3698  
               __ptext27 374E                 __ptext19 2E3E                 __ptext36 2F24  
               __ptext28 3724                 __ptext37 370E                 __ptext29 36F8  
               __ptext38 3734                 __ptext39 35F2                 __powers_ 1029  
           _ResultString 009A     __end_of_WriteCmdXLCD 34EA         __size_of_sprintf 0ED0  
               _init_ADC 3590            __size_of_main 0294                 _putsXLCD 35C4  
          ??_Delay1KTCYx 0001               _INTCONbits 000FF2              ??_init_XLCD 0006  
               isdigit@c 0003                 scale@scl 0045     __end_of_Delay10KTCYx 370E  
              sprintf@ap 0083         __tdiv_to_l_@exp1 000F                sprintf@sp 005E  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
      SetChanADC@channel 0002    __end_of_DelayFor18TCY 36F8             ?__tdiv_to_l_ 0001  
               sprintf@c 0099                 sprintf@f 0060     __end_of_DelayPORXLCD 3756  
            ??_putrsXLCD 0004         ___lldiv@quotient 0009      __end_of_Delay1KTCYx 3734  
   __end_of_DelayHalfSec 3620  
